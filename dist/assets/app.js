// Generated by Haxe 4.0.0-rc.3+e3df7a448
(function ($global) { "use strict";
var $estr = function() { return js_Boot.__string_rec(this,''); },$hxEnums = $hxEnums || {},$_;
class HxOverrides {
	static cca(s,index) {
		var x = s.charCodeAt(index);
		if(x != x) {
			return undefined;
		}
		return x;
	}
	static substr(s,pos,len) {
		if(len == null) {
			len = s.length;
		} else if(len < 0) {
			if(pos == 0) {
				len = s.length + len;
			} else {
				return "";
			}
		}
		return s.substr(pos,len);
	}
	static remove(a,obj) {
		var i = a.indexOf(obj);
		if(i == -1) {
			return false;
		}
		a.splice(i,1);
		return true;
	}
}
HxOverrides.__name__ = true;
Math.__name__ = true;
class Reflect {
	static field(o,field) {
		try {
			return o[field];
		} catch( e ) {
			return null;
		}
	}
	static getProperty(o,field) {
		var tmp;
		if(o == null) {
			return null;
		} else {
			var tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["get_" + field];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				return o[tmp]();
			} else {
				return o[field];
			}
		}
	}
	static setProperty(o,field,value) {
		var tmp;
		var tmp1;
		if(o.__properties__) {
			tmp = o.__properties__["set_" + field];
			tmp1 = tmp;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			o[tmp](value);
		} else {
			o[field] = value;
		}
	}
	static fields(o) {
		var a = [];
		if(o != null) {
			var hasOwnProperty = Object.prototype.hasOwnProperty;
			for( var f in o ) {
			if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
				a.push(f);
			}
			}
		}
		return a;
	}
	static deleteField(o,field) {
		if(!Object.prototype.hasOwnProperty.call(o,field)) {
			return false;
		}
		delete(o[field]);
		return true;
	}
}
Reflect.__name__ = true;
class StringTools {
	static startsWith(s,start) {
		if(s.length >= start.length) {
			return s.lastIndexOf(start,0) == 0;
		} else {
			return false;
		}
	}
	static isSpace(s,pos) {
		var c = HxOverrides.cca(s,pos);
		if(!(c > 8 && c < 14)) {
			return c == 32;
		} else {
			return true;
		}
	}
	static ltrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,r)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,r,l - r);
		} else {
			return s;
		}
	}
	static rtrim(s) {
		var l = s.length;
		var r = 0;
		while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
		if(r > 0) {
			return HxOverrides.substr(s,0,l - r);
		} else {
			return s;
		}
	}
	static trim(s) {
		return StringTools.ltrim(StringTools.rtrim(s));
	}
}
StringTools.__name__ = true;
class TodoApp {
	static main() {
		new todo_data_Store(function(store) {
			var props = { className : "_c_5F1IArcdSPPyS0HQudzd"};
			var props_store = store;
			var impl = { name : "todos", props : { }, type : pilot_VNodeType.VNodeText, node : null};
			if(impl.type == null) {
				impl.type = pilot_VNodeType.VNodeElement;
			}
			if(impl.children == null) {
				impl.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl.props,"key")) {
				impl.key = Reflect.field(impl.props,"key");
				Reflect.deleteField(impl.props,"key");
			}
			if(impl.hooks == null) {
				impl.hooks = { };
			}
			var children = [impl];
			var impl1 = { name : "h1", props : { className : "_c_RIuHNxx7i3EgQ2Y0Lzpc"}, children : children != null ? children : []};
			if(impl1.type == null) {
				impl1.type = pilot_VNodeType.VNodeElement;
			}
			if(impl1.children == null) {
				impl1.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl1.props,"key")) {
				impl1.key = Reflect.field(impl1.props,"key");
				Reflect.deleteField(impl1.props,"key");
			}
			if(impl1.hooks == null) {
				impl1.hooks = { };
			}
			var children1 = [impl1,new todo_ui_TodoInput({ inputClass : "new-todo", value : "", save : function(value) {
				props_store.addTodo(new todo_data_Todo(value));
				return;
			}}).render()];
			var impl2 = { name : "header", props : { className : "todo-header"}, children : children1 != null ? children1 : []};
			if(impl2.type == null) {
				impl2.type = pilot_VNodeType.VNodeElement;
			}
			if(impl2.children == null) {
				impl2.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl2.props,"key")) {
				impl2.key = Reflect.field(impl2.props,"key");
				Reflect.deleteField(impl2.props,"key");
			}
			if(impl2.hooks == null) {
				impl2.hooks = { };
			}
			var children2 = [impl2];
			var children3;
			if(store.getTodos().length > 0) {
				var store1 = store;
				var props1 = { className : "_c_bLJx8pCNFBHGePTcMw4o"};
				var props2 = { type : "_c_txq0RlwLdJPME8MfKC3w", checked : store1.get_allSelected(), id : "toggle-all", onClick : function(e) {
					if(store1.get_allSelected() == true) {
						store1.markAllPending();
					} else {
						store1.markAllComplete();
					}
					return;
				}};
				var impl3 = { name : "input", props : { type : "checkbox", className : props2.type, checked : props2.checked, id : props2.id, onClick : props2.onClick}, children : []};
				if(impl3.type == null) {
					impl3.type = pilot_VNodeType.VNodeElement;
				}
				if(impl3.children == null) {
					impl3.children = [];
				}
				if(Object.prototype.hasOwnProperty.call(impl3.props,"key")) {
					impl3.key = Reflect.field(impl3.props,"key");
					Reflect.deleteField(impl3.props,"key");
				}
				if(impl3.hooks == null) {
					impl3.hooks = { };
				}
				var children4 = impl3;
				var impl4 = { name : "Toggle All", props : { }, type : pilot_VNodeType.VNodeText, node : null};
				if(impl4.type == null) {
					impl4.type = pilot_VNodeType.VNodeElement;
				}
				if(impl4.children == null) {
					impl4.children = [];
				}
				if(Object.prototype.hasOwnProperty.call(impl4.props,"key")) {
					impl4.key = Reflect.field(impl4.props,"key");
					Reflect.deleteField(impl4.props,"key");
				}
				if(impl4.hooks == null) {
					impl4.hooks = { };
				}
				var children5 = [impl4];
				var impl5 = { name : "label", props : { htmlFor : "toggle-all"}, children : children5 != null ? children5 : []};
				if(impl5.type == null) {
					impl5.type = pilot_VNodeType.VNodeElement;
				}
				if(impl5.children == null) {
					impl5.children = [];
				}
				if(Object.prototype.hasOwnProperty.call(impl5.props,"key")) {
					impl5.key = Reflect.field(impl5.props,"key");
					Reflect.deleteField(impl5.props,"key");
				}
				if(impl5.hooks == null) {
					impl5.hooks = { };
				}
				var children6 = impl5;
				var props3 = { className : "_c_PBJpYz3rUQx5RM52jBfr"};
				var _g = [];
				var _g1 = 0;
				var _g2;
				if(store1._visibleTodos != null) {
					_g2 = store1._visibleTodos;
				} else {
					var filtered = store1.todos.slice();
					filtered.reverse();
					var _g21;
					switch(store1.filter._hx_index) {
					case 0:
						_g21 = filtered;
						break;
					case 1:
						_g21 = filtered.filter(function(todo1) {
							return todo1.complete;
						});
						break;
					case 2:
						_g21 = filtered.filter(function(todo2) {
							return !todo2.complete;
						});
						break;
					}
					store1._visibleTodos = _g21;
					_g2 = store1._visibleTodos;
				}
				while(_g1 < _g2.length) _g.push(new todo_ui_TodoItem({ todo : _g2[_g1++], store : store1}).render());
				var impl6 = { name : "ul", props : props3, children : _g != null ? _g : []};
				if(impl6.type == null) {
					impl6.type = pilot_VNodeType.VNodeElement;
				}
				if(impl6.children == null) {
					impl6.children = [];
				}
				if(Object.prototype.hasOwnProperty.call(impl6.props,"key")) {
					impl6.key = Reflect.field(impl6.props,"key");
					Reflect.deleteField(impl6.props,"key");
				}
				if(impl6.hooks == null) {
					impl6.hooks = { };
				}
				var children7 = [children4,children6,impl6];
				var impl7 = { name : "div", props : props1, children : children7 != null ? children7 : []};
				if(impl7.type == null) {
					impl7.type = pilot_VNodeType.VNodeElement;
				}
				if(impl7.children == null) {
					impl7.children = [];
				}
				if(Object.prototype.hasOwnProperty.call(impl7.props,"key")) {
					impl7.key = Reflect.field(impl7.props,"key");
					Reflect.deleteField(impl7.props,"key");
				}
				if(impl7.hooks == null) {
					impl7.hooks = { };
				}
				children3 = [impl7,new todo_ui_SiteFooter({ store : store}).render()];
			} else {
				children3 = [];
			}
			var children8 = children2.concat(children3);
			var impl8 = { name : "div", props : props, children : children8 != null ? children8 : []};
			if(impl8.type == null) {
				impl8.type = pilot_VNodeType.VNodeElement;
			}
			if(impl8.children == null) {
				impl8.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl8.props,"key")) {
				impl8.key = Reflect.field(impl8.props,"key");
				Reflect.deleteField(impl8.props,"key");
			}
			if(impl8.hooks == null) {
				impl8.hooks = { };
			}
			var impl9 = { name : "Double-click to edit a todo.", props : { }, type : pilot_VNodeType.VNodeText, node : null};
			if(impl9.type == null) {
				impl9.type = pilot_VNodeType.VNodeElement;
			}
			if(impl9.children == null) {
				impl9.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl9.props,"key")) {
				impl9.key = Reflect.field(impl9.props,"key");
				Reflect.deleteField(impl9.props,"key");
			}
			if(impl9.hooks == null) {
				impl9.hooks = { };
			}
			var children9 = [impl9];
			var impl10 = { name : "p", props : { }, children : children9 != null ? children9 : []};
			if(impl10.type == null) {
				impl10.type = pilot_VNodeType.VNodeElement;
			}
			if(impl10.children == null) {
				impl10.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl10.props,"key")) {
				impl10.key = Reflect.field(impl10.props,"key");
				Reflect.deleteField(impl10.props,"key");
			}
			if(impl10.hooks == null) {
				impl10.hooks = { };
			}
			var impl11 = { name : "Written by ", props : { }, type : pilot_VNodeType.VNodeText, node : null};
			if(impl11.type == null) {
				impl11.type = pilot_VNodeType.VNodeElement;
			}
			if(impl11.children == null) {
				impl11.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl11.props,"key")) {
				impl11.key = Reflect.field(impl11.props,"key");
				Reflect.deleteField(impl11.props,"key");
			}
			if(impl11.hooks == null) {
				impl11.hooks = { };
			}
			var impl12 = { name : "wartman", props : { }, type : pilot_VNodeType.VNodeText, node : null};
			if(impl12.type == null) {
				impl12.type = pilot_VNodeType.VNodeElement;
			}
			if(impl12.children == null) {
				impl12.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl12.props,"key")) {
				impl12.key = Reflect.field(impl12.props,"key");
				Reflect.deleteField(impl12.props,"key");
			}
			if(impl12.hooks == null) {
				impl12.hooks = { };
			}
			var children10 = [impl12];
			var impl13 = { name : "a", props : { href : "https://github.com/wartman"}, children : children10 != null ? children10 : []};
			if(impl13.type == null) {
				impl13.type = pilot_VNodeType.VNodeElement;
			}
			if(impl13.children == null) {
				impl13.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl13.props,"key")) {
				impl13.key = Reflect.field(impl13.props,"key");
				Reflect.deleteField(impl13.props,"key");
			}
			if(impl13.hooks == null) {
				impl13.hooks = { };
			}
			var children11 = [impl11,impl13];
			var impl14 = { name : "p", props : { }, children : children11 != null ? children11 : []};
			if(impl14.type == null) {
				impl14.type = pilot_VNodeType.VNodeElement;
			}
			if(impl14.children == null) {
				impl14.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl14.props,"key")) {
				impl14.key = Reflect.field(impl14.props,"key");
				Reflect.deleteField(impl14.props,"key");
			}
			if(impl14.hooks == null) {
				impl14.hooks = { };
			}
			var impl15 = { name : "Part of ", props : { }, type : pilot_VNodeType.VNodeText, node : null};
			if(impl15.type == null) {
				impl15.type = pilot_VNodeType.VNodeElement;
			}
			if(impl15.children == null) {
				impl15.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl15.props,"key")) {
				impl15.key = Reflect.field(impl15.props,"key");
				Reflect.deleteField(impl15.props,"key");
			}
			if(impl15.hooks == null) {
				impl15.hooks = { };
			}
			var impl16 = { name : "TodoMVC", props : { }, type : pilot_VNodeType.VNodeText, node : null};
			if(impl16.type == null) {
				impl16.type = pilot_VNodeType.VNodeElement;
			}
			if(impl16.children == null) {
				impl16.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl16.props,"key")) {
				impl16.key = Reflect.field(impl16.props,"key");
				Reflect.deleteField(impl16.props,"key");
			}
			if(impl16.hooks == null) {
				impl16.hooks = { };
			}
			var children12 = [impl16];
			var impl17 = { name : "a", props : { href : "http://todomvc.com"}, children : children12 != null ? children12 : []};
			if(impl17.type == null) {
				impl17.type = pilot_VNodeType.VNodeElement;
			}
			if(impl17.children == null) {
				impl17.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl17.props,"key")) {
				impl17.key = Reflect.field(impl17.props,"key");
				Reflect.deleteField(impl17.props,"key");
			}
			if(impl17.hooks == null) {
				impl17.hooks = { };
			}
			var children13 = [impl15,impl17];
			var impl18 = { name : "p", props : { }, children : children13 != null ? children13 : []};
			if(impl18.type == null) {
				impl18.type = pilot_VNodeType.VNodeElement;
			}
			if(impl18.children == null) {
				impl18.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl18.props,"key")) {
				impl18.key = Reflect.field(impl18.props,"key");
				Reflect.deleteField(impl18.props,"key");
			}
			if(impl18.hooks == null) {
				impl18.hooks = { };
			}
			var children14 = [impl10,impl14,impl18];
			var impl19 = { name : "footer", props : { className : "_c_IbTNnStgGyOy61TiWBtP"}, children : children14 != null ? children14 : []};
			if(impl19.type == null) {
				impl19.type = pilot_VNodeType.VNodeElement;
			}
			if(impl19.children == null) {
				impl19.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl19.props,"key")) {
				impl19.key = Reflect.field(impl19.props,"key");
				Reflect.deleteField(impl19.props,"key");
			}
			if(impl19.hooks == null) {
				impl19.hooks = { };
			}
			var children15 = [impl8,impl19];
			var impl20 = { name : "div", props : { id : "root"}, children : children15 != null ? children15 : []};
			if(impl20.type == null) {
				impl20.type = pilot_VNodeType.VNodeElement;
			}
			if(impl20.children == null) {
				impl20.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl20.props,"key")) {
				impl20.key = Reflect.field(impl20.props,"key");
				Reflect.deleteField(impl20.props,"key");
			}
			if(impl20.hooks == null) {
				impl20.hooks = { };
			}
			return impl20;
		},window.document.getElementById("root")).update();
	}
}
TodoApp.__name__ = true;
class haxe_iterators_DynamicAccessKeyValueIterator {
	constructor(access) {
		this.access = access;
		this.keys = Reflect.fields(access);
		this.index = 0;
	}
	hasNext() {
		return this.index < this.keys.length;
	}
	next() {
		var key = this.keys[this.index++];
		return { value : this.access[key], key : key};
	}
}
haxe_iterators_DynamicAccessKeyValueIterator.__name__ = true;
class js__$Boot_HaxeError extends Error {
	constructor(val) {
		super();
		this.val = val;
		if(Error.captureStackTrace) {
			Error.captureStackTrace(this,js__$Boot_HaxeError);
		}
	}
}
js__$Boot_HaxeError.__name__ = true;
class js_Boot {
	static __string_rec(o,s) {
		if(o == null) {
			return "null";
		}
		if(s.length >= 5) {
			return "<...>";
		}
		var t = typeof(o);
		if(t == "function" && (o.__name__ || o.__ename__)) {
			t = "object";
		}
		switch(t) {
		case "function":
			return "<function>";
		case "object":
			if(o.__enum__) {
				var e = $hxEnums[o.__enum__];
				var n = e.__constructs__[o._hx_index];
				var con = e[n];
				if(con.__params__) {
					s += "\t";
					var tmp = n + "(";
					var _g = [];
					var _g1 = 0;
					var _g2 = con.__params__;
					while(_g1 < _g2.length) {
						var p = _g2[_g1];
						++_g1;
						_g.push(js_Boot.__string_rec(o[p],s));
					}
					return tmp + _g.join(",") + ")";
				} else {
					return n;
				}
			}
			if(((o) instanceof Array)) {
				var str = "[";
				s += "\t";
				var _g3 = 0;
				var _g11 = o.length;
				while(_g3 < _g11) {
					var i = _g3++;
					str += (i > 0 ? "," : "") + js_Boot.__string_rec(o[i],s);
				}
				str += "]";
				return str;
			}
			var tostr;
			try {
				tostr = o.toString;
			} catch( e1 ) {
				var e2 = ((e1) instanceof js__$Boot_HaxeError) ? e1.val : e1;
				return "???";
			}
			if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
				var s2 = o.toString();
				if(s2 != "[object Object]") {
					return s2;
				}
			}
			var str1 = "{\n";
			s += "\t";
			var hasp = o.hasOwnProperty != null;
			var k = null;
			for( k in o ) {
			if(hasp && !o.hasOwnProperty(k)) {
				continue;
			}
			if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
				continue;
			}
			if(str1.length != 2) {
				str1 += ", \n";
			}
			str1 += s + k + " : " + js_Boot.__string_rec(o[k],s);
			}
			s = s.substring(1);
			str1 += "\n" + s + "}";
			return str1;
		case "string":
			return o;
		default:
			return String(o);
		}
	}
}
js_Boot.__name__ = true;
class pilot_Differ {
	static patchNode(parent,node,oldVNode,newVNode,isSvg) {
		if(oldVNode != newVNode) {
			if(oldVNode != null && oldVNode.type == pilot_VNodeType.VNodeText && newVNode.type == pilot_VNodeType.VNodeText) {
				if(oldVNode.name != newVNode.name) {
					node.nodeValue = newVNode.name;
				}
			} else if(oldVNode == null || oldVNode.name != newVNode.name) {
				var node1;
				var _g = newVNode.type;
				if(_g == null) {
					node1 = window.document.createElement(newVNode.name);
				} else {
					switch(_g._hx_index) {
					case 0:
						node1 = isSvg || newVNode.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",newVNode.name) : window.document.createElement(newVNode.name);
						break;
					case 1:
						node1 = window.document.createTextNode(newVNode.name);
						break;
					case 3:
						node1 = window.document.createDocumentFragment();
						break;
					default:
						node1 = window.document.createElement(newVNode.name);
					}
				}
				var access = newVNode.props;
				var _g1_keys = Reflect.fields(access);
				var _g1_index = 0;
				while(_g1_index < _g1_keys.length) {
					var key = _g1_keys[_g1_index++];
					var _g2 = { value : access[key], key : key};
					var key1 = _g2.key;
					var value = _g2.value;
					var key2 = key1;
					var oldValue = null;
					if(key1 != "key") {
						if(StringTools.startsWith(key1,"on")) {
							var event = HxOverrides.substr(key1,2,null).toLowerCase();
							if(oldValue != null) {
								node1.removeEventListener(event,oldValue);
							}
							if(value != null) {
								node1.addEventListener(event,value);
							}
						} else if(!isSvg && key1 != "list" && Reflect.getProperty(node1,key1) != null) {
							Reflect.setProperty(node1,key1,value == null ? "" : value);
						} else if(value == null || value == false) {
							node1.removeAttribute(key1);
						} else {
							if(key1 == "className") {
								key2 = "class";
							}
							if(key2 == "htmlFor") {
								key2 = "for";
							}
							node1.setAttribute(key2,value);
						}
					}
				}
				var _g1 = 0;
				var _g21 = newVNode.children;
				while(_g1 < _g21.length) {
					var child = _g21[_g1];
					++_g1;
					var node2;
					var _g3 = child.type;
					if(_g3 == null) {
						node2 = window.document.createElement(child.name);
					} else {
						switch(_g3._hx_index) {
						case 0:
							node2 = isSvg || child.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child.name) : window.document.createElement(child.name);
							break;
						case 1:
							node2 = window.document.createTextNode(child.name);
							break;
						case 3:
							node2 = window.document.createDocumentFragment();
							break;
						default:
							node2 = window.document.createElement(child.name);
						}
					}
					var _g11 = new haxe_iterators_DynamicAccessKeyValueIterator(child.props);
					while(_g11.index < _g11.keys.length) {
						var key3 = _g11.keys[_g11.index++];
						var _g22 = { value : _g11.access[key3], key : key3};
						var key4 = _g22.key;
						var value1 = _g22.value;
						var key5 = key4;
						var oldValue1 = null;
						if(key4 != "key") {
							if(StringTools.startsWith(key4,"on")) {
								var event1 = HxOverrides.substr(key4,2,null).toLowerCase();
								if(oldValue1 != null) {
									node2.removeEventListener(event1,oldValue1);
								}
								if(value1 != null) {
									node2.addEventListener(event1,value1);
								}
							} else if(!isSvg && key4 != "list" && Reflect.getProperty(node2,key4) != null) {
								Reflect.setProperty(node2,key4,value1 == null ? "" : value1);
							} else if(value1 == null || value1 == false) {
								node2.removeAttribute(key4);
							} else {
								if(key4 == "className") {
									key5 = "class";
								}
								if(key5 == "htmlFor") {
									key5 = "for";
								}
								node2.setAttribute(key5,value1);
							}
						}
					}
					var _g12 = 0;
					var _g23 = child.children;
					while(_g12 < _g23.length) node2.appendChild(pilot_Differ.createNode(_g23[_g12++],isSvg));
					child.node = node2;
					if(child.hooks.attach != null && child.node != null) {
						child.hooks.attach(child);
					}
					node1.appendChild(node2);
				}
				newVNode.node = node1;
				if(newVNode.hooks.attach != null && newVNode.node != null) {
					newVNode.hooks.attach(newVNode);
				}
				node = parent.insertBefore(node1,node);
				if(oldVNode != null && oldVNode.node != null) {
					if(oldVNode.hooks.detach != null) {
						oldVNode.hooks.detach();
					}
					parent.removeChild(oldVNode.node);
				}
			} else {
				var tmpVChild;
				var oldVChild;
				var oldKey;
				var newKey;
				var oldVProps = oldVNode.props;
				var newVProps = newVNode.props;
				var oldVChildren = oldVNode.children;
				var newVChildren = newVNode.children;
				var oldHead = 0;
				var newHead = 0;
				var oldTail = oldVChildren.length - 1;
				var newTail = newVChildren.length - 1;
				isSvg = isSvg || newVNode.name == "svg";
				var out = { };
				var access1 = oldVProps;
				var _g_keys = Reflect.fields(access1);
				var _g_index = 0;
				while(_g_index < _g_keys.length) {
					var key6 = _g_keys[_g_index++];
					var _g13 = { value : access1[key6], key : key6};
					out[_g13.key] = _g13.value;
				}
				var access2 = newVProps;
				var _g_keys1 = Reflect.fields(access2);
				var _g_index1 = 0;
				while(_g_index1 < _g_keys1.length) {
					var key7 = _g_keys1[_g_index1++];
					var _g14 = { value : access2[key7], key : key7};
					out[_g14.key] = _g14.value;
				}
				var access3 = out;
				var _g_keys2 = Reflect.fields(access3);
				var _g_index2 = 0;
				while(_g_index2 < _g_keys2.length) {
					var key8 = _g_keys2[_g_index2++];
					var k = ({ value : access3[key8], key : key8}).key;
					switch(k) {
					case "checked":case "selected":case "value":
						if(Reflect.field(node,k) != Reflect.field(newVProps,k)) {
							var key9 = k;
							var oldValue2 = Reflect.field(oldVProps,k);
							var newValue = Reflect.field(newVProps,k);
							if(k != "key") {
								if(StringTools.startsWith(k,"on")) {
									var event2 = HxOverrides.substr(k,2,null).toLowerCase();
									if(oldValue2 != null) {
										node.removeEventListener(event2,oldValue2);
									}
									if(newValue != null) {
										node.addEventListener(event2,newValue);
									}
								} else if(!isSvg && k != "list" && Reflect.getProperty(node,k) != null) {
									Reflect.setProperty(node,k,newValue == null ? "" : newValue);
								} else if(newValue == null || newValue == false) {
									node.removeAttribute(k);
								} else {
									if(k == "className") {
										key9 = "class";
									}
									if(key9 == "htmlFor") {
										key9 = "for";
									}
									node.setAttribute(key9,newValue);
								}
							}
						}
						break;
					default:
						if(Reflect.field(oldVProps,k) != Reflect.field(newVProps,k)) {
							var key10 = k;
							var oldValue3 = Reflect.field(oldVProps,k);
							var newValue1 = Reflect.field(newVProps,k);
							if(k != "key") {
								if(StringTools.startsWith(k,"on")) {
									var event3 = HxOverrides.substr(k,2,null).toLowerCase();
									if(oldValue3 != null) {
										node.removeEventListener(event3,oldValue3);
									}
									if(newValue1 != null) {
										node.addEventListener(event3,newValue1);
									}
								} else if(!isSvg && k != "list" && Reflect.getProperty(node,k) != null) {
									Reflect.setProperty(node,k,newValue1 == null ? "" : newValue1);
								} else if(newValue1 == null || newValue1 == false) {
									node.removeAttribute(k);
								} else {
									if(k == "className") {
										key10 = "class";
									}
									if(key10 == "htmlFor") {
										key10 = "for";
									}
									node.setAttribute(key10,newValue1);
								}
							}
						}
					}
				}
				while(newHead <= newTail && oldHead <= oldTail) {
					var tmp;
					var vnode = oldVChildren[oldHead];
					oldKey = vnode == null ? null : vnode.key;
					if(oldKey != null) {
						var vnode1 = newVChildren[newHead];
						tmp = oldKey != (vnode1 == null ? null : vnode1.key);
					} else {
						tmp = true;
					}
					if(tmp) {
						break;
					}
					pilot_Differ.patchNode(node,oldVChildren[oldHead++].node,oldVChildren[oldHead - 1],newVChildren[newHead++],isSvg);
				}
				while(newHead <= newTail && oldHead <= oldTail) {
					var tmp1;
					var vnode2 = oldVChildren[oldTail];
					oldKey = vnode2 == null ? null : vnode2.key;
					if(oldKey != null) {
						var vnode3 = newVChildren[newTail];
						tmp1 = oldKey != (vnode3 == null ? null : vnode3.key);
					} else {
						tmp1 = true;
					}
					if(tmp1) {
						break;
					}
					pilot_Differ.patchNode(node,oldVChildren[oldTail--].node,oldVChildren[oldTail + 1],newVChildren[newTail--],isSvg);
				}
				if(oldHead > oldTail) {
					while(newHead <= newTail) {
						var vnode4 = newVChildren[newHead++];
						var node3;
						var _g4 = vnode4.type;
						if(_g4 == null) {
							node3 = window.document.createElement(vnode4.name);
						} else {
							switch(_g4._hx_index) {
							case 0:
								node3 = isSvg || vnode4.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",vnode4.name) : window.document.createElement(vnode4.name);
								break;
							case 1:
								node3 = window.document.createTextNode(vnode4.name);
								break;
							case 3:
								node3 = window.document.createDocumentFragment();
								break;
							default:
								node3 = window.document.createElement(vnode4.name);
							}
						}
						var access4 = vnode4.props;
						var _g1_keys1 = Reflect.fields(access4);
						var _g1_index1 = 0;
						while(_g1_index1 < _g1_keys1.length) {
							var key11 = _g1_keys1[_g1_index1++];
							var _g24 = { value : access4[key11], key : key11};
							var key12 = _g24.key;
							var value2 = _g24.value;
							var key13 = key12;
							var oldValue4 = null;
							if(key12 != "key") {
								if(StringTools.startsWith(key12,"on")) {
									var event4 = HxOverrides.substr(key12,2,null).toLowerCase();
									if(oldValue4 != null) {
										node3.removeEventListener(event4,oldValue4);
									}
									if(value2 != null) {
										node3.addEventListener(event4,value2);
									}
								} else if(!isSvg && key12 != "list" && Reflect.getProperty(node3,key12) != null) {
									Reflect.setProperty(node3,key12,value2 == null ? "" : value2);
								} else if(value2 == null || value2 == false) {
									node3.removeAttribute(key12);
								} else {
									if(key12 == "className") {
										key13 = "class";
									}
									if(key13 == "htmlFor") {
										key13 = "for";
									}
									node3.setAttribute(key13,value2);
								}
							}
						}
						var _g15 = 0;
						var _g25 = vnode4.children;
						while(_g15 < _g25.length) {
							var child1 = _g25[_g15];
							++_g15;
							var node4;
							var _g5 = child1.type;
							if(_g5 == null) {
								node4 = window.document.createElement(child1.name);
							} else {
								switch(_g5._hx_index) {
								case 0:
									node4 = isSvg || child1.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child1.name) : window.document.createElement(child1.name);
									break;
								case 1:
									node4 = window.document.createTextNode(child1.name);
									break;
								case 3:
									node4 = window.document.createDocumentFragment();
									break;
								default:
									node4 = window.document.createElement(child1.name);
								}
							}
							var _g16 = new haxe_iterators_DynamicAccessKeyValueIterator(child1.props);
							while(_g16.index < _g16.keys.length) {
								var key14 = _g16.keys[_g16.index++];
								var _g26 = { value : _g16.access[key14], key : key14};
								var key15 = _g26.key;
								var value3 = _g26.value;
								var key16 = key15;
								var oldValue5 = null;
								if(key15 != "key") {
									if(StringTools.startsWith(key15,"on")) {
										var event5 = HxOverrides.substr(key15,2,null).toLowerCase();
										if(oldValue5 != null) {
											node4.removeEventListener(event5,oldValue5);
										}
										if(value3 != null) {
											node4.addEventListener(event5,value3);
										}
									} else if(!isSvg && key15 != "list" && Reflect.getProperty(node4,key15) != null) {
										Reflect.setProperty(node4,key15,value3 == null ? "" : value3);
									} else if(value3 == null || value3 == false) {
										node4.removeAttribute(key15);
									} else {
										if(key15 == "className") {
											key16 = "class";
										}
										if(key16 == "htmlFor") {
											key16 = "for";
										}
										node4.setAttribute(key16,value3);
									}
								}
							}
							var _g17 = 0;
							var _g27 = child1.children;
							while(_g17 < _g27.length) node4.appendChild(pilot_Differ.createNode(_g27[_g17++],isSvg));
							child1.node = node4;
							if(child1.hooks.attach != null && child1.node != null) {
								child1.hooks.attach(child1);
							}
							node3.appendChild(node4);
						}
						vnode4.node = node3;
						if(vnode4.hooks.attach != null && vnode4.node != null) {
							vnode4.hooks.attach(vnode4);
						}
						oldVChild = oldVChildren[oldHead];
						node.insertBefore(node3,oldVChild != null ? oldVChild.node : null);
					}
				} else if(newHead > newTail) {
					while(oldHead <= oldTail) {
						var vnode5 = oldVChildren[oldHead++];
						if(vnode5.hooks.detach != null) {
							vnode5.hooks.detach();
						}
						node.removeChild(vnode5.node);
					}
				} else {
					var keyed = { };
					var newKeyed = { };
					var i = oldHead;
					while(i <= oldTail) {
						oldKey = oldVChildren[i].key;
						if(oldKey != null) {
							keyed[oldKey] = oldVChildren[i];
						}
						++i;
					}
					while(newHead <= newTail) {
						oldVChild = oldVChildren[oldHead];
						var vnode6 = oldVChild;
						oldKey = vnode6 == null ? null : vnode6.key;
						var vnode7 = newVChildren[newHead];
						newKey = vnode7 == null ? null : vnode7.key;
						var tmp2;
						if(newKeyed[oldKey] == null) {
							if(newKey != null) {
								var vnode8 = oldVChildren[oldHead + 1];
								tmp2 = newKey == (vnode8 == null ? null : vnode8.key);
							} else {
								tmp2 = false;
							}
						} else {
							tmp2 = true;
						}
						if(tmp2) {
							if(oldKey == null) {
								if(oldVChild.hooks.detach != null) {
									oldVChild.hooks.detach();
								}
								node.removeChild(oldVChild.node);
							}
							++oldHead;
							continue;
						}
						if(newKey == null || oldVNode.type == pilot_VNodeType.VNodeRecycled) {
							if(oldKey == null) {
								pilot_Differ.patchNode(node,oldVChild != null ? oldVChild.node : null,oldVChild,newVChildren[newHead],isSvg);
								++newHead;
							}
							++oldHead;
						} else {
							if(oldKey == newKey) {
								pilot_Differ.patchNode(node,oldVChild.node,oldVChild,newVChildren[newHead],isSvg);
								newKeyed[newKey] = true;
								++oldHead;
							} else {
								tmpVChild = keyed[newKey];
								if(tmpVChild != null) {
									pilot_Differ.patchNode(node,node.insertBefore(tmpVChild.node,oldVChild != null ? oldVChild.node : null),tmpVChild,newVChildren[newHead],isSvg);
									newKeyed[newKey] = true;
								} else {
									pilot_Differ.patchNode(node,oldVChild != null ? oldVChild.node : null,null,newVChildren[newHead],isSvg);
								}
							}
							++newHead;
						}
					}
					while(oldHead <= oldTail) {
						oldVChild = oldVChildren[oldHead++];
						var vnode9 = oldVChild;
						if((vnode9 == null ? null : vnode9.key) == null) {
							if(oldVChild.hooks.detach != null) {
								oldVChild.hooks.detach();
							}
							node.removeChild(oldVChild.node);
						}
					}
					var _g_keys3 = Reflect.fields(keyed);
					var _g_index3 = 0;
					while(_g_index3 < _g_keys3.length) {
						var key17 = _g_keys3[_g_index3++];
						var _g18 = { value : keyed[key17], key : key17};
						var vnode10 = _g18.value;
						if(newKeyed[_g18.key] == null) {
							if(vnode10.hooks.detach != null) {
								vnode10.hooks.detach();
							}
							node.removeChild(vnode10.node);
						}
					}
				}
			}
		}
		newVNode.node = node;
		return node;
	}
	static recycleNode(node) {
		if(node.nodeType == 3) {
			var impl = { name : node.nodeValue, props : { }, type : pilot_VNodeType.VNodeText, node : node};
			if(impl.type == null) {
				impl.type = pilot_VNodeType.VNodeElement;
			}
			if(impl.children == null) {
				impl.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl.props,"key")) {
				impl.key = Reflect.field(impl.props,"key");
				Reflect.deleteField(impl.props,"key");
			}
			if(impl.hooks == null) {
				impl.hooks = { };
			}
			return impl;
		} else {
			var impl1 = node.nodeName.toLowerCase();
			var _g = [];
			var _g1 = 0;
			var _g2 = node.childNodes;
			while(_g1 < _g2.length) _g.push(pilot_Differ.recycleNode(_g2[_g1++]));
			var impl2 = { name : impl1, props : { }, children : _g, node : node, type : pilot_VNodeType.VNodeRecycled, key : null};
			if(impl2.type == null) {
				impl2.type = pilot_VNodeType.VNodeElement;
			}
			if(impl2.children == null) {
				impl2.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl2.props,"key")) {
				impl2.key = Reflect.field(impl2.props,"key");
				Reflect.deleteField(impl2.props,"key");
			}
			if(impl2.hooks == null) {
				impl2.hooks = { };
			}
			return impl2;
		}
	}
	static createNode(vnode,isSvg) {
		var node;
		var _g = vnode.type;
		if(_g == null) {
			node = window.document.createElement(vnode.name);
		} else {
			switch(_g._hx_index) {
			case 0:
				node = isSvg || vnode.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",vnode.name) : window.document.createElement(vnode.name);
				break;
			case 1:
				node = window.document.createTextNode(vnode.name);
				break;
			case 3:
				node = window.document.createDocumentFragment();
				break;
			default:
				node = window.document.createElement(vnode.name);
			}
		}
		var access = vnode.props;
		var _g1_keys = Reflect.fields(access);
		var _g1_index = 0;
		while(_g1_index < _g1_keys.length) {
			var key = _g1_keys[_g1_index++];
			var _g2 = { value : access[key], key : key};
			var key1 = _g2.key;
			var value = _g2.value;
			var key2 = key1;
			var oldValue = null;
			if(key1 != "key") {
				if(StringTools.startsWith(key1,"on")) {
					var event = HxOverrides.substr(key1,2,null).toLowerCase();
					if(oldValue != null) {
						node.removeEventListener(event,oldValue);
					}
					if(value != null) {
						node.addEventListener(event,value);
					}
				} else if(!isSvg && key1 != "list" && Reflect.getProperty(node,key1) != null) {
					Reflect.setProperty(node,key1,value == null ? "" : value);
				} else if(value == null || value == false) {
					node.removeAttribute(key1);
				} else {
					if(key1 == "className") {
						key2 = "class";
					}
					if(key2 == "htmlFor") {
						key2 = "for";
					}
					node.setAttribute(key2,value);
				}
			}
		}
		var _g1 = 0;
		var _g21 = vnode.children;
		while(_g1 < _g21.length) node.appendChild(pilot_Differ.createNode(_g21[_g1++],isSvg));
		vnode.node = node;
		if(vnode.hooks.attach != null && vnode.node != null) {
			vnode.hooks.attach(vnode);
		}
		return node;
	}
}
pilot_Differ.__name__ = true;
class pilot_StatefulWidget {
	build() {
		return null;
	}
	render() {
		this._pilot_vnode = this.build();
		this._pilot_vnode.hooks.attach = $bind(this,this.attached);
		this._pilot_vnode.hooks.detach = $bind(this,this._pilot_detached);
		return this._pilot_vnode;
	}
	_pilot_detached() {
		this._pilot_vnode = null;
	}
	attached(vnode) {
	}
}
pilot_StatefulWidget.__name__ = true;
class pilot_StatelessWidget {
	build() {
		return null;
	}
	render() {
		var vnode = this.build();
		vnode.hooks.attach = $bind(this,this.attached);
		vnode.hooks.detach = $bind(this,this.detached);
		return vnode;
	}
	attached(vnode) {
	}
	detached() {
	}
}
pilot_StatelessWidget.__name__ = true;
var pilot_VNodeType = $hxEnums["pilot.VNodeType"] = { __ename__ : true, __constructs__ : ["VNodeElement","VNodeText","VNodeRecycled","VNodeFragment"]
	,VNodeElement: {_hx_index:0,__enum__:"pilot.VNodeType",toString:$estr}
	,VNodeText: {_hx_index:1,__enum__:"pilot.VNodeType",toString:$estr}
	,VNodeRecycled: {_hx_index:2,__enum__:"pilot.VNodeType",toString:$estr}
	,VNodeFragment: {_hx_index:3,__enum__:"pilot.VNodeType",toString:$estr}
};
class todo_data_Store {
	constructor(build,node) {
		this._visibleTodos = null;
		this._allSelected = null;
		this.filter = todo_data_VisibleTodos.VisibleAll;
		this.todos = [];
		this.node = node;
		this.build = build;
	}
	get_allSelected() {
		if(this._allSelected != null) {
			return this._allSelected;
		}
		var tmp;
		if(this._visibleTodos != null) {
			tmp = this._visibleTodos;
		} else {
			var filtered = this.todos.slice();
			filtered.reverse();
			var tmp1;
			switch(this.filter._hx_index) {
			case 0:
				tmp1 = filtered;
				break;
			case 1:
				tmp1 = filtered.filter(function(todo1) {
					return todo1.complete;
				});
				break;
			case 2:
				tmp1 = filtered.filter(function(todo2) {
					return !todo2.complete;
				});
				break;
			}
			this._visibleTodos = tmp1;
			tmp = this._visibleTodos;
		}
		if(tmp.length == 0) {
			this._allSelected = false;
			return this._allSelected;
		}
		var tmp2;
		if(this._visibleTodos != null) {
			tmp2 = this._visibleTodos;
		} else {
			var filtered1 = this.todos.slice();
			filtered1.reverse();
			var tmp3;
			switch(this.filter._hx_index) {
			case 0:
				tmp3 = filtered1;
				break;
			case 1:
				tmp3 = filtered1.filter(function(todo3) {
					return todo3.complete;
				});
				break;
			case 2:
				tmp3 = filtered1.filter(function(todo4) {
					return !todo4.complete;
				});
				break;
			}
			this._visibleTodos = tmp3;
			tmp2 = this._visibleTodos;
		}
		this._allSelected = tmp2.filter(function(t) {
			return !t.complete;
		}).length == 0;
		return this._allSelected;
	}
	update() {
		this._visibleTodos = null;
		this._allSelected = null;
		var node = this.node;
		var vnode = this.build(this);
		var node1 = node;
		var oldVNode;
		if(Reflect.field(node,"__vnode") != null) {
			oldVNode = Reflect.field(node,"__vnode");
		} else if(node.nodeType == 3) {
			var impl = { name : node.nodeValue, props : { }, type : pilot_VNodeType.VNodeText, node : node};
			if(impl.type == null) {
				impl.type = pilot_VNodeType.VNodeElement;
			}
			if(impl.children == null) {
				impl.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl.props,"key")) {
				impl.key = Reflect.field(impl.props,"key");
				Reflect.deleteField(impl.props,"key");
			}
			if(impl.hooks == null) {
				impl.hooks = { };
			}
			oldVNode = impl;
		} else {
			var impl1 = node.nodeName.toLowerCase();
			var _g = [];
			var _g1 = 0;
			var _g2 = node.childNodes;
			while(_g1 < _g2.length) {
				var n = _g2[_g1];
				++_g1;
				var impl2;
				if(n.nodeType == 3) {
					var impl3 = { name : n.nodeValue, props : { }, type : pilot_VNodeType.VNodeText, node : n};
					if(impl3.type == null) {
						impl3.type = pilot_VNodeType.VNodeElement;
					}
					if(impl3.children == null) {
						impl3.children = [];
					}
					if(Object.prototype.hasOwnProperty.call(impl3.props,"key")) {
						impl3.key = Reflect.field(impl3.props,"key");
						Reflect.deleteField(impl3.props,"key");
					}
					if(impl3.hooks == null) {
						impl3.hooks = { };
					}
					impl2 = impl3;
				} else {
					var impl4 = n.nodeName.toLowerCase();
					var _g3 = [];
					var _g11 = 0;
					var _g21 = n.childNodes;
					while(_g11 < _g21.length) {
						var n1 = _g21[_g11];
						++_g11;
						var impl5;
						if(n1.nodeType == 3) {
							var impl6 = { name : n1.nodeValue, props : { }, type : pilot_VNodeType.VNodeText, node : n1};
							if(impl6.type == null) {
								impl6.type = pilot_VNodeType.VNodeElement;
							}
							if(impl6.children == null) {
								impl6.children = [];
							}
							if(Object.prototype.hasOwnProperty.call(impl6.props,"key")) {
								impl6.key = Reflect.field(impl6.props,"key");
								Reflect.deleteField(impl6.props,"key");
							}
							if(impl6.hooks == null) {
								impl6.hooks = { };
							}
							impl5 = impl6;
						} else {
							var impl7 = n1.nodeName.toLowerCase();
							var _g4 = [];
							var _g12 = 0;
							var _g22 = n1.childNodes;
							while(_g12 < _g22.length) _g4.push(pilot_Differ.recycleNode(_g22[_g12++]));
							var impl8 = { name : impl7, props : { }, children : _g4, node : n1, type : pilot_VNodeType.VNodeRecycled, key : null};
							if(impl8.type == null) {
								impl8.type = pilot_VNodeType.VNodeElement;
							}
							if(impl8.children == null) {
								impl8.children = [];
							}
							if(Object.prototype.hasOwnProperty.call(impl8.props,"key")) {
								impl8.key = Reflect.field(impl8.props,"key");
								Reflect.deleteField(impl8.props,"key");
							}
							if(impl8.hooks == null) {
								impl8.hooks = { };
							}
							impl5 = impl8;
						}
						_g3.push(impl5);
					}
					var impl9 = { name : impl4, props : { }, children : _g3, node : n, type : pilot_VNodeType.VNodeRecycled, key : null};
					if(impl9.type == null) {
						impl9.type = pilot_VNodeType.VNodeElement;
					}
					if(impl9.children == null) {
						impl9.children = [];
					}
					if(Object.prototype.hasOwnProperty.call(impl9.props,"key")) {
						impl9.key = Reflect.field(impl9.props,"key");
						Reflect.deleteField(impl9.props,"key");
					}
					if(impl9.hooks == null) {
						impl9.hooks = { };
					}
					impl2 = impl9;
				}
				_g.push(impl2);
			}
			var impl10 = { name : impl1, props : { }, children : _g, node : node, type : pilot_VNodeType.VNodeRecycled, key : null};
			if(impl10.type == null) {
				impl10.type = pilot_VNodeType.VNodeElement;
			}
			if(impl10.children == null) {
				impl10.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl10.props,"key")) {
				impl10.key = Reflect.field(impl10.props,"key");
				Reflect.deleteField(impl10.props,"key");
			}
			if(impl10.hooks == null) {
				impl10.hooks = { };
			}
			oldVNode = impl10;
		}
		var isSvg = false;
		if(oldVNode != vnode) {
			if(oldVNode != null && oldVNode.type == pilot_VNodeType.VNodeText && vnode.type == pilot_VNodeType.VNodeText) {
				if(oldVNode.name != vnode.name) {
					node1.nodeValue = vnode.name;
				}
			} else if(oldVNode == null || oldVNode.name != vnode.name) {
				var node2;
				var _g5 = vnode.type;
				if(_g5 == null) {
					node2 = window.document.createElement(vnode.name);
				} else {
					switch(_g5._hx_index) {
					case 0:
						node2 = vnode.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",vnode.name) : window.document.createElement(vnode.name);
						break;
					case 1:
						node2 = window.document.createTextNode(vnode.name);
						break;
					case 3:
						node2 = window.document.createDocumentFragment();
						break;
					default:
						node2 = window.document.createElement(vnode.name);
					}
				}
				var access = vnode.props;
				var _g1_keys = Reflect.fields(access);
				var _g1_index = 0;
				while(_g1_index < _g1_keys.length) {
					var key = _g1_keys[_g1_index++];
					var _g23 = { value : access[key], key : key};
					var key1 = _g23.key;
					var value = _g23.value;
					var key2 = key1;
					var oldValue = null;
					if(key1 != "key") {
						if(StringTools.startsWith(key1,"on")) {
							var event = HxOverrides.substr(key1,2,null).toLowerCase();
							if(oldValue != null) {
								node2.removeEventListener(event,oldValue);
							}
							if(value != null) {
								node2.addEventListener(event,value);
							}
						} else if(key1 != "list" && Reflect.getProperty(node2,key1) != null) {
							Reflect.setProperty(node2,key1,value == null ? "" : value);
						} else if(value == null || value == false) {
							node2.removeAttribute(key1);
						} else {
							if(key1 == "className") {
								key2 = "class";
							}
							if(key2 == "htmlFor") {
								key2 = "for";
							}
							node2.setAttribute(key2,value);
						}
					}
				}
				var _g13 = 0;
				var _g24 = vnode.children;
				while(_g13 < _g24.length) {
					var child = _g24[_g13];
					++_g13;
					var node3;
					var _g6 = child.type;
					if(_g6 == null) {
						node3 = window.document.createElement(child.name);
					} else {
						switch(_g6._hx_index) {
						case 0:
							node3 = child.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child.name) : window.document.createElement(child.name);
							break;
						case 1:
							node3 = window.document.createTextNode(child.name);
							break;
						case 3:
							node3 = window.document.createDocumentFragment();
							break;
						default:
							node3 = window.document.createElement(child.name);
						}
					}
					var access1 = child.props;
					var _g1_keys1 = Reflect.fields(access1);
					var _g1_index1 = 0;
					while(_g1_index1 < _g1_keys1.length) {
						var key3 = _g1_keys1[_g1_index1++];
						var _g25 = { value : access1[key3], key : key3};
						var key4 = _g25.key;
						var value1 = _g25.value;
						var key5 = key4;
						var oldValue1 = null;
						if(key4 != "key") {
							if(StringTools.startsWith(key4,"on")) {
								var event1 = HxOverrides.substr(key4,2,null).toLowerCase();
								if(oldValue1 != null) {
									node3.removeEventListener(event1,oldValue1);
								}
								if(value1 != null) {
									node3.addEventListener(event1,value1);
								}
							} else if(key4 != "list" && Reflect.getProperty(node3,key4) != null) {
								Reflect.setProperty(node3,key4,value1 == null ? "" : value1);
							} else if(value1 == null || value1 == false) {
								node3.removeAttribute(key4);
							} else {
								if(key4 == "className") {
									key5 = "class";
								}
								if(key5 == "htmlFor") {
									key5 = "for";
								}
								node3.setAttribute(key5,value1);
							}
						}
					}
					var _g14 = 0;
					var _g26 = child.children;
					while(_g14 < _g26.length) node3.appendChild(pilot_Differ.createNode(_g26[_g14++],false));
					child.node = node3;
					if(child.hooks.attach != null && child.node != null) {
						child.hooks.attach(child);
					}
					node2.appendChild(node3);
				}
				vnode.node = node2;
				if(vnode.hooks.attach != null && vnode.node != null) {
					vnode.hooks.attach(vnode);
				}
				node1 = node.insertBefore(node2,node1);
				if(oldVNode != null && oldVNode.node != null) {
					if(oldVNode.hooks.detach != null) {
						oldVNode.hooks.detach();
					}
					node.removeChild(oldVNode.node);
				}
			} else {
				var tmpVChild;
				var oldVChild;
				var oldKey;
				var newKey;
				var oldVProps = oldVNode.props;
				var newVProps = vnode.props;
				var oldVChildren = oldVNode.children;
				var newVChildren = vnode.children;
				var oldHead = 0;
				var newHead = 0;
				var oldTail = oldVChildren.length - 1;
				var newTail = newVChildren.length - 1;
				isSvg = vnode.name == "svg";
				var out = { };
				var access2 = oldVProps;
				var _g_keys = Reflect.fields(access2);
				var _g_index = 0;
				while(_g_index < _g_keys.length) {
					var key6 = _g_keys[_g_index++];
					var _g15 = { value : access2[key6], key : key6};
					out[_g15.key] = _g15.value;
				}
				var access3 = newVProps;
				var _g_keys1 = Reflect.fields(access3);
				var _g_index1 = 0;
				while(_g_index1 < _g_keys1.length) {
					var key7 = _g_keys1[_g_index1++];
					var _g16 = { value : access3[key7], key : key7};
					out[_g16.key] = _g16.value;
				}
				var access4 = out;
				var _g_keys2 = Reflect.fields(access4);
				var _g_index2 = 0;
				while(_g_index2 < _g_keys2.length) {
					var key8 = _g_keys2[_g_index2++];
					var k = ({ value : access4[key8], key : key8}).key;
					switch(k) {
					case "checked":case "selected":case "value":
						if(Reflect.field(node1,k) != Reflect.field(newVProps,k)) {
							var key9 = k;
							var oldValue2 = Reflect.field(oldVProps,k);
							var newValue = Reflect.field(newVProps,k);
							if(k != "key") {
								if(StringTools.startsWith(k,"on")) {
									var event2 = HxOverrides.substr(k,2,null).toLowerCase();
									if(oldValue2 != null) {
										node1.removeEventListener(event2,oldValue2);
									}
									if(newValue != null) {
										node1.addEventListener(event2,newValue);
									}
								} else if(!isSvg && k != "list" && Reflect.getProperty(node1,k) != null) {
									Reflect.setProperty(node1,k,newValue == null ? "" : newValue);
								} else if(newValue == null || newValue == false) {
									node1.removeAttribute(k);
								} else {
									if(k == "className") {
										key9 = "class";
									}
									if(key9 == "htmlFor") {
										key9 = "for";
									}
									node1.setAttribute(key9,newValue);
								}
							}
						}
						break;
					default:
						if(Reflect.field(oldVProps,k) != Reflect.field(newVProps,k)) {
							var key10 = k;
							var oldValue3 = Reflect.field(oldVProps,k);
							var newValue1 = Reflect.field(newVProps,k);
							if(k != "key") {
								if(StringTools.startsWith(k,"on")) {
									var event3 = HxOverrides.substr(k,2,null).toLowerCase();
									if(oldValue3 != null) {
										node1.removeEventListener(event3,oldValue3);
									}
									if(newValue1 != null) {
										node1.addEventListener(event3,newValue1);
									}
								} else if(!isSvg && k != "list" && Reflect.getProperty(node1,k) != null) {
									Reflect.setProperty(node1,k,newValue1 == null ? "" : newValue1);
								} else if(newValue1 == null || newValue1 == false) {
									node1.removeAttribute(k);
								} else {
									if(k == "className") {
										key10 = "class";
									}
									if(key10 == "htmlFor") {
										key10 = "for";
									}
									node1.setAttribute(key10,newValue1);
								}
							}
						}
					}
				}
				while(newHead <= newTail && oldHead <= oldTail) {
					var node4;
					var vnode1 = oldVChildren[oldHead];
					oldKey = vnode1 == null ? null : vnode1.key;
					if(oldKey != null) {
						var vnode2 = newVChildren[newHead];
						node4 = oldKey != (vnode2 == null ? null : vnode2.key);
					} else {
						node4 = true;
					}
					if(node4) {
						break;
					}
					var node5 = oldVChildren[oldHead].node;
					var oldVNode1 = oldVChildren[oldHead++];
					var newVNode = newVChildren[newHead++];
					var isSvg1 = isSvg;
					if(oldVNode1 != newVNode) {
						if(oldVNode1 != null && oldVNode1.type == pilot_VNodeType.VNodeText && newVNode.type == pilot_VNodeType.VNodeText) {
							if(oldVNode1.name != newVNode.name) {
								node5.nodeValue = newVNode.name;
							}
						} else if(oldVNode1 == null || oldVNode1.name != newVNode.name) {
							var node6;
							var _g7 = newVNode.type;
							if(_g7 == null) {
								node6 = window.document.createElement(newVNode.name);
							} else {
								switch(_g7._hx_index) {
								case 0:
									node6 = isSvg1 || newVNode.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",newVNode.name) : window.document.createElement(newVNode.name);
									break;
								case 1:
									node6 = window.document.createTextNode(newVNode.name);
									break;
								case 3:
									node6 = window.document.createDocumentFragment();
									break;
								default:
									node6 = window.document.createElement(newVNode.name);
								}
							}
							var access5 = newVNode.props;
							var _g1_keys2 = Reflect.fields(access5);
							var _g1_index2 = 0;
							while(_g1_index2 < _g1_keys2.length) {
								var key11 = _g1_keys2[_g1_index2++];
								var _g27 = { value : access5[key11], key : key11};
								var key12 = _g27.key;
								var value2 = _g27.value;
								var key13 = key12;
								var oldValue4 = null;
								if(key12 != "key") {
									if(StringTools.startsWith(key12,"on")) {
										var event4 = HxOverrides.substr(key12,2,null).toLowerCase();
										if(oldValue4 != null) {
											node6.removeEventListener(event4,oldValue4);
										}
										if(value2 != null) {
											node6.addEventListener(event4,value2);
										}
									} else if(!isSvg1 && key12 != "list" && Reflect.getProperty(node6,key12) != null) {
										Reflect.setProperty(node6,key12,value2 == null ? "" : value2);
									} else if(value2 == null || value2 == false) {
										node6.removeAttribute(key12);
									} else {
										if(key12 == "className") {
											key13 = "class";
										}
										if(key13 == "htmlFor") {
											key13 = "for";
										}
										node6.setAttribute(key13,value2);
									}
								}
							}
							var _g17 = 0;
							var _g28 = newVNode.children;
							while(_g17 < _g28.length) {
								var child1 = _g28[_g17];
								++_g17;
								var node7;
								var _g8 = child1.type;
								if(_g8 == null) {
									node7 = window.document.createElement(child1.name);
								} else {
									switch(_g8._hx_index) {
									case 0:
										node7 = isSvg1 || child1.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child1.name) : window.document.createElement(child1.name);
										break;
									case 1:
										node7 = window.document.createTextNode(child1.name);
										break;
									case 3:
										node7 = window.document.createDocumentFragment();
										break;
									default:
										node7 = window.document.createElement(child1.name);
									}
								}
								var _g18 = new haxe_iterators_DynamicAccessKeyValueIterator(child1.props);
								while(_g18.index < _g18.keys.length) {
									var key14 = _g18.keys[_g18.index++];
									var _g29 = { value : _g18.access[key14], key : key14};
									var key15 = _g29.key;
									var value3 = _g29.value;
									var key16 = key15;
									var oldValue5 = null;
									if(key15 != "key") {
										if(StringTools.startsWith(key15,"on")) {
											var event5 = HxOverrides.substr(key15,2,null).toLowerCase();
											if(oldValue5 != null) {
												node7.removeEventListener(event5,oldValue5);
											}
											if(value3 != null) {
												node7.addEventListener(event5,value3);
											}
										} else if(!isSvg1 && key15 != "list" && Reflect.getProperty(node7,key15) != null) {
											Reflect.setProperty(node7,key15,value3 == null ? "" : value3);
										} else if(value3 == null || value3 == false) {
											node7.removeAttribute(key15);
										} else {
											if(key15 == "className") {
												key16 = "class";
											}
											if(key16 == "htmlFor") {
												key16 = "for";
											}
											node7.setAttribute(key16,value3);
										}
									}
								}
								var _g19 = 0;
								var _g210 = child1.children;
								while(_g19 < _g210.length) {
									var child2 = _g210[_g19];
									++_g19;
									var node8;
									var _g9 = child2.type;
									if(_g9 == null) {
										node8 = window.document.createElement(child2.name);
									} else {
										switch(_g9._hx_index) {
										case 0:
											node8 = isSvg1 || child2.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child2.name) : window.document.createElement(child2.name);
											break;
										case 1:
											node8 = window.document.createTextNode(child2.name);
											break;
										case 3:
											node8 = window.document.createDocumentFragment();
											break;
										default:
											node8 = window.document.createElement(child2.name);
										}
									}
									var access6 = child2.props;
									var _g1_keys3 = Reflect.fields(access6);
									var _g1_index3 = 0;
									while(_g1_index3 < _g1_keys3.length) {
										var key17 = _g1_keys3[_g1_index3++];
										var _g211 = { value : access6[key17], key : key17};
										var key18 = _g211.key;
										var value4 = _g211.value;
										var key19 = key18;
										var oldValue6 = null;
										if(key18 != "key") {
											if(StringTools.startsWith(key18,"on")) {
												var event6 = HxOverrides.substr(key18,2,null).toLowerCase();
												if(oldValue6 != null) {
													node8.removeEventListener(event6,oldValue6);
												}
												if(value4 != null) {
													node8.addEventListener(event6,value4);
												}
											} else if(!isSvg1 && key18 != "list" && Reflect.getProperty(node8,key18) != null) {
												Reflect.setProperty(node8,key18,value4 == null ? "" : value4);
											} else if(value4 == null || value4 == false) {
												node8.removeAttribute(key18);
											} else {
												if(key18 == "className") {
													key19 = "class";
												}
												if(key19 == "htmlFor") {
													key19 = "for";
												}
												node8.setAttribute(key19,value4);
											}
										}
									}
									var _g110 = 0;
									var _g212 = child2.children;
									while(_g110 < _g212.length) node8.appendChild(pilot_Differ.createNode(_g212[_g110++],isSvg1));
									child2.node = node8;
									if(child2.hooks.attach != null && child2.node != null) {
										child2.hooks.attach(child2);
									}
									node7.appendChild(node8);
								}
								child1.node = node7;
								if(child1.hooks.attach != null && child1.node != null) {
									child1.hooks.attach(child1);
								}
								node6.appendChild(node7);
							}
							newVNode.node = node6;
							if(newVNode.hooks.attach != null && newVNode.node != null) {
								newVNode.hooks.attach(newVNode);
							}
							node5 = node1.insertBefore(node6,node5);
							if(oldVNode1 != null && oldVNode1.node != null) {
								if(oldVNode1.hooks.detach != null) {
									oldVNode1.hooks.detach();
								}
								node1.removeChild(oldVNode1.node);
							}
						} else {
							var tmpVChild1;
							var oldVChild1;
							var oldKey1;
							var newKey1;
							var oldVProps1 = oldVNode1.props;
							var newVProps1 = newVNode.props;
							var oldVChildren1 = oldVNode1.children;
							var newVChildren1 = newVNode.children;
							var oldHead1 = 0;
							var newHead1 = 0;
							var oldTail1 = oldVChildren1.length - 1;
							var newTail1 = newVChildren1.length - 1;
							isSvg1 = isSvg1 || newVNode.name == "svg";
							var out1 = { };
							var access7 = oldVProps1;
							var _g_keys3 = Reflect.fields(access7);
							var _g_index3 = 0;
							while(_g_index3 < _g_keys3.length) {
								var key20 = _g_keys3[_g_index3++];
								var _g111 = { value : access7[key20], key : key20};
								out1[_g111.key] = _g111.value;
							}
							var access8 = newVProps1;
							var _g_keys4 = Reflect.fields(access8);
							var _g_index4 = 0;
							while(_g_index4 < _g_keys4.length) {
								var key21 = _g_keys4[_g_index4++];
								var _g112 = { value : access8[key21], key : key21};
								out1[_g112.key] = _g112.value;
							}
							var access9 = out1;
							var _g_keys5 = Reflect.fields(access9);
							var _g_index5 = 0;
							while(_g_index5 < _g_keys5.length) {
								var key22 = _g_keys5[_g_index5++];
								var k1 = ({ value : access9[key22], key : key22}).key;
								switch(k1) {
								case "checked":case "selected":case "value":
									if(Reflect.field(node5,k1) != Reflect.field(newVProps1,k1)) {
										var key23 = k1;
										var oldValue7 = Reflect.field(oldVProps1,k1);
										var newValue2 = Reflect.field(newVProps1,k1);
										if(k1 != "key") {
											if(StringTools.startsWith(k1,"on")) {
												var event7 = HxOverrides.substr(k1,2,null).toLowerCase();
												if(oldValue7 != null) {
													node5.removeEventListener(event7,oldValue7);
												}
												if(newValue2 != null) {
													node5.addEventListener(event7,newValue2);
												}
											} else if(!isSvg1 && k1 != "list" && Reflect.getProperty(node5,k1) != null) {
												Reflect.setProperty(node5,k1,newValue2 == null ? "" : newValue2);
											} else if(newValue2 == null || newValue2 == false) {
												node5.removeAttribute(k1);
											} else {
												if(k1 == "className") {
													key23 = "class";
												}
												if(key23 == "htmlFor") {
													key23 = "for";
												}
												node5.setAttribute(key23,newValue2);
											}
										}
									}
									break;
								default:
									if(Reflect.field(oldVProps1,k1) != Reflect.field(newVProps1,k1)) {
										var key24 = k1;
										var oldValue8 = Reflect.field(oldVProps1,k1);
										var newValue3 = Reflect.field(newVProps1,k1);
										if(k1 != "key") {
											if(StringTools.startsWith(k1,"on")) {
												var event8 = HxOverrides.substr(k1,2,null).toLowerCase();
												if(oldValue8 != null) {
													node5.removeEventListener(event8,oldValue8);
												}
												if(newValue3 != null) {
													node5.addEventListener(event8,newValue3);
												}
											} else if(!isSvg1 && k1 != "list" && Reflect.getProperty(node5,k1) != null) {
												Reflect.setProperty(node5,k1,newValue3 == null ? "" : newValue3);
											} else if(newValue3 == null || newValue3 == false) {
												node5.removeAttribute(k1);
											} else {
												if(k1 == "className") {
													key24 = "class";
												}
												if(key24 == "htmlFor") {
													key24 = "for";
												}
												node5.setAttribute(key24,newValue3);
											}
										}
									}
								}
							}
							while(newHead1 <= newTail1 && oldHead1 <= oldTail1) {
								var node9;
								var vnode3 = oldVChildren1[oldHead1];
								oldKey1 = vnode3 == null ? null : vnode3.key;
								if(oldKey1 != null) {
									var vnode4 = newVChildren1[newHead1];
									node9 = oldKey1 != (vnode4 == null ? null : vnode4.key);
								} else {
									node9 = true;
								}
								if(node9) {
									break;
								}
								pilot_Differ.patchNode(node5,oldVChildren1[oldHead1++].node,oldVChildren1[oldHead1 - 1],newVChildren1[newHead1++],isSvg1);
							}
							while(newHead1 <= newTail1 && oldHead1 <= oldTail1) {
								var node10;
								var vnode5 = oldVChildren1[oldTail1];
								oldKey1 = vnode5 == null ? null : vnode5.key;
								if(oldKey1 != null) {
									var vnode6 = newVChildren1[newTail1];
									node10 = oldKey1 != (vnode6 == null ? null : vnode6.key);
								} else {
									node10 = true;
								}
								if(node10) {
									break;
								}
								pilot_Differ.patchNode(node5,oldVChildren1[oldTail1--].node,oldVChildren1[oldTail1 + 1],newVChildren1[newTail1--],isSvg1);
							}
							if(oldHead1 > oldTail1) {
								while(newHead1 <= newTail1) {
									var vnode7 = newVChildren1[newHead1++];
									var node11;
									var _g10 = vnode7.type;
									if(_g10 == null) {
										node11 = window.document.createElement(vnode7.name);
									} else {
										switch(_g10._hx_index) {
										case 0:
											node11 = isSvg1 || vnode7.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",vnode7.name) : window.document.createElement(vnode7.name);
											break;
										case 1:
											node11 = window.document.createTextNode(vnode7.name);
											break;
										case 3:
											node11 = window.document.createDocumentFragment();
											break;
										default:
											node11 = window.document.createElement(vnode7.name);
										}
									}
									var access10 = vnode7.props;
									var _g1_keys4 = Reflect.fields(access10);
									var _g1_index4 = 0;
									while(_g1_index4 < _g1_keys4.length) {
										var key25 = _g1_keys4[_g1_index4++];
										var _g213 = { value : access10[key25], key : key25};
										var key26 = _g213.key;
										var value5 = _g213.value;
										var key27 = key26;
										var oldValue9 = null;
										if(key26 != "key") {
											if(StringTools.startsWith(key26,"on")) {
												var event9 = HxOverrides.substr(key26,2,null).toLowerCase();
												if(oldValue9 != null) {
													node11.removeEventListener(event9,oldValue9);
												}
												if(value5 != null) {
													node11.addEventListener(event9,value5);
												}
											} else if(!isSvg1 && key26 != "list" && Reflect.getProperty(node11,key26) != null) {
												Reflect.setProperty(node11,key26,value5 == null ? "" : value5);
											} else if(value5 == null || value5 == false) {
												node11.removeAttribute(key26);
											} else {
												if(key26 == "className") {
													key27 = "class";
												}
												if(key27 == "htmlFor") {
													key27 = "for";
												}
												node11.setAttribute(key27,value5);
											}
										}
									}
									var _g113 = 0;
									var _g214 = vnode7.children;
									while(_g113 < _g214.length) {
										var child3 = _g214[_g113];
										++_g113;
										var node12;
										var _g20 = child3.type;
										if(_g20 == null) {
											node12 = window.document.createElement(child3.name);
										} else {
											switch(_g20._hx_index) {
											case 0:
												node12 = isSvg1 || child3.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child3.name) : window.document.createElement(child3.name);
												break;
											case 1:
												node12 = window.document.createTextNode(child3.name);
												break;
											case 3:
												node12 = window.document.createDocumentFragment();
												break;
											default:
												node12 = window.document.createElement(child3.name);
											}
										}
										var _g114 = new haxe_iterators_DynamicAccessKeyValueIterator(child3.props);
										while(_g114.index < _g114.keys.length) {
											var key28 = _g114.keys[_g114.index++];
											var _g215 = { value : _g114.access[key28], key : key28};
											var key29 = _g215.key;
											var value6 = _g215.value;
											var key30 = key29;
											var oldValue10 = null;
											if(key29 != "key") {
												if(StringTools.startsWith(key29,"on")) {
													var event10 = HxOverrides.substr(key29,2,null).toLowerCase();
													if(oldValue10 != null) {
														node12.removeEventListener(event10,oldValue10);
													}
													if(value6 != null) {
														node12.addEventListener(event10,value6);
													}
												} else if(!isSvg1 && key29 != "list" && Reflect.getProperty(node12,key29) != null) {
													Reflect.setProperty(node12,key29,value6 == null ? "" : value6);
												} else if(value6 == null || value6 == false) {
													node12.removeAttribute(key29);
												} else {
													if(key29 == "className") {
														key30 = "class";
													}
													if(key30 == "htmlFor") {
														key30 = "for";
													}
													node12.setAttribute(key30,value6);
												}
											}
										}
										var _g115 = 0;
										var _g216 = child3.children;
										while(_g115 < _g216.length) {
											var child4 = _g216[_g115];
											++_g115;
											var node13;
											var _g30 = child4.type;
											if(_g30 == null) {
												node13 = window.document.createElement(child4.name);
											} else {
												switch(_g30._hx_index) {
												case 0:
													node13 = isSvg1 || child4.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child4.name) : window.document.createElement(child4.name);
													break;
												case 1:
													node13 = window.document.createTextNode(child4.name);
													break;
												case 3:
													node13 = window.document.createDocumentFragment();
													break;
												default:
													node13 = window.document.createElement(child4.name);
												}
											}
											var access11 = child4.props;
											var _g1_keys5 = Reflect.fields(access11);
											var _g1_index5 = 0;
											while(_g1_index5 < _g1_keys5.length) {
												var key31 = _g1_keys5[_g1_index5++];
												var _g217 = { value : access11[key31], key : key31};
												var key32 = _g217.key;
												var value7 = _g217.value;
												var key33 = key32;
												var oldValue11 = null;
												if(key32 != "key") {
													if(StringTools.startsWith(key32,"on")) {
														var event11 = HxOverrides.substr(key32,2,null).toLowerCase();
														if(oldValue11 != null) {
															node13.removeEventListener(event11,oldValue11);
														}
														if(value7 != null) {
															node13.addEventListener(event11,value7);
														}
													} else if(!isSvg1 && key32 != "list" && Reflect.getProperty(node13,key32) != null) {
														Reflect.setProperty(node13,key32,value7 == null ? "" : value7);
													} else if(value7 == null || value7 == false) {
														node13.removeAttribute(key32);
													} else {
														if(key32 == "className") {
															key33 = "class";
														}
														if(key33 == "htmlFor") {
															key33 = "for";
														}
														node13.setAttribute(key33,value7);
													}
												}
											}
											var _g116 = 0;
											var _g218 = child4.children;
											while(_g116 < _g218.length) node13.appendChild(pilot_Differ.createNode(_g218[_g116++],isSvg1));
											child4.node = node13;
											if(child4.hooks.attach != null && child4.node != null) {
												child4.hooks.attach(child4);
											}
											node12.appendChild(node13);
										}
										child3.node = node12;
										if(child3.hooks.attach != null && child3.node != null) {
											child3.hooks.attach(child3);
										}
										node11.appendChild(node12);
									}
									vnode7.node = node11;
									if(vnode7.hooks.attach != null && vnode7.node != null) {
										vnode7.hooks.attach(vnode7);
									}
									oldVChild1 = oldVChildren1[oldHead1];
									node5.insertBefore(node11,oldVChild1 != null ? oldVChild1.node : null);
								}
							} else if(newHead1 > newTail1) {
								while(oldHead1 <= oldTail1) {
									var vnode8 = oldVChildren1[oldHead1++];
									if(vnode8.hooks.detach != null) {
										vnode8.hooks.detach();
									}
									node5.removeChild(vnode8.node);
								}
							} else {
								var keyed = { };
								var newKeyed = { };
								var i = oldHead1;
								while(i <= oldTail1) {
									oldKey1 = oldVChildren1[i].key;
									if(oldKey1 != null) {
										keyed[oldKey1] = oldVChildren1[i];
									}
									++i;
								}
								while(newHead1 <= newTail1) {
									oldVChild1 = oldVChildren1[oldHead1];
									var vnode9 = oldVChild1;
									oldKey1 = vnode9 == null ? null : vnode9.key;
									var vnode10 = newVChildren1[newHead1];
									newKey1 = vnode10 == null ? null : vnode10.key;
									var node14;
									if(newKeyed[oldKey1] == null) {
										if(newKey1 != null) {
											var vnode11 = oldVChildren1[oldHead1 + 1];
											node14 = newKey1 == (vnode11 == null ? null : vnode11.key);
										} else {
											node14 = false;
										}
									} else {
										node14 = true;
									}
									if(node14) {
										if(oldKey1 == null) {
											if(oldVChild1.hooks.detach != null) {
												oldVChild1.hooks.detach();
											}
											node5.removeChild(oldVChild1.node);
										}
										++oldHead1;
										continue;
									}
									if(newKey1 == null || oldVNode1.type == pilot_VNodeType.VNodeRecycled) {
										if(oldKey1 == null) {
											pilot_Differ.patchNode(node5,oldVChild1 != null ? oldVChild1.node : null,oldVChild1,newVChildren1[newHead1],isSvg1);
											++newHead1;
										}
										++oldHead1;
									} else {
										if(oldKey1 == newKey1) {
											pilot_Differ.patchNode(node5,oldVChild1.node,oldVChild1,newVChildren1[newHead1],isSvg1);
											newKeyed[newKey1] = true;
											++oldHead1;
										} else {
											tmpVChild1 = keyed[newKey1];
											if(tmpVChild1 != null) {
												pilot_Differ.patchNode(node5,node5.insertBefore(tmpVChild1.node,oldVChild1 != null ? oldVChild1.node : null),tmpVChild1,newVChildren1[newHead1],isSvg1);
												newKeyed[newKey1] = true;
											} else {
												pilot_Differ.patchNode(node5,oldVChild1 != null ? oldVChild1.node : null,null,newVChildren1[newHead1],isSvg1);
											}
										}
										++newHead1;
									}
								}
								while(oldHead1 <= oldTail1) {
									oldVChild1 = oldVChildren1[oldHead1++];
									var vnode12 = oldVChild1;
									if((vnode12 == null ? null : vnode12.key) == null) {
										if(oldVChild1.hooks.detach != null) {
											oldVChild1.hooks.detach();
										}
										node5.removeChild(oldVChild1.node);
									}
								}
								var _g_keys6 = Reflect.fields(keyed);
								var _g_index6 = 0;
								while(_g_index6 < _g_keys6.length) {
									var key34 = _g_keys6[_g_index6++];
									var _g117 = { value : keyed[key34], key : key34};
									var vnode13 = _g117.value;
									if(newKeyed[_g117.key] == null) {
										if(vnode13.hooks.detach != null) {
											vnode13.hooks.detach();
										}
										node5.removeChild(vnode13.node);
									}
								}
							}
						}
					}
					newVNode.node = node5;
				}
				while(newHead <= newTail && oldHead <= oldTail) {
					var node15;
					var vnode14 = oldVChildren[oldTail];
					oldKey = vnode14 == null ? null : vnode14.key;
					if(oldKey != null) {
						var vnode15 = newVChildren[newTail];
						node15 = oldKey != (vnode15 == null ? null : vnode15.key);
					} else {
						node15 = true;
					}
					if(node15) {
						break;
					}
					var node16 = oldVChildren[oldTail].node;
					var oldVNode2 = oldVChildren[oldTail--];
					var newVNode1 = newVChildren[newTail--];
					var isSvg2 = isSvg;
					if(oldVNode2 != newVNode1) {
						if(oldVNode2 != null && oldVNode2.type == pilot_VNodeType.VNodeText && newVNode1.type == pilot_VNodeType.VNodeText) {
							if(oldVNode2.name != newVNode1.name) {
								node16.nodeValue = newVNode1.name;
							}
						} else if(oldVNode2 == null || oldVNode2.name != newVNode1.name) {
							var node17;
							var _g31 = newVNode1.type;
							if(_g31 == null) {
								node17 = window.document.createElement(newVNode1.name);
							} else {
								switch(_g31._hx_index) {
								case 0:
									node17 = isSvg2 || newVNode1.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",newVNode1.name) : window.document.createElement(newVNode1.name);
									break;
								case 1:
									node17 = window.document.createTextNode(newVNode1.name);
									break;
								case 3:
									node17 = window.document.createDocumentFragment();
									break;
								default:
									node17 = window.document.createElement(newVNode1.name);
								}
							}
							var access12 = newVNode1.props;
							var _g1_keys6 = Reflect.fields(access12);
							var _g1_index6 = 0;
							while(_g1_index6 < _g1_keys6.length) {
								var key35 = _g1_keys6[_g1_index6++];
								var _g219 = { value : access12[key35], key : key35};
								var key36 = _g219.key;
								var value8 = _g219.value;
								var key37 = key36;
								var oldValue12 = null;
								if(key36 != "key") {
									if(StringTools.startsWith(key36,"on")) {
										var event12 = HxOverrides.substr(key36,2,null).toLowerCase();
										if(oldValue12 != null) {
											node17.removeEventListener(event12,oldValue12);
										}
										if(value8 != null) {
											node17.addEventListener(event12,value8);
										}
									} else if(!isSvg2 && key36 != "list" && Reflect.getProperty(node17,key36) != null) {
										Reflect.setProperty(node17,key36,value8 == null ? "" : value8);
									} else if(value8 == null || value8 == false) {
										node17.removeAttribute(key36);
									} else {
										if(key36 == "className") {
											key37 = "class";
										}
										if(key37 == "htmlFor") {
											key37 = "for";
										}
										node17.setAttribute(key37,value8);
									}
								}
							}
							var _g118 = 0;
							var _g220 = newVNode1.children;
							while(_g118 < _g220.length) {
								var child5 = _g220[_g118];
								++_g118;
								var node18;
								var _g32 = child5.type;
								if(_g32 == null) {
									node18 = window.document.createElement(child5.name);
								} else {
									switch(_g32._hx_index) {
									case 0:
										node18 = isSvg2 || child5.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child5.name) : window.document.createElement(child5.name);
										break;
									case 1:
										node18 = window.document.createTextNode(child5.name);
										break;
									case 3:
										node18 = window.document.createDocumentFragment();
										break;
									default:
										node18 = window.document.createElement(child5.name);
									}
								}
								var _g119 = new haxe_iterators_DynamicAccessKeyValueIterator(child5.props);
								while(_g119.index < _g119.keys.length) {
									var key38 = _g119.keys[_g119.index++];
									var _g221 = { value : _g119.access[key38], key : key38};
									var key39 = _g221.key;
									var value9 = _g221.value;
									var key40 = key39;
									var oldValue13 = null;
									if(key39 != "key") {
										if(StringTools.startsWith(key39,"on")) {
											var event13 = HxOverrides.substr(key39,2,null).toLowerCase();
											if(oldValue13 != null) {
												node18.removeEventListener(event13,oldValue13);
											}
											if(value9 != null) {
												node18.addEventListener(event13,value9);
											}
										} else if(!isSvg2 && key39 != "list" && Reflect.getProperty(node18,key39) != null) {
											Reflect.setProperty(node18,key39,value9 == null ? "" : value9);
										} else if(value9 == null || value9 == false) {
											node18.removeAttribute(key39);
										} else {
											if(key39 == "className") {
												key40 = "class";
											}
											if(key40 == "htmlFor") {
												key40 = "for";
											}
											node18.setAttribute(key40,value9);
										}
									}
								}
								var _g120 = 0;
								var _g222 = child5.children;
								while(_g120 < _g222.length) {
									var child6 = _g222[_g120];
									++_g120;
									var node19;
									var _g33 = child6.type;
									if(_g33 == null) {
										node19 = window.document.createElement(child6.name);
									} else {
										switch(_g33._hx_index) {
										case 0:
											node19 = isSvg2 || child6.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child6.name) : window.document.createElement(child6.name);
											break;
										case 1:
											node19 = window.document.createTextNode(child6.name);
											break;
										case 3:
											node19 = window.document.createDocumentFragment();
											break;
										default:
											node19 = window.document.createElement(child6.name);
										}
									}
									var access13 = child6.props;
									var _g1_keys7 = Reflect.fields(access13);
									var _g1_index7 = 0;
									while(_g1_index7 < _g1_keys7.length) {
										var key41 = _g1_keys7[_g1_index7++];
										var _g223 = { value : access13[key41], key : key41};
										var key42 = _g223.key;
										var value10 = _g223.value;
										var key43 = key42;
										var oldValue14 = null;
										if(key42 != "key") {
											if(StringTools.startsWith(key42,"on")) {
												var event14 = HxOverrides.substr(key42,2,null).toLowerCase();
												if(oldValue14 != null) {
													node19.removeEventListener(event14,oldValue14);
												}
												if(value10 != null) {
													node19.addEventListener(event14,value10);
												}
											} else if(!isSvg2 && key42 != "list" && Reflect.getProperty(node19,key42) != null) {
												Reflect.setProperty(node19,key42,value10 == null ? "" : value10);
											} else if(value10 == null || value10 == false) {
												node19.removeAttribute(key42);
											} else {
												if(key42 == "className") {
													key43 = "class";
												}
												if(key43 == "htmlFor") {
													key43 = "for";
												}
												node19.setAttribute(key43,value10);
											}
										}
									}
									var _g121 = 0;
									var _g224 = child6.children;
									while(_g121 < _g224.length) node19.appendChild(pilot_Differ.createNode(_g224[_g121++],isSvg2));
									child6.node = node19;
									if(child6.hooks.attach != null && child6.node != null) {
										child6.hooks.attach(child6);
									}
									node18.appendChild(node19);
								}
								child5.node = node18;
								if(child5.hooks.attach != null && child5.node != null) {
									child5.hooks.attach(child5);
								}
								node17.appendChild(node18);
							}
							newVNode1.node = node17;
							if(newVNode1.hooks.attach != null && newVNode1.node != null) {
								newVNode1.hooks.attach(newVNode1);
							}
							node16 = node1.insertBefore(node17,node16);
							if(oldVNode2 != null && oldVNode2.node != null) {
								if(oldVNode2.hooks.detach != null) {
									oldVNode2.hooks.detach();
								}
								node1.removeChild(oldVNode2.node);
							}
						} else {
							var tmpVChild2;
							var oldVChild2;
							var oldKey2;
							var newKey2;
							var oldVProps2 = oldVNode2.props;
							var newVProps2 = newVNode1.props;
							var oldVChildren2 = oldVNode2.children;
							var newVChildren2 = newVNode1.children;
							var oldHead2 = 0;
							var newHead2 = 0;
							var oldTail2 = oldVChildren2.length - 1;
							var newTail2 = newVChildren2.length - 1;
							isSvg2 = isSvg2 || newVNode1.name == "svg";
							var out2 = { };
							var access14 = oldVProps2;
							var _g_keys7 = Reflect.fields(access14);
							var _g_index7 = 0;
							while(_g_index7 < _g_keys7.length) {
								var key44 = _g_keys7[_g_index7++];
								var _g122 = { value : access14[key44], key : key44};
								out2[_g122.key] = _g122.value;
							}
							var access15 = newVProps2;
							var _g_keys8 = Reflect.fields(access15);
							var _g_index8 = 0;
							while(_g_index8 < _g_keys8.length) {
								var key45 = _g_keys8[_g_index8++];
								var _g123 = { value : access15[key45], key : key45};
								out2[_g123.key] = _g123.value;
							}
							var access16 = out2;
							var _g_keys9 = Reflect.fields(access16);
							var _g_index9 = 0;
							while(_g_index9 < _g_keys9.length) {
								var key46 = _g_keys9[_g_index9++];
								var k2 = ({ value : access16[key46], key : key46}).key;
								switch(k2) {
								case "checked":case "selected":case "value":
									if(Reflect.field(node16,k2) != Reflect.field(newVProps2,k2)) {
										var key47 = k2;
										var oldValue15 = Reflect.field(oldVProps2,k2);
										var newValue4 = Reflect.field(newVProps2,k2);
										if(k2 != "key") {
											if(StringTools.startsWith(k2,"on")) {
												var event15 = HxOverrides.substr(k2,2,null).toLowerCase();
												if(oldValue15 != null) {
													node16.removeEventListener(event15,oldValue15);
												}
												if(newValue4 != null) {
													node16.addEventListener(event15,newValue4);
												}
											} else if(!isSvg2 && k2 != "list" && Reflect.getProperty(node16,k2) != null) {
												Reflect.setProperty(node16,k2,newValue4 == null ? "" : newValue4);
											} else if(newValue4 == null || newValue4 == false) {
												node16.removeAttribute(k2);
											} else {
												if(k2 == "className") {
													key47 = "class";
												}
												if(key47 == "htmlFor") {
													key47 = "for";
												}
												node16.setAttribute(key47,newValue4);
											}
										}
									}
									break;
								default:
									if(Reflect.field(oldVProps2,k2) != Reflect.field(newVProps2,k2)) {
										var key48 = k2;
										var oldValue16 = Reflect.field(oldVProps2,k2);
										var newValue5 = Reflect.field(newVProps2,k2);
										if(k2 != "key") {
											if(StringTools.startsWith(k2,"on")) {
												var event16 = HxOverrides.substr(k2,2,null).toLowerCase();
												if(oldValue16 != null) {
													node16.removeEventListener(event16,oldValue16);
												}
												if(newValue5 != null) {
													node16.addEventListener(event16,newValue5);
												}
											} else if(!isSvg2 && k2 != "list" && Reflect.getProperty(node16,k2) != null) {
												Reflect.setProperty(node16,k2,newValue5 == null ? "" : newValue5);
											} else if(newValue5 == null || newValue5 == false) {
												node16.removeAttribute(k2);
											} else {
												if(k2 == "className") {
													key48 = "class";
												}
												if(key48 == "htmlFor") {
													key48 = "for";
												}
												node16.setAttribute(key48,newValue5);
											}
										}
									}
								}
							}
							while(newHead2 <= newTail2 && oldHead2 <= oldTail2) {
								var node20;
								var vnode16 = oldVChildren2[oldHead2];
								oldKey2 = vnode16 == null ? null : vnode16.key;
								if(oldKey2 != null) {
									var vnode17 = newVChildren2[newHead2];
									node20 = oldKey2 != (vnode17 == null ? null : vnode17.key);
								} else {
									node20 = true;
								}
								if(node20) {
									break;
								}
								pilot_Differ.patchNode(node16,oldVChildren2[oldHead2++].node,oldVChildren2[oldHead2 - 1],newVChildren2[newHead2++],isSvg2);
							}
							while(newHead2 <= newTail2 && oldHead2 <= oldTail2) {
								var node21;
								var vnode18 = oldVChildren2[oldTail2];
								oldKey2 = vnode18 == null ? null : vnode18.key;
								if(oldKey2 != null) {
									var vnode19 = newVChildren2[newTail2];
									node21 = oldKey2 != (vnode19 == null ? null : vnode19.key);
								} else {
									node21 = true;
								}
								if(node21) {
									break;
								}
								pilot_Differ.patchNode(node16,oldVChildren2[oldTail2--].node,oldVChildren2[oldTail2 + 1],newVChildren2[newTail2--],isSvg2);
							}
							if(oldHead2 > oldTail2) {
								while(newHead2 <= newTail2) {
									var vnode20 = newVChildren2[newHead2++];
									var node22;
									var _g34 = vnode20.type;
									if(_g34 == null) {
										node22 = window.document.createElement(vnode20.name);
									} else {
										switch(_g34._hx_index) {
										case 0:
											node22 = isSvg2 || vnode20.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",vnode20.name) : window.document.createElement(vnode20.name);
											break;
										case 1:
											node22 = window.document.createTextNode(vnode20.name);
											break;
										case 3:
											node22 = window.document.createDocumentFragment();
											break;
										default:
											node22 = window.document.createElement(vnode20.name);
										}
									}
									var access17 = vnode20.props;
									var _g1_keys8 = Reflect.fields(access17);
									var _g1_index8 = 0;
									while(_g1_index8 < _g1_keys8.length) {
										var key49 = _g1_keys8[_g1_index8++];
										var _g225 = { value : access17[key49], key : key49};
										var key50 = _g225.key;
										var value11 = _g225.value;
										var key51 = key50;
										var oldValue17 = null;
										if(key50 != "key") {
											if(StringTools.startsWith(key50,"on")) {
												var event17 = HxOverrides.substr(key50,2,null).toLowerCase();
												if(oldValue17 != null) {
													node22.removeEventListener(event17,oldValue17);
												}
												if(value11 != null) {
													node22.addEventListener(event17,value11);
												}
											} else if(!isSvg2 && key50 != "list" && Reflect.getProperty(node22,key50) != null) {
												Reflect.setProperty(node22,key50,value11 == null ? "" : value11);
											} else if(value11 == null || value11 == false) {
												node22.removeAttribute(key50);
											} else {
												if(key50 == "className") {
													key51 = "class";
												}
												if(key51 == "htmlFor") {
													key51 = "for";
												}
												node22.setAttribute(key51,value11);
											}
										}
									}
									var _g124 = 0;
									var _g226 = vnode20.children;
									while(_g124 < _g226.length) {
										var child7 = _g226[_g124];
										++_g124;
										var node23;
										var _g35 = child7.type;
										if(_g35 == null) {
											node23 = window.document.createElement(child7.name);
										} else {
											switch(_g35._hx_index) {
											case 0:
												node23 = isSvg2 || child7.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child7.name) : window.document.createElement(child7.name);
												break;
											case 1:
												node23 = window.document.createTextNode(child7.name);
												break;
											case 3:
												node23 = window.document.createDocumentFragment();
												break;
											default:
												node23 = window.document.createElement(child7.name);
											}
										}
										var _g125 = new haxe_iterators_DynamicAccessKeyValueIterator(child7.props);
										while(_g125.index < _g125.keys.length) {
											var key52 = _g125.keys[_g125.index++];
											var _g227 = { value : _g125.access[key52], key : key52};
											var key53 = _g227.key;
											var value12 = _g227.value;
											var key54 = key53;
											var oldValue18 = null;
											if(key53 != "key") {
												if(StringTools.startsWith(key53,"on")) {
													var event18 = HxOverrides.substr(key53,2,null).toLowerCase();
													if(oldValue18 != null) {
														node23.removeEventListener(event18,oldValue18);
													}
													if(value12 != null) {
														node23.addEventListener(event18,value12);
													}
												} else if(!isSvg2 && key53 != "list" && Reflect.getProperty(node23,key53) != null) {
													Reflect.setProperty(node23,key53,value12 == null ? "" : value12);
												} else if(value12 == null || value12 == false) {
													node23.removeAttribute(key53);
												} else {
													if(key53 == "className") {
														key54 = "class";
													}
													if(key54 == "htmlFor") {
														key54 = "for";
													}
													node23.setAttribute(key54,value12);
												}
											}
										}
										var _g126 = 0;
										var _g228 = child7.children;
										while(_g126 < _g228.length) {
											var child8 = _g228[_g126];
											++_g126;
											var node24;
											var _g36 = child8.type;
											if(_g36 == null) {
												node24 = window.document.createElement(child8.name);
											} else {
												switch(_g36._hx_index) {
												case 0:
													node24 = isSvg2 || child8.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child8.name) : window.document.createElement(child8.name);
													break;
												case 1:
													node24 = window.document.createTextNode(child8.name);
													break;
												case 3:
													node24 = window.document.createDocumentFragment();
													break;
												default:
													node24 = window.document.createElement(child8.name);
												}
											}
											var access18 = child8.props;
											var _g1_keys9 = Reflect.fields(access18);
											var _g1_index9 = 0;
											while(_g1_index9 < _g1_keys9.length) {
												var key55 = _g1_keys9[_g1_index9++];
												var _g229 = { value : access18[key55], key : key55};
												var key56 = _g229.key;
												var value13 = _g229.value;
												var key57 = key56;
												var oldValue19 = null;
												if(key56 != "key") {
													if(StringTools.startsWith(key56,"on")) {
														var event19 = HxOverrides.substr(key56,2,null).toLowerCase();
														if(oldValue19 != null) {
															node24.removeEventListener(event19,oldValue19);
														}
														if(value13 != null) {
															node24.addEventListener(event19,value13);
														}
													} else if(!isSvg2 && key56 != "list" && Reflect.getProperty(node24,key56) != null) {
														Reflect.setProperty(node24,key56,value13 == null ? "" : value13);
													} else if(value13 == null || value13 == false) {
														node24.removeAttribute(key56);
													} else {
														if(key56 == "className") {
															key57 = "class";
														}
														if(key57 == "htmlFor") {
															key57 = "for";
														}
														node24.setAttribute(key57,value13);
													}
												}
											}
											var _g127 = 0;
											var _g230 = child8.children;
											while(_g127 < _g230.length) node24.appendChild(pilot_Differ.createNode(_g230[_g127++],isSvg2));
											child8.node = node24;
											if(child8.hooks.attach != null && child8.node != null) {
												child8.hooks.attach(child8);
											}
											node23.appendChild(node24);
										}
										child7.node = node23;
										if(child7.hooks.attach != null && child7.node != null) {
											child7.hooks.attach(child7);
										}
										node22.appendChild(node23);
									}
									vnode20.node = node22;
									if(vnode20.hooks.attach != null && vnode20.node != null) {
										vnode20.hooks.attach(vnode20);
									}
									oldVChild2 = oldVChildren2[oldHead2];
									node16.insertBefore(node22,oldVChild2 != null ? oldVChild2.node : null);
								}
							} else if(newHead2 > newTail2) {
								while(oldHead2 <= oldTail2) {
									var vnode21 = oldVChildren2[oldHead2++];
									if(vnode21.hooks.detach != null) {
										vnode21.hooks.detach();
									}
									node16.removeChild(vnode21.node);
								}
							} else {
								var keyed1 = { };
								var newKeyed1 = { };
								var i1 = oldHead2;
								while(i1 <= oldTail2) {
									oldKey2 = oldVChildren2[i1].key;
									if(oldKey2 != null) {
										keyed1[oldKey2] = oldVChildren2[i1];
									}
									++i1;
								}
								while(newHead2 <= newTail2) {
									oldVChild2 = oldVChildren2[oldHead2];
									var vnode22 = oldVChild2;
									oldKey2 = vnode22 == null ? null : vnode22.key;
									var vnode23 = newVChildren2[newHead2];
									newKey2 = vnode23 == null ? null : vnode23.key;
									var node25;
									if(newKeyed1[oldKey2] == null) {
										if(newKey2 != null) {
											var vnode24 = oldVChildren2[oldHead2 + 1];
											node25 = newKey2 == (vnode24 == null ? null : vnode24.key);
										} else {
											node25 = false;
										}
									} else {
										node25 = true;
									}
									if(node25) {
										if(oldKey2 == null) {
											if(oldVChild2.hooks.detach != null) {
												oldVChild2.hooks.detach();
											}
											node16.removeChild(oldVChild2.node);
										}
										++oldHead2;
										continue;
									}
									if(newKey2 == null || oldVNode2.type == pilot_VNodeType.VNodeRecycled) {
										if(oldKey2 == null) {
											pilot_Differ.patchNode(node16,oldVChild2 != null ? oldVChild2.node : null,oldVChild2,newVChildren2[newHead2],isSvg2);
											++newHead2;
										}
										++oldHead2;
									} else {
										if(oldKey2 == newKey2) {
											pilot_Differ.patchNode(node16,oldVChild2.node,oldVChild2,newVChildren2[newHead2],isSvg2);
											newKeyed1[newKey2] = true;
											++oldHead2;
										} else {
											tmpVChild2 = keyed1[newKey2];
											if(tmpVChild2 != null) {
												pilot_Differ.patchNode(node16,node16.insertBefore(tmpVChild2.node,oldVChild2 != null ? oldVChild2.node : null),tmpVChild2,newVChildren2[newHead2],isSvg2);
												newKeyed1[newKey2] = true;
											} else {
												pilot_Differ.patchNode(node16,oldVChild2 != null ? oldVChild2.node : null,null,newVChildren2[newHead2],isSvg2);
											}
										}
										++newHead2;
									}
								}
								while(oldHead2 <= oldTail2) {
									oldVChild2 = oldVChildren2[oldHead2++];
									var vnode25 = oldVChild2;
									if((vnode25 == null ? null : vnode25.key) == null) {
										if(oldVChild2.hooks.detach != null) {
											oldVChild2.hooks.detach();
										}
										node16.removeChild(oldVChild2.node);
									}
								}
								var _g_keys10 = Reflect.fields(keyed1);
								var _g_index10 = 0;
								while(_g_index10 < _g_keys10.length) {
									var key58 = _g_keys10[_g_index10++];
									var _g128 = { value : keyed1[key58], key : key58};
									var vnode26 = _g128.value;
									if(newKeyed1[_g128.key] == null) {
										if(vnode26.hooks.detach != null) {
											vnode26.hooks.detach();
										}
										node16.removeChild(vnode26.node);
									}
								}
							}
						}
					}
					newVNode1.node = node16;
				}
				if(oldHead > oldTail) {
					while(newHead <= newTail) {
						var vnode27 = newVChildren[newHead++];
						var node26;
						var _g37 = vnode27.type;
						if(_g37 == null) {
							node26 = window.document.createElement(vnode27.name);
						} else {
							switch(_g37._hx_index) {
							case 0:
								node26 = isSvg || vnode27.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",vnode27.name) : window.document.createElement(vnode27.name);
								break;
							case 1:
								node26 = window.document.createTextNode(vnode27.name);
								break;
							case 3:
								node26 = window.document.createDocumentFragment();
								break;
							default:
								node26 = window.document.createElement(vnode27.name);
							}
						}
						var access19 = vnode27.props;
						var _g1_keys10 = Reflect.fields(access19);
						var _g1_index10 = 0;
						while(_g1_index10 < _g1_keys10.length) {
							var key59 = _g1_keys10[_g1_index10++];
							var _g231 = { value : access19[key59], key : key59};
							var key60 = _g231.key;
							var value14 = _g231.value;
							var key61 = key60;
							var oldValue20 = null;
							if(key60 != "key") {
								if(StringTools.startsWith(key60,"on")) {
									var event20 = HxOverrides.substr(key60,2,null).toLowerCase();
									if(oldValue20 != null) {
										node26.removeEventListener(event20,oldValue20);
									}
									if(value14 != null) {
										node26.addEventListener(event20,value14);
									}
								} else if(!isSvg && key60 != "list" && Reflect.getProperty(node26,key60) != null) {
									Reflect.setProperty(node26,key60,value14 == null ? "" : value14);
								} else if(value14 == null || value14 == false) {
									node26.removeAttribute(key60);
								} else {
									if(key60 == "className") {
										key61 = "class";
									}
									if(key61 == "htmlFor") {
										key61 = "for";
									}
									node26.setAttribute(key61,value14);
								}
							}
						}
						var _g129 = 0;
						var _g232 = vnode27.children;
						while(_g129 < _g232.length) {
							var child9 = _g232[_g129];
							++_g129;
							var node27;
							var _g38 = child9.type;
							if(_g38 == null) {
								node27 = window.document.createElement(child9.name);
							} else {
								switch(_g38._hx_index) {
								case 0:
									node27 = isSvg || child9.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child9.name) : window.document.createElement(child9.name);
									break;
								case 1:
									node27 = window.document.createTextNode(child9.name);
									break;
								case 3:
									node27 = window.document.createDocumentFragment();
									break;
								default:
									node27 = window.document.createElement(child9.name);
								}
							}
							var access20 = child9.props;
							var _g1_keys11 = Reflect.fields(access20);
							var _g1_index11 = 0;
							while(_g1_index11 < _g1_keys11.length) {
								var key62 = _g1_keys11[_g1_index11++];
								var _g233 = { value : access20[key62], key : key62};
								var key63 = _g233.key;
								var value15 = _g233.value;
								var key64 = key63;
								var oldValue21 = null;
								if(key63 != "key") {
									if(StringTools.startsWith(key63,"on")) {
										var event21 = HxOverrides.substr(key63,2,null).toLowerCase();
										if(oldValue21 != null) {
											node27.removeEventListener(event21,oldValue21);
										}
										if(value15 != null) {
											node27.addEventListener(event21,value15);
										}
									} else if(!isSvg && key63 != "list" && Reflect.getProperty(node27,key63) != null) {
										Reflect.setProperty(node27,key63,value15 == null ? "" : value15);
									} else if(value15 == null || value15 == false) {
										node27.removeAttribute(key63);
									} else {
										if(key63 == "className") {
											key64 = "class";
										}
										if(key64 == "htmlFor") {
											key64 = "for";
										}
										node27.setAttribute(key64,value15);
									}
								}
							}
							var _g130 = 0;
							var _g234 = child9.children;
							while(_g130 < _g234.length) node27.appendChild(pilot_Differ.createNode(_g234[_g130++],isSvg));
							child9.node = node27;
							if(child9.hooks.attach != null && child9.node != null) {
								child9.hooks.attach(child9);
							}
							node26.appendChild(node27);
						}
						vnode27.node = node26;
						if(vnode27.hooks.attach != null && vnode27.node != null) {
							vnode27.hooks.attach(vnode27);
						}
						oldVChild = oldVChildren[oldHead];
						node1.insertBefore(node26,oldVChild != null ? oldVChild.node : null);
					}
				} else if(newHead > newTail) {
					while(oldHead <= oldTail) {
						var vnode28 = oldVChildren[oldHead++];
						if(vnode28.hooks.detach != null) {
							vnode28.hooks.detach();
						}
						node1.removeChild(vnode28.node);
					}
				} else {
					var keyed2 = { };
					var newKeyed2 = { };
					var i2 = oldHead;
					while(i2 <= oldTail) {
						oldKey = oldVChildren[i2].key;
						if(oldKey != null) {
							keyed2[oldKey] = oldVChildren[i2];
						}
						++i2;
					}
					while(newHead <= newTail) {
						oldVChild = oldVChildren[oldHead];
						var vnode29 = oldVChild;
						oldKey = vnode29 == null ? null : vnode29.key;
						var vnode30 = newVChildren[newHead];
						newKey = vnode30 == null ? null : vnode30.key;
						var node28;
						if(newKeyed2[oldKey] == null) {
							if(newKey != null) {
								var vnode31 = oldVChildren[oldHead + 1];
								node28 = newKey == (vnode31 == null ? null : vnode31.key);
							} else {
								node28 = false;
							}
						} else {
							node28 = true;
						}
						if(node28) {
							if(oldKey == null) {
								if(oldVChild.hooks.detach != null) {
									oldVChild.hooks.detach();
								}
								node1.removeChild(oldVChild.node);
							}
							++oldHead;
							continue;
						}
						if(newKey == null || oldVNode.type == pilot_VNodeType.VNodeRecycled) {
							if(oldKey == null) {
								var node29 = oldVChild != null ? oldVChild.node : null;
								var newVNode2 = newVChildren[newHead];
								var isSvg3 = isSvg;
								if(oldVChild != newVNode2) {
									if(oldVChild != null && oldVChild.type == pilot_VNodeType.VNodeText && newVNode2.type == pilot_VNodeType.VNodeText) {
										if(oldVChild.name != newVNode2.name) {
											node29.nodeValue = newVNode2.name;
										}
									} else if(oldVChild == null || oldVChild.name != newVNode2.name) {
										var node30;
										var _g39 = newVNode2.type;
										if(_g39 == null) {
											node30 = window.document.createElement(newVNode2.name);
										} else {
											switch(_g39._hx_index) {
											case 0:
												node30 = isSvg3 || newVNode2.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",newVNode2.name) : window.document.createElement(newVNode2.name);
												break;
											case 1:
												node30 = window.document.createTextNode(newVNode2.name);
												break;
											case 3:
												node30 = window.document.createDocumentFragment();
												break;
											default:
												node30 = window.document.createElement(newVNode2.name);
											}
										}
										var access21 = newVNode2.props;
										var _g1_keys12 = Reflect.fields(access21);
										var _g1_index12 = 0;
										while(_g1_index12 < _g1_keys12.length) {
											var key65 = _g1_keys12[_g1_index12++];
											var _g235 = { value : access21[key65], key : key65};
											var key66 = _g235.key;
											var value16 = _g235.value;
											var key67 = key66;
											var oldValue22 = null;
											if(key66 != "key") {
												if(StringTools.startsWith(key66,"on")) {
													var event22 = HxOverrides.substr(key66,2,null).toLowerCase();
													if(oldValue22 != null) {
														node30.removeEventListener(event22,oldValue22);
													}
													if(value16 != null) {
														node30.addEventListener(event22,value16);
													}
												} else if(!isSvg3 && key66 != "list" && Reflect.getProperty(node30,key66) != null) {
													Reflect.setProperty(node30,key66,value16 == null ? "" : value16);
												} else if(value16 == null || value16 == false) {
													node30.removeAttribute(key66);
												} else {
													if(key66 == "className") {
														key67 = "class";
													}
													if(key67 == "htmlFor") {
														key67 = "for";
													}
													node30.setAttribute(key67,value16);
												}
											}
										}
										var _g131 = 0;
										var _g236 = newVNode2.children;
										while(_g131 < _g236.length) {
											var child10 = _g236[_g131];
											++_g131;
											var node31;
											var _g40 = child10.type;
											if(_g40 == null) {
												node31 = window.document.createElement(child10.name);
											} else {
												switch(_g40._hx_index) {
												case 0:
													node31 = isSvg3 || child10.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child10.name) : window.document.createElement(child10.name);
													break;
												case 1:
													node31 = window.document.createTextNode(child10.name);
													break;
												case 3:
													node31 = window.document.createDocumentFragment();
													break;
												default:
													node31 = window.document.createElement(child10.name);
												}
											}
											var _g132 = new haxe_iterators_DynamicAccessKeyValueIterator(child10.props);
											while(_g132.index < _g132.keys.length) {
												var key68 = _g132.keys[_g132.index++];
												var _g237 = { value : _g132.access[key68], key : key68};
												var key69 = _g237.key;
												var value17 = _g237.value;
												var key70 = key69;
												var oldValue23 = null;
												if(key69 != "key") {
													if(StringTools.startsWith(key69,"on")) {
														var event23 = HxOverrides.substr(key69,2,null).toLowerCase();
														if(oldValue23 != null) {
															node31.removeEventListener(event23,oldValue23);
														}
														if(value17 != null) {
															node31.addEventListener(event23,value17);
														}
													} else if(!isSvg3 && key69 != "list" && Reflect.getProperty(node31,key69) != null) {
														Reflect.setProperty(node31,key69,value17 == null ? "" : value17);
													} else if(value17 == null || value17 == false) {
														node31.removeAttribute(key69);
													} else {
														if(key69 == "className") {
															key70 = "class";
														}
														if(key70 == "htmlFor") {
															key70 = "for";
														}
														node31.setAttribute(key70,value17);
													}
												}
											}
											var _g133 = 0;
											var _g238 = child10.children;
											while(_g133 < _g238.length) {
												var child11 = _g238[_g133];
												++_g133;
												var node32;
												var _g41 = child11.type;
												if(_g41 == null) {
													node32 = window.document.createElement(child11.name);
												} else {
													switch(_g41._hx_index) {
													case 0:
														node32 = isSvg3 || child11.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child11.name) : window.document.createElement(child11.name);
														break;
													case 1:
														node32 = window.document.createTextNode(child11.name);
														break;
													case 3:
														node32 = window.document.createDocumentFragment();
														break;
													default:
														node32 = window.document.createElement(child11.name);
													}
												}
												var access22 = child11.props;
												var _g1_keys13 = Reflect.fields(access22);
												var _g1_index13 = 0;
												while(_g1_index13 < _g1_keys13.length) {
													var key71 = _g1_keys13[_g1_index13++];
													var _g239 = { value : access22[key71], key : key71};
													var key72 = _g239.key;
													var value18 = _g239.value;
													var key73 = key72;
													var oldValue24 = null;
													if(key72 != "key") {
														if(StringTools.startsWith(key72,"on")) {
															var event24 = HxOverrides.substr(key72,2,null).toLowerCase();
															if(oldValue24 != null) {
																node32.removeEventListener(event24,oldValue24);
															}
															if(value18 != null) {
																node32.addEventListener(event24,value18);
															}
														} else if(!isSvg3 && key72 != "list" && Reflect.getProperty(node32,key72) != null) {
															Reflect.setProperty(node32,key72,value18 == null ? "" : value18);
														} else if(value18 == null || value18 == false) {
															node32.removeAttribute(key72);
														} else {
															if(key72 == "className") {
																key73 = "class";
															}
															if(key73 == "htmlFor") {
																key73 = "for";
															}
															node32.setAttribute(key73,value18);
														}
													}
												}
												var _g134 = 0;
												var _g240 = child11.children;
												while(_g134 < _g240.length) node32.appendChild(pilot_Differ.createNode(_g240[_g134++],isSvg3));
												child11.node = node32;
												if(child11.hooks.attach != null && child11.node != null) {
													child11.hooks.attach(child11);
												}
												node31.appendChild(node32);
											}
											child10.node = node31;
											if(child10.hooks.attach != null && child10.node != null) {
												child10.hooks.attach(child10);
											}
											node30.appendChild(node31);
										}
										newVNode2.node = node30;
										if(newVNode2.hooks.attach != null && newVNode2.node != null) {
											newVNode2.hooks.attach(newVNode2);
										}
										node29 = node1.insertBefore(node30,node29);
										if(oldVChild != null && oldVChild.node != null) {
											if(oldVChild.hooks.detach != null) {
												oldVChild.hooks.detach();
											}
											node1.removeChild(oldVChild.node);
										}
									} else {
										var tmpVChild3;
										var oldVChild3;
										var oldKey3;
										var newKey3;
										var oldVProps3 = oldVChild.props;
										var newVProps3 = newVNode2.props;
										var oldVChildren3 = oldVChild.children;
										var newVChildren3 = newVNode2.children;
										var oldHead3 = 0;
										var newHead3 = 0;
										var oldTail3 = oldVChildren3.length - 1;
										var newTail3 = newVChildren3.length - 1;
										isSvg3 = isSvg3 || newVNode2.name == "svg";
										var out3 = { };
										var access23 = oldVProps3;
										var _g_keys11 = Reflect.fields(access23);
										var _g_index11 = 0;
										while(_g_index11 < _g_keys11.length) {
											var key74 = _g_keys11[_g_index11++];
											var _g135 = { value : access23[key74], key : key74};
											out3[_g135.key] = _g135.value;
										}
										var access24 = newVProps3;
										var _g_keys12 = Reflect.fields(access24);
										var _g_index12 = 0;
										while(_g_index12 < _g_keys12.length) {
											var key75 = _g_keys12[_g_index12++];
											var _g136 = { value : access24[key75], key : key75};
											out3[_g136.key] = _g136.value;
										}
										var access25 = out3;
										var _g_keys13 = Reflect.fields(access25);
										var _g_index13 = 0;
										while(_g_index13 < _g_keys13.length) {
											var key76 = _g_keys13[_g_index13++];
											var k3 = ({ value : access25[key76], key : key76}).key;
											switch(k3) {
											case "checked":case "selected":case "value":
												if(Reflect.field(node29,k3) != Reflect.field(newVProps3,k3)) {
													var key77 = k3;
													var oldValue25 = Reflect.field(oldVProps3,k3);
													var newValue6 = Reflect.field(newVProps3,k3);
													if(k3 != "key") {
														if(StringTools.startsWith(k3,"on")) {
															var event25 = HxOverrides.substr(k3,2,null).toLowerCase();
															if(oldValue25 != null) {
																node29.removeEventListener(event25,oldValue25);
															}
															if(newValue6 != null) {
																node29.addEventListener(event25,newValue6);
															}
														} else if(!isSvg3 && k3 != "list" && Reflect.getProperty(node29,k3) != null) {
															Reflect.setProperty(node29,k3,newValue6 == null ? "" : newValue6);
														} else if(newValue6 == null || newValue6 == false) {
															node29.removeAttribute(k3);
														} else {
															if(k3 == "className") {
																key77 = "class";
															}
															if(key77 == "htmlFor") {
																key77 = "for";
															}
															node29.setAttribute(key77,newValue6);
														}
													}
												}
												break;
											default:
												if(Reflect.field(oldVProps3,k3) != Reflect.field(newVProps3,k3)) {
													var key78 = k3;
													var oldValue26 = Reflect.field(oldVProps3,k3);
													var newValue7 = Reflect.field(newVProps3,k3);
													if(k3 != "key") {
														if(StringTools.startsWith(k3,"on")) {
															var event26 = HxOverrides.substr(k3,2,null).toLowerCase();
															if(oldValue26 != null) {
																node29.removeEventListener(event26,oldValue26);
															}
															if(newValue7 != null) {
																node29.addEventListener(event26,newValue7);
															}
														} else if(!isSvg3 && k3 != "list" && Reflect.getProperty(node29,k3) != null) {
															Reflect.setProperty(node29,k3,newValue7 == null ? "" : newValue7);
														} else if(newValue7 == null || newValue7 == false) {
															node29.removeAttribute(k3);
														} else {
															if(k3 == "className") {
																key78 = "class";
															}
															if(key78 == "htmlFor") {
																key78 = "for";
															}
															node29.setAttribute(key78,newValue7);
														}
													}
												}
											}
										}
										while(newHead3 <= newTail3 && oldHead3 <= oldTail3) {
											var node33;
											var vnode32 = oldVChildren3[oldHead3];
											oldKey3 = vnode32 == null ? null : vnode32.key;
											if(oldKey3 != null) {
												var vnode33 = newVChildren3[newHead3];
												node33 = oldKey3 != (vnode33 == null ? null : vnode33.key);
											} else {
												node33 = true;
											}
											if(node33) {
												break;
											}
											pilot_Differ.patchNode(node29,oldVChildren3[oldHead3++].node,oldVChildren3[oldHead3 - 1],newVChildren3[newHead3++],isSvg3);
										}
										while(newHead3 <= newTail3 && oldHead3 <= oldTail3) {
											var node34;
											var vnode34 = oldVChildren3[oldTail3];
											oldKey3 = vnode34 == null ? null : vnode34.key;
											if(oldKey3 != null) {
												var vnode35 = newVChildren3[newTail3];
												node34 = oldKey3 != (vnode35 == null ? null : vnode35.key);
											} else {
												node34 = true;
											}
											if(node34) {
												break;
											}
											pilot_Differ.patchNode(node29,oldVChildren3[oldTail3--].node,oldVChildren3[oldTail3 + 1],newVChildren3[newTail3--],isSvg3);
										}
										if(oldHead3 > oldTail3) {
											while(newHead3 <= newTail3) {
												var vnode36 = newVChildren3[newHead3++];
												var node35;
												var _g42 = vnode36.type;
												if(_g42 == null) {
													node35 = window.document.createElement(vnode36.name);
												} else {
													switch(_g42._hx_index) {
													case 0:
														node35 = isSvg3 || vnode36.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",vnode36.name) : window.document.createElement(vnode36.name);
														break;
													case 1:
														node35 = window.document.createTextNode(vnode36.name);
														break;
													case 3:
														node35 = window.document.createDocumentFragment();
														break;
													default:
														node35 = window.document.createElement(vnode36.name);
													}
												}
												var access26 = vnode36.props;
												var _g1_keys14 = Reflect.fields(access26);
												var _g1_index14 = 0;
												while(_g1_index14 < _g1_keys14.length) {
													var key79 = _g1_keys14[_g1_index14++];
													var _g241 = { value : access26[key79], key : key79};
													var key80 = _g241.key;
													var value19 = _g241.value;
													var key81 = key80;
													var oldValue27 = null;
													if(key80 != "key") {
														if(StringTools.startsWith(key80,"on")) {
															var event27 = HxOverrides.substr(key80,2,null).toLowerCase();
															if(oldValue27 != null) {
																node35.removeEventListener(event27,oldValue27);
															}
															if(value19 != null) {
																node35.addEventListener(event27,value19);
															}
														} else if(!isSvg3 && key80 != "list" && Reflect.getProperty(node35,key80) != null) {
															Reflect.setProperty(node35,key80,value19 == null ? "" : value19);
														} else if(value19 == null || value19 == false) {
															node35.removeAttribute(key80);
														} else {
															if(key80 == "className") {
																key81 = "class";
															}
															if(key81 == "htmlFor") {
																key81 = "for";
															}
															node35.setAttribute(key81,value19);
														}
													}
												}
												var _g137 = 0;
												var _g242 = vnode36.children;
												while(_g137 < _g242.length) {
													var child12 = _g242[_g137];
													++_g137;
													var node36;
													var _g43 = child12.type;
													if(_g43 == null) {
														node36 = window.document.createElement(child12.name);
													} else {
														switch(_g43._hx_index) {
														case 0:
															node36 = isSvg3 || child12.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child12.name) : window.document.createElement(child12.name);
															break;
														case 1:
															node36 = window.document.createTextNode(child12.name);
															break;
														case 3:
															node36 = window.document.createDocumentFragment();
															break;
														default:
															node36 = window.document.createElement(child12.name);
														}
													}
													var _g138 = new haxe_iterators_DynamicAccessKeyValueIterator(child12.props);
													while(_g138.index < _g138.keys.length) {
														var key82 = _g138.keys[_g138.index++];
														var _g243 = { value : _g138.access[key82], key : key82};
														var key83 = _g243.key;
														var value20 = _g243.value;
														var key84 = key83;
														var oldValue28 = null;
														if(key83 != "key") {
															if(StringTools.startsWith(key83,"on")) {
																var event28 = HxOverrides.substr(key83,2,null).toLowerCase();
																if(oldValue28 != null) {
																	node36.removeEventListener(event28,oldValue28);
																}
																if(value20 != null) {
																	node36.addEventListener(event28,value20);
																}
															} else if(!isSvg3 && key83 != "list" && Reflect.getProperty(node36,key83) != null) {
																Reflect.setProperty(node36,key83,value20 == null ? "" : value20);
															} else if(value20 == null || value20 == false) {
																node36.removeAttribute(key83);
															} else {
																if(key83 == "className") {
																	key84 = "class";
																}
																if(key84 == "htmlFor") {
																	key84 = "for";
																}
																node36.setAttribute(key84,value20);
															}
														}
													}
													var _g139 = 0;
													var _g244 = child12.children;
													while(_g139 < _g244.length) {
														var child13 = _g244[_g139];
														++_g139;
														var node37;
														var _g44 = child13.type;
														if(_g44 == null) {
															node37 = window.document.createElement(child13.name);
														} else {
															switch(_g44._hx_index) {
															case 0:
																node37 = isSvg3 || child13.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child13.name) : window.document.createElement(child13.name);
																break;
															case 1:
																node37 = window.document.createTextNode(child13.name);
																break;
															case 3:
																node37 = window.document.createDocumentFragment();
																break;
															default:
																node37 = window.document.createElement(child13.name);
															}
														}
														var access27 = child13.props;
														var _g1_keys15 = Reflect.fields(access27);
														var _g1_index15 = 0;
														while(_g1_index15 < _g1_keys15.length) {
															var key85 = _g1_keys15[_g1_index15++];
															var _g245 = { value : access27[key85], key : key85};
															var key86 = _g245.key;
															var value21 = _g245.value;
															var key87 = key86;
															var oldValue29 = null;
															if(key86 != "key") {
																if(StringTools.startsWith(key86,"on")) {
																	var event29 = HxOverrides.substr(key86,2,null).toLowerCase();
																	if(oldValue29 != null) {
																		node37.removeEventListener(event29,oldValue29);
																	}
																	if(value21 != null) {
																		node37.addEventListener(event29,value21);
																	}
																} else if(!isSvg3 && key86 != "list" && Reflect.getProperty(node37,key86) != null) {
																	Reflect.setProperty(node37,key86,value21 == null ? "" : value21);
																} else if(value21 == null || value21 == false) {
																	node37.removeAttribute(key86);
																} else {
																	if(key86 == "className") {
																		key87 = "class";
																	}
																	if(key87 == "htmlFor") {
																		key87 = "for";
																	}
																	node37.setAttribute(key87,value21);
																}
															}
														}
														var _g140 = 0;
														var _g246 = child13.children;
														while(_g140 < _g246.length) node37.appendChild(pilot_Differ.createNode(_g246[_g140++],isSvg3));
														child13.node = node37;
														if(child13.hooks.attach != null && child13.node != null) {
															child13.hooks.attach(child13);
														}
														node36.appendChild(node37);
													}
													child12.node = node36;
													if(child12.hooks.attach != null && child12.node != null) {
														child12.hooks.attach(child12);
													}
													node35.appendChild(node36);
												}
												vnode36.node = node35;
												if(vnode36.hooks.attach != null && vnode36.node != null) {
													vnode36.hooks.attach(vnode36);
												}
												oldVChild3 = oldVChildren3[oldHead3];
												node29.insertBefore(node35,oldVChild3 != null ? oldVChild3.node : null);
											}
										} else if(newHead3 > newTail3) {
											while(oldHead3 <= oldTail3) {
												var vnode37 = oldVChildren3[oldHead3++];
												if(vnode37.hooks.detach != null) {
													vnode37.hooks.detach();
												}
												node29.removeChild(vnode37.node);
											}
										} else {
											var keyed3 = { };
											var newKeyed3 = { };
											var i3 = oldHead3;
											while(i3 <= oldTail3) {
												oldKey3 = oldVChildren3[i3].key;
												if(oldKey3 != null) {
													keyed3[oldKey3] = oldVChildren3[i3];
												}
												++i3;
											}
											while(newHead3 <= newTail3) {
												oldVChild3 = oldVChildren3[oldHead3];
												var vnode38 = oldVChild3;
												oldKey3 = vnode38 == null ? null : vnode38.key;
												var vnode39 = newVChildren3[newHead3];
												newKey3 = vnode39 == null ? null : vnode39.key;
												var node38;
												if(newKeyed3[oldKey3] == null) {
													if(newKey3 != null) {
														var vnode40 = oldVChildren3[oldHead3 + 1];
														node38 = newKey3 == (vnode40 == null ? null : vnode40.key);
													} else {
														node38 = false;
													}
												} else {
													node38 = true;
												}
												if(node38) {
													if(oldKey3 == null) {
														if(oldVChild3.hooks.detach != null) {
															oldVChild3.hooks.detach();
														}
														node29.removeChild(oldVChild3.node);
													}
													++oldHead3;
													continue;
												}
												if(newKey3 == null || oldVChild.type == pilot_VNodeType.VNodeRecycled) {
													if(oldKey3 == null) {
														pilot_Differ.patchNode(node29,oldVChild3 != null ? oldVChild3.node : null,oldVChild3,newVChildren3[newHead3],isSvg3);
														++newHead3;
													}
													++oldHead3;
												} else {
													if(oldKey3 == newKey3) {
														pilot_Differ.patchNode(node29,oldVChild3.node,oldVChild3,newVChildren3[newHead3],isSvg3);
														newKeyed3[newKey3] = true;
														++oldHead3;
													} else {
														tmpVChild3 = keyed3[newKey3];
														if(tmpVChild3 != null) {
															pilot_Differ.patchNode(node29,node29.insertBefore(tmpVChild3.node,oldVChild3 != null ? oldVChild3.node : null),tmpVChild3,newVChildren3[newHead3],isSvg3);
															newKeyed3[newKey3] = true;
														} else {
															pilot_Differ.patchNode(node29,oldVChild3 != null ? oldVChild3.node : null,null,newVChildren3[newHead3],isSvg3);
														}
													}
													++newHead3;
												}
											}
											while(oldHead3 <= oldTail3) {
												oldVChild3 = oldVChildren3[oldHead3++];
												var vnode41 = oldVChild3;
												if((vnode41 == null ? null : vnode41.key) == null) {
													if(oldVChild3.hooks.detach != null) {
														oldVChild3.hooks.detach();
													}
													node29.removeChild(oldVChild3.node);
												}
											}
											var _g_keys14 = Reflect.fields(keyed3);
											var _g_index14 = 0;
											while(_g_index14 < _g_keys14.length) {
												var key88 = _g_keys14[_g_index14++];
												var _g141 = { value : keyed3[key88], key : key88};
												var vnode42 = _g141.value;
												if(newKeyed3[_g141.key] == null) {
													if(vnode42.hooks.detach != null) {
														vnode42.hooks.detach();
													}
													node29.removeChild(vnode42.node);
												}
											}
										}
									}
								}
								newVNode2.node = node29;
								++newHead;
							}
							++oldHead;
						} else {
							if(oldKey == newKey) {
								var node39 = oldVChild.node;
								var newVNode3 = newVChildren[newHead];
								var isSvg4 = isSvg;
								if(oldVChild != newVNode3) {
									if(oldVChild != null && oldVChild.type == pilot_VNodeType.VNodeText && newVNode3.type == pilot_VNodeType.VNodeText) {
										if(oldVChild.name != newVNode3.name) {
											node39.nodeValue = newVNode3.name;
										}
									} else if(oldVChild == null || oldVChild.name != newVNode3.name) {
										var node40;
										var _g45 = newVNode3.type;
										if(_g45 == null) {
											node40 = window.document.createElement(newVNode3.name);
										} else {
											switch(_g45._hx_index) {
											case 0:
												node40 = isSvg4 || newVNode3.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",newVNode3.name) : window.document.createElement(newVNode3.name);
												break;
											case 1:
												node40 = window.document.createTextNode(newVNode3.name);
												break;
											case 3:
												node40 = window.document.createDocumentFragment();
												break;
											default:
												node40 = window.document.createElement(newVNode3.name);
											}
										}
										var access28 = newVNode3.props;
										var _g1_keys16 = Reflect.fields(access28);
										var _g1_index16 = 0;
										while(_g1_index16 < _g1_keys16.length) {
											var key89 = _g1_keys16[_g1_index16++];
											var _g247 = { value : access28[key89], key : key89};
											var key90 = _g247.key;
											var value22 = _g247.value;
											var key91 = key90;
											var oldValue30 = null;
											if(key90 != "key") {
												if(StringTools.startsWith(key90,"on")) {
													var event30 = HxOverrides.substr(key90,2,null).toLowerCase();
													if(oldValue30 != null) {
														node40.removeEventListener(event30,oldValue30);
													}
													if(value22 != null) {
														node40.addEventListener(event30,value22);
													}
												} else if(!isSvg4 && key90 != "list" && Reflect.getProperty(node40,key90) != null) {
													Reflect.setProperty(node40,key90,value22 == null ? "" : value22);
												} else if(value22 == null || value22 == false) {
													node40.removeAttribute(key90);
												} else {
													if(key90 == "className") {
														key91 = "class";
													}
													if(key91 == "htmlFor") {
														key91 = "for";
													}
													node40.setAttribute(key91,value22);
												}
											}
										}
										var _g142 = 0;
										var _g248 = newVNode3.children;
										while(_g142 < _g248.length) {
											var child14 = _g248[_g142];
											++_g142;
											var node41;
											var _g46 = child14.type;
											if(_g46 == null) {
												node41 = window.document.createElement(child14.name);
											} else {
												switch(_g46._hx_index) {
												case 0:
													node41 = isSvg4 || child14.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child14.name) : window.document.createElement(child14.name);
													break;
												case 1:
													node41 = window.document.createTextNode(child14.name);
													break;
												case 3:
													node41 = window.document.createDocumentFragment();
													break;
												default:
													node41 = window.document.createElement(child14.name);
												}
											}
											var _g143 = new haxe_iterators_DynamicAccessKeyValueIterator(child14.props);
											while(_g143.index < _g143.keys.length) {
												var key92 = _g143.keys[_g143.index++];
												var _g249 = { value : _g143.access[key92], key : key92};
												var key93 = _g249.key;
												var value23 = _g249.value;
												var key94 = key93;
												var oldValue31 = null;
												if(key93 != "key") {
													if(StringTools.startsWith(key93,"on")) {
														var event31 = HxOverrides.substr(key93,2,null).toLowerCase();
														if(oldValue31 != null) {
															node41.removeEventListener(event31,oldValue31);
														}
														if(value23 != null) {
															node41.addEventListener(event31,value23);
														}
													} else if(!isSvg4 && key93 != "list" && Reflect.getProperty(node41,key93) != null) {
														Reflect.setProperty(node41,key93,value23 == null ? "" : value23);
													} else if(value23 == null || value23 == false) {
														node41.removeAttribute(key93);
													} else {
														if(key93 == "className") {
															key94 = "class";
														}
														if(key94 == "htmlFor") {
															key94 = "for";
														}
														node41.setAttribute(key94,value23);
													}
												}
											}
											var _g144 = 0;
											var _g250 = child14.children;
											while(_g144 < _g250.length) {
												var child15 = _g250[_g144];
												++_g144;
												var node42;
												var _g47 = child15.type;
												if(_g47 == null) {
													node42 = window.document.createElement(child15.name);
												} else {
													switch(_g47._hx_index) {
													case 0:
														node42 = isSvg4 || child15.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child15.name) : window.document.createElement(child15.name);
														break;
													case 1:
														node42 = window.document.createTextNode(child15.name);
														break;
													case 3:
														node42 = window.document.createDocumentFragment();
														break;
													default:
														node42 = window.document.createElement(child15.name);
													}
												}
												var access29 = child15.props;
												var _g1_keys17 = Reflect.fields(access29);
												var _g1_index17 = 0;
												while(_g1_index17 < _g1_keys17.length) {
													var key95 = _g1_keys17[_g1_index17++];
													var _g251 = { value : access29[key95], key : key95};
													var key96 = _g251.key;
													var value24 = _g251.value;
													var key97 = key96;
													var oldValue32 = null;
													if(key96 != "key") {
														if(StringTools.startsWith(key96,"on")) {
															var event32 = HxOverrides.substr(key96,2,null).toLowerCase();
															if(oldValue32 != null) {
																node42.removeEventListener(event32,oldValue32);
															}
															if(value24 != null) {
																node42.addEventListener(event32,value24);
															}
														} else if(!isSvg4 && key96 != "list" && Reflect.getProperty(node42,key96) != null) {
															Reflect.setProperty(node42,key96,value24 == null ? "" : value24);
														} else if(value24 == null || value24 == false) {
															node42.removeAttribute(key96);
														} else {
															if(key96 == "className") {
																key97 = "class";
															}
															if(key97 == "htmlFor") {
																key97 = "for";
															}
															node42.setAttribute(key97,value24);
														}
													}
												}
												var _g145 = 0;
												var _g252 = child15.children;
												while(_g145 < _g252.length) node42.appendChild(pilot_Differ.createNode(_g252[_g145++],isSvg4));
												child15.node = node42;
												if(child15.hooks.attach != null && child15.node != null) {
													child15.hooks.attach(child15);
												}
												node41.appendChild(node42);
											}
											child14.node = node41;
											if(child14.hooks.attach != null && child14.node != null) {
												child14.hooks.attach(child14);
											}
											node40.appendChild(node41);
										}
										newVNode3.node = node40;
										if(newVNode3.hooks.attach != null && newVNode3.node != null) {
											newVNode3.hooks.attach(newVNode3);
										}
										node39 = node1.insertBefore(node40,node39);
										if(oldVChild != null && oldVChild.node != null) {
											if(oldVChild.hooks.detach != null) {
												oldVChild.hooks.detach();
											}
											node1.removeChild(oldVChild.node);
										}
									} else {
										var tmpVChild4;
										var oldVChild4;
										var oldKey4;
										var newKey4;
										var oldVProps4 = oldVChild.props;
										var newVProps4 = newVNode3.props;
										var oldVChildren4 = oldVChild.children;
										var newVChildren4 = newVNode3.children;
										var oldHead4 = 0;
										var newHead4 = 0;
										var oldTail4 = oldVChildren4.length - 1;
										var newTail4 = newVChildren4.length - 1;
										isSvg4 = isSvg4 || newVNode3.name == "svg";
										var out4 = { };
										var access30 = oldVProps4;
										var _g_keys15 = Reflect.fields(access30);
										var _g_index15 = 0;
										while(_g_index15 < _g_keys15.length) {
											var key98 = _g_keys15[_g_index15++];
											var _g146 = { value : access30[key98], key : key98};
											out4[_g146.key] = _g146.value;
										}
										var access31 = newVProps4;
										var _g_keys16 = Reflect.fields(access31);
										var _g_index16 = 0;
										while(_g_index16 < _g_keys16.length) {
											var key99 = _g_keys16[_g_index16++];
											var _g147 = { value : access31[key99], key : key99};
											out4[_g147.key] = _g147.value;
										}
										var access32 = out4;
										var _g_keys17 = Reflect.fields(access32);
										var _g_index17 = 0;
										while(_g_index17 < _g_keys17.length) {
											var key100 = _g_keys17[_g_index17++];
											var k4 = ({ value : access32[key100], key : key100}).key;
											switch(k4) {
											case "checked":case "selected":case "value":
												if(Reflect.field(node39,k4) != Reflect.field(newVProps4,k4)) {
													var key101 = k4;
													var oldValue33 = Reflect.field(oldVProps4,k4);
													var newValue8 = Reflect.field(newVProps4,k4);
													if(k4 != "key") {
														if(StringTools.startsWith(k4,"on")) {
															var event33 = HxOverrides.substr(k4,2,null).toLowerCase();
															if(oldValue33 != null) {
																node39.removeEventListener(event33,oldValue33);
															}
															if(newValue8 != null) {
																node39.addEventListener(event33,newValue8);
															}
														} else if(!isSvg4 && k4 != "list" && Reflect.getProperty(node39,k4) != null) {
															Reflect.setProperty(node39,k4,newValue8 == null ? "" : newValue8);
														} else if(newValue8 == null || newValue8 == false) {
															node39.removeAttribute(k4);
														} else {
															if(k4 == "className") {
																key101 = "class";
															}
															if(key101 == "htmlFor") {
																key101 = "for";
															}
															node39.setAttribute(key101,newValue8);
														}
													}
												}
												break;
											default:
												if(Reflect.field(oldVProps4,k4) != Reflect.field(newVProps4,k4)) {
													var key102 = k4;
													var oldValue34 = Reflect.field(oldVProps4,k4);
													var newValue9 = Reflect.field(newVProps4,k4);
													if(k4 != "key") {
														if(StringTools.startsWith(k4,"on")) {
															var event34 = HxOverrides.substr(k4,2,null).toLowerCase();
															if(oldValue34 != null) {
																node39.removeEventListener(event34,oldValue34);
															}
															if(newValue9 != null) {
																node39.addEventListener(event34,newValue9);
															}
														} else if(!isSvg4 && k4 != "list" && Reflect.getProperty(node39,k4) != null) {
															Reflect.setProperty(node39,k4,newValue9 == null ? "" : newValue9);
														} else if(newValue9 == null || newValue9 == false) {
															node39.removeAttribute(k4);
														} else {
															if(k4 == "className") {
																key102 = "class";
															}
															if(key102 == "htmlFor") {
																key102 = "for";
															}
															node39.setAttribute(key102,newValue9);
														}
													}
												}
											}
										}
										while(newHead4 <= newTail4 && oldHead4 <= oldTail4) {
											var node43;
											var vnode43 = oldVChildren4[oldHead4];
											oldKey4 = vnode43 == null ? null : vnode43.key;
											if(oldKey4 != null) {
												var vnode44 = newVChildren4[newHead4];
												node43 = oldKey4 != (vnode44 == null ? null : vnode44.key);
											} else {
												node43 = true;
											}
											if(node43) {
												break;
											}
											pilot_Differ.patchNode(node39,oldVChildren4[oldHead4++].node,oldVChildren4[oldHead4 - 1],newVChildren4[newHead4++],isSvg4);
										}
										while(newHead4 <= newTail4 && oldHead4 <= oldTail4) {
											var node44;
											var vnode45 = oldVChildren4[oldTail4];
											oldKey4 = vnode45 == null ? null : vnode45.key;
											if(oldKey4 != null) {
												var vnode46 = newVChildren4[newTail4];
												node44 = oldKey4 != (vnode46 == null ? null : vnode46.key);
											} else {
												node44 = true;
											}
											if(node44) {
												break;
											}
											pilot_Differ.patchNode(node39,oldVChildren4[oldTail4--].node,oldVChildren4[oldTail4 + 1],newVChildren4[newTail4--],isSvg4);
										}
										if(oldHead4 > oldTail4) {
											while(newHead4 <= newTail4) {
												var vnode47 = newVChildren4[newHead4++];
												var node45;
												var _g48 = vnode47.type;
												if(_g48 == null) {
													node45 = window.document.createElement(vnode47.name);
												} else {
													switch(_g48._hx_index) {
													case 0:
														node45 = isSvg4 || vnode47.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",vnode47.name) : window.document.createElement(vnode47.name);
														break;
													case 1:
														node45 = window.document.createTextNode(vnode47.name);
														break;
													case 3:
														node45 = window.document.createDocumentFragment();
														break;
													default:
														node45 = window.document.createElement(vnode47.name);
													}
												}
												var access33 = vnode47.props;
												var _g1_keys18 = Reflect.fields(access33);
												var _g1_index18 = 0;
												while(_g1_index18 < _g1_keys18.length) {
													var key103 = _g1_keys18[_g1_index18++];
													var _g253 = { value : access33[key103], key : key103};
													var key104 = _g253.key;
													var value25 = _g253.value;
													var key105 = key104;
													var oldValue35 = null;
													if(key104 != "key") {
														if(StringTools.startsWith(key104,"on")) {
															var event35 = HxOverrides.substr(key104,2,null).toLowerCase();
															if(oldValue35 != null) {
																node45.removeEventListener(event35,oldValue35);
															}
															if(value25 != null) {
																node45.addEventListener(event35,value25);
															}
														} else if(!isSvg4 && key104 != "list" && Reflect.getProperty(node45,key104) != null) {
															Reflect.setProperty(node45,key104,value25 == null ? "" : value25);
														} else if(value25 == null || value25 == false) {
															node45.removeAttribute(key104);
														} else {
															if(key104 == "className") {
																key105 = "class";
															}
															if(key105 == "htmlFor") {
																key105 = "for";
															}
															node45.setAttribute(key105,value25);
														}
													}
												}
												var _g148 = 0;
												var _g254 = vnode47.children;
												while(_g148 < _g254.length) {
													var child16 = _g254[_g148];
													++_g148;
													var node46;
													var _g49 = child16.type;
													if(_g49 == null) {
														node46 = window.document.createElement(child16.name);
													} else {
														switch(_g49._hx_index) {
														case 0:
															node46 = isSvg4 || child16.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child16.name) : window.document.createElement(child16.name);
															break;
														case 1:
															node46 = window.document.createTextNode(child16.name);
															break;
														case 3:
															node46 = window.document.createDocumentFragment();
															break;
														default:
															node46 = window.document.createElement(child16.name);
														}
													}
													var _g149 = new haxe_iterators_DynamicAccessKeyValueIterator(child16.props);
													while(_g149.index < _g149.keys.length) {
														var key106 = _g149.keys[_g149.index++];
														var _g255 = { value : _g149.access[key106], key : key106};
														var key107 = _g255.key;
														var value26 = _g255.value;
														var key108 = key107;
														var oldValue36 = null;
														if(key107 != "key") {
															if(StringTools.startsWith(key107,"on")) {
																var event36 = HxOverrides.substr(key107,2,null).toLowerCase();
																if(oldValue36 != null) {
																	node46.removeEventListener(event36,oldValue36);
																}
																if(value26 != null) {
																	node46.addEventListener(event36,value26);
																}
															} else if(!isSvg4 && key107 != "list" && Reflect.getProperty(node46,key107) != null) {
																Reflect.setProperty(node46,key107,value26 == null ? "" : value26);
															} else if(value26 == null || value26 == false) {
																node46.removeAttribute(key107);
															} else {
																if(key107 == "className") {
																	key108 = "class";
																}
																if(key108 == "htmlFor") {
																	key108 = "for";
																}
																node46.setAttribute(key108,value26);
															}
														}
													}
													var _g150 = 0;
													var _g256 = child16.children;
													while(_g150 < _g256.length) {
														var child17 = _g256[_g150];
														++_g150;
														var node47;
														var _g50 = child17.type;
														if(_g50 == null) {
															node47 = window.document.createElement(child17.name);
														} else {
															switch(_g50._hx_index) {
															case 0:
																node47 = isSvg4 || child17.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child17.name) : window.document.createElement(child17.name);
																break;
															case 1:
																node47 = window.document.createTextNode(child17.name);
																break;
															case 3:
																node47 = window.document.createDocumentFragment();
																break;
															default:
																node47 = window.document.createElement(child17.name);
															}
														}
														var access34 = child17.props;
														var _g1_keys19 = Reflect.fields(access34);
														var _g1_index19 = 0;
														while(_g1_index19 < _g1_keys19.length) {
															var key109 = _g1_keys19[_g1_index19++];
															var _g257 = { value : access34[key109], key : key109};
															var key110 = _g257.key;
															var value27 = _g257.value;
															var key111 = key110;
															var oldValue37 = null;
															if(key110 != "key") {
																if(StringTools.startsWith(key110,"on")) {
																	var event37 = HxOverrides.substr(key110,2,null).toLowerCase();
																	if(oldValue37 != null) {
																		node47.removeEventListener(event37,oldValue37);
																	}
																	if(value27 != null) {
																		node47.addEventListener(event37,value27);
																	}
																} else if(!isSvg4 && key110 != "list" && Reflect.getProperty(node47,key110) != null) {
																	Reflect.setProperty(node47,key110,value27 == null ? "" : value27);
																} else if(value27 == null || value27 == false) {
																	node47.removeAttribute(key110);
																} else {
																	if(key110 == "className") {
																		key111 = "class";
																	}
																	if(key111 == "htmlFor") {
																		key111 = "for";
																	}
																	node47.setAttribute(key111,value27);
																}
															}
														}
														var _g151 = 0;
														var _g258 = child17.children;
														while(_g151 < _g258.length) node47.appendChild(pilot_Differ.createNode(_g258[_g151++],isSvg4));
														child17.node = node47;
														if(child17.hooks.attach != null && child17.node != null) {
															child17.hooks.attach(child17);
														}
														node46.appendChild(node47);
													}
													child16.node = node46;
													if(child16.hooks.attach != null && child16.node != null) {
														child16.hooks.attach(child16);
													}
													node45.appendChild(node46);
												}
												vnode47.node = node45;
												if(vnode47.hooks.attach != null && vnode47.node != null) {
													vnode47.hooks.attach(vnode47);
												}
												oldVChild4 = oldVChildren4[oldHead4];
												node39.insertBefore(node45,oldVChild4 != null ? oldVChild4.node : null);
											}
										} else if(newHead4 > newTail4) {
											while(oldHead4 <= oldTail4) {
												var vnode48 = oldVChildren4[oldHead4++];
												if(vnode48.hooks.detach != null) {
													vnode48.hooks.detach();
												}
												node39.removeChild(vnode48.node);
											}
										} else {
											var keyed4 = { };
											var newKeyed4 = { };
											var i4 = oldHead4;
											while(i4 <= oldTail4) {
												oldKey4 = oldVChildren4[i4].key;
												if(oldKey4 != null) {
													keyed4[oldKey4] = oldVChildren4[i4];
												}
												++i4;
											}
											while(newHead4 <= newTail4) {
												oldVChild4 = oldVChildren4[oldHead4];
												var vnode49 = oldVChild4;
												oldKey4 = vnode49 == null ? null : vnode49.key;
												var vnode50 = newVChildren4[newHead4];
												newKey4 = vnode50 == null ? null : vnode50.key;
												var node48;
												if(newKeyed4[oldKey4] == null) {
													if(newKey4 != null) {
														var vnode51 = oldVChildren4[oldHead4 + 1];
														node48 = newKey4 == (vnode51 == null ? null : vnode51.key);
													} else {
														node48 = false;
													}
												} else {
													node48 = true;
												}
												if(node48) {
													if(oldKey4 == null) {
														if(oldVChild4.hooks.detach != null) {
															oldVChild4.hooks.detach();
														}
														node39.removeChild(oldVChild4.node);
													}
													++oldHead4;
													continue;
												}
												if(newKey4 == null || oldVChild.type == pilot_VNodeType.VNodeRecycled) {
													if(oldKey4 == null) {
														pilot_Differ.patchNode(node39,oldVChild4 != null ? oldVChild4.node : null,oldVChild4,newVChildren4[newHead4],isSvg4);
														++newHead4;
													}
													++oldHead4;
												} else {
													if(oldKey4 == newKey4) {
														pilot_Differ.patchNode(node39,oldVChild4.node,oldVChild4,newVChildren4[newHead4],isSvg4);
														newKeyed4[newKey4] = true;
														++oldHead4;
													} else {
														tmpVChild4 = keyed4[newKey4];
														if(tmpVChild4 != null) {
															pilot_Differ.patchNode(node39,node39.insertBefore(tmpVChild4.node,oldVChild4 != null ? oldVChild4.node : null),tmpVChild4,newVChildren4[newHead4],isSvg4);
															newKeyed4[newKey4] = true;
														} else {
															pilot_Differ.patchNode(node39,oldVChild4 != null ? oldVChild4.node : null,null,newVChildren4[newHead4],isSvg4);
														}
													}
													++newHead4;
												}
											}
											while(oldHead4 <= oldTail4) {
												oldVChild4 = oldVChildren4[oldHead4++];
												var vnode52 = oldVChild4;
												if((vnode52 == null ? null : vnode52.key) == null) {
													if(oldVChild4.hooks.detach != null) {
														oldVChild4.hooks.detach();
													}
													node39.removeChild(oldVChild4.node);
												}
											}
											var _g_keys18 = Reflect.fields(keyed4);
											var _g_index18 = 0;
											while(_g_index18 < _g_keys18.length) {
												var key112 = _g_keys18[_g_index18++];
												var _g152 = { value : keyed4[key112], key : key112};
												var vnode53 = _g152.value;
												if(newKeyed4[_g152.key] == null) {
													if(vnode53.hooks.detach != null) {
														vnode53.hooks.detach();
													}
													node39.removeChild(vnode53.node);
												}
											}
										}
									}
								}
								newVNode3.node = node39;
								newKeyed2[newKey] = true;
								++oldHead;
							} else {
								tmpVChild = keyed2[newKey];
								if(tmpVChild != null) {
									var node49 = node1.insertBefore(tmpVChild.node,oldVChild != null ? oldVChild.node : null);
									var newVNode4 = newVChildren[newHead];
									var isSvg5 = isSvg;
									if(tmpVChild != newVNode4) {
										if(tmpVChild != null && tmpVChild.type == pilot_VNodeType.VNodeText && newVNode4.type == pilot_VNodeType.VNodeText) {
											if(tmpVChild.name != newVNode4.name) {
												node49.nodeValue = newVNode4.name;
											}
										} else if(tmpVChild == null || tmpVChild.name != newVNode4.name) {
											var node50;
											var _g51 = newVNode4.type;
											if(_g51 == null) {
												node50 = window.document.createElement(newVNode4.name);
											} else {
												switch(_g51._hx_index) {
												case 0:
													node50 = isSvg5 || newVNode4.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",newVNode4.name) : window.document.createElement(newVNode4.name);
													break;
												case 1:
													node50 = window.document.createTextNode(newVNode4.name);
													break;
												case 3:
													node50 = window.document.createDocumentFragment();
													break;
												default:
													node50 = window.document.createElement(newVNode4.name);
												}
											}
											var access35 = newVNode4.props;
											var _g1_keys20 = Reflect.fields(access35);
											var _g1_index20 = 0;
											while(_g1_index20 < _g1_keys20.length) {
												var key113 = _g1_keys20[_g1_index20++];
												var _g259 = { value : access35[key113], key : key113};
												var key114 = _g259.key;
												var value28 = _g259.value;
												var key115 = key114;
												var oldValue38 = null;
												if(key114 != "key") {
													if(StringTools.startsWith(key114,"on")) {
														var event38 = HxOverrides.substr(key114,2,null).toLowerCase();
														if(oldValue38 != null) {
															node50.removeEventListener(event38,oldValue38);
														}
														if(value28 != null) {
															node50.addEventListener(event38,value28);
														}
													} else if(!isSvg5 && key114 != "list" && Reflect.getProperty(node50,key114) != null) {
														Reflect.setProperty(node50,key114,value28 == null ? "" : value28);
													} else if(value28 == null || value28 == false) {
														node50.removeAttribute(key114);
													} else {
														if(key114 == "className") {
															key115 = "class";
														}
														if(key115 == "htmlFor") {
															key115 = "for";
														}
														node50.setAttribute(key115,value28);
													}
												}
											}
											var _g153 = 0;
											var _g260 = newVNode4.children;
											while(_g153 < _g260.length) {
												var child18 = _g260[_g153];
												++_g153;
												var node51;
												var _g52 = child18.type;
												if(_g52 == null) {
													node51 = window.document.createElement(child18.name);
												} else {
													switch(_g52._hx_index) {
													case 0:
														node51 = isSvg5 || child18.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child18.name) : window.document.createElement(child18.name);
														break;
													case 1:
														node51 = window.document.createTextNode(child18.name);
														break;
													case 3:
														node51 = window.document.createDocumentFragment();
														break;
													default:
														node51 = window.document.createElement(child18.name);
													}
												}
												var _g154 = new haxe_iterators_DynamicAccessKeyValueIterator(child18.props);
												while(_g154.index < _g154.keys.length) {
													var key116 = _g154.keys[_g154.index++];
													var _g261 = { value : _g154.access[key116], key : key116};
													var key117 = _g261.key;
													var value29 = _g261.value;
													var key118 = key117;
													var oldValue39 = null;
													if(key117 != "key") {
														if(StringTools.startsWith(key117,"on")) {
															var event39 = HxOverrides.substr(key117,2,null).toLowerCase();
															if(oldValue39 != null) {
																node51.removeEventListener(event39,oldValue39);
															}
															if(value29 != null) {
																node51.addEventListener(event39,value29);
															}
														} else if(!isSvg5 && key117 != "list" && Reflect.getProperty(node51,key117) != null) {
															Reflect.setProperty(node51,key117,value29 == null ? "" : value29);
														} else if(value29 == null || value29 == false) {
															node51.removeAttribute(key117);
														} else {
															if(key117 == "className") {
																key118 = "class";
															}
															if(key118 == "htmlFor") {
																key118 = "for";
															}
															node51.setAttribute(key118,value29);
														}
													}
												}
												var _g155 = 0;
												var _g262 = child18.children;
												while(_g155 < _g262.length) {
													var child19 = _g262[_g155];
													++_g155;
													var node52;
													var _g53 = child19.type;
													if(_g53 == null) {
														node52 = window.document.createElement(child19.name);
													} else {
														switch(_g53._hx_index) {
														case 0:
															node52 = isSvg5 || child19.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child19.name) : window.document.createElement(child19.name);
															break;
														case 1:
															node52 = window.document.createTextNode(child19.name);
															break;
														case 3:
															node52 = window.document.createDocumentFragment();
															break;
														default:
															node52 = window.document.createElement(child19.name);
														}
													}
													var access36 = child19.props;
													var _g1_keys21 = Reflect.fields(access36);
													var _g1_index21 = 0;
													while(_g1_index21 < _g1_keys21.length) {
														var key119 = _g1_keys21[_g1_index21++];
														var _g263 = { value : access36[key119], key : key119};
														var key120 = _g263.key;
														var value30 = _g263.value;
														var key121 = key120;
														var oldValue40 = null;
														if(key120 != "key") {
															if(StringTools.startsWith(key120,"on")) {
																var event40 = HxOverrides.substr(key120,2,null).toLowerCase();
																if(oldValue40 != null) {
																	node52.removeEventListener(event40,oldValue40);
																}
																if(value30 != null) {
																	node52.addEventListener(event40,value30);
																}
															} else if(!isSvg5 && key120 != "list" && Reflect.getProperty(node52,key120) != null) {
																Reflect.setProperty(node52,key120,value30 == null ? "" : value30);
															} else if(value30 == null || value30 == false) {
																node52.removeAttribute(key120);
															} else {
																if(key120 == "className") {
																	key121 = "class";
																}
																if(key121 == "htmlFor") {
																	key121 = "for";
																}
																node52.setAttribute(key121,value30);
															}
														}
													}
													var _g156 = 0;
													var _g264 = child19.children;
													while(_g156 < _g264.length) node52.appendChild(pilot_Differ.createNode(_g264[_g156++],isSvg5));
													child19.node = node52;
													if(child19.hooks.attach != null && child19.node != null) {
														child19.hooks.attach(child19);
													}
													node51.appendChild(node52);
												}
												child18.node = node51;
												if(child18.hooks.attach != null && child18.node != null) {
													child18.hooks.attach(child18);
												}
												node50.appendChild(node51);
											}
											newVNode4.node = node50;
											if(newVNode4.hooks.attach != null && newVNode4.node != null) {
												newVNode4.hooks.attach(newVNode4);
											}
											node49 = node1.insertBefore(node50,node49);
											if(tmpVChild != null && tmpVChild.node != null) {
												if(tmpVChild.hooks.detach != null) {
													tmpVChild.hooks.detach();
												}
												node1.removeChild(tmpVChild.node);
											}
										} else {
											var tmpVChild5;
											var oldVChild5;
											var oldKey5;
											var newKey5;
											var oldVProps5 = tmpVChild.props;
											var newVProps5 = newVNode4.props;
											var oldVChildren5 = tmpVChild.children;
											var newVChildren5 = newVNode4.children;
											var oldHead5 = 0;
											var newHead5 = 0;
											var oldTail5 = oldVChildren5.length - 1;
											var newTail5 = newVChildren5.length - 1;
											isSvg5 = isSvg5 || newVNode4.name == "svg";
											var out5 = { };
											var access37 = oldVProps5;
											var _g_keys19 = Reflect.fields(access37);
											var _g_index19 = 0;
											while(_g_index19 < _g_keys19.length) {
												var key122 = _g_keys19[_g_index19++];
												var _g157 = { value : access37[key122], key : key122};
												out5[_g157.key] = _g157.value;
											}
											var access38 = newVProps5;
											var _g_keys20 = Reflect.fields(access38);
											var _g_index20 = 0;
											while(_g_index20 < _g_keys20.length) {
												var key123 = _g_keys20[_g_index20++];
												var _g158 = { value : access38[key123], key : key123};
												out5[_g158.key] = _g158.value;
											}
											var access39 = out5;
											var _g_keys21 = Reflect.fields(access39);
											var _g_index21 = 0;
											while(_g_index21 < _g_keys21.length) {
												var key124 = _g_keys21[_g_index21++];
												var k5 = ({ value : access39[key124], key : key124}).key;
												switch(k5) {
												case "checked":case "selected":case "value":
													if(Reflect.field(node49,k5) != Reflect.field(newVProps5,k5)) {
														var key125 = k5;
														var oldValue41 = Reflect.field(oldVProps5,k5);
														var newValue10 = Reflect.field(newVProps5,k5);
														if(k5 != "key") {
															if(StringTools.startsWith(k5,"on")) {
																var event41 = HxOverrides.substr(k5,2,null).toLowerCase();
																if(oldValue41 != null) {
																	node49.removeEventListener(event41,oldValue41);
																}
																if(newValue10 != null) {
																	node49.addEventListener(event41,newValue10);
																}
															} else if(!isSvg5 && k5 != "list" && Reflect.getProperty(node49,k5) != null) {
																Reflect.setProperty(node49,k5,newValue10 == null ? "" : newValue10);
															} else if(newValue10 == null || newValue10 == false) {
																node49.removeAttribute(k5);
															} else {
																if(k5 == "className") {
																	key125 = "class";
																}
																if(key125 == "htmlFor") {
																	key125 = "for";
																}
																node49.setAttribute(key125,newValue10);
															}
														}
													}
													break;
												default:
													if(Reflect.field(oldVProps5,k5) != Reflect.field(newVProps5,k5)) {
														var key126 = k5;
														var oldValue42 = Reflect.field(oldVProps5,k5);
														var newValue11 = Reflect.field(newVProps5,k5);
														if(k5 != "key") {
															if(StringTools.startsWith(k5,"on")) {
																var event42 = HxOverrides.substr(k5,2,null).toLowerCase();
																if(oldValue42 != null) {
																	node49.removeEventListener(event42,oldValue42);
																}
																if(newValue11 != null) {
																	node49.addEventListener(event42,newValue11);
																}
															} else if(!isSvg5 && k5 != "list" && Reflect.getProperty(node49,k5) != null) {
																Reflect.setProperty(node49,k5,newValue11 == null ? "" : newValue11);
															} else if(newValue11 == null || newValue11 == false) {
																node49.removeAttribute(k5);
															} else {
																if(k5 == "className") {
																	key126 = "class";
																}
																if(key126 == "htmlFor") {
																	key126 = "for";
																}
																node49.setAttribute(key126,newValue11);
															}
														}
													}
												}
											}
											while(newHead5 <= newTail5 && oldHead5 <= oldTail5) {
												var node53;
												var vnode54 = oldVChildren5[oldHead5];
												oldKey5 = vnode54 == null ? null : vnode54.key;
												if(oldKey5 != null) {
													var vnode55 = newVChildren5[newHead5];
													node53 = oldKey5 != (vnode55 == null ? null : vnode55.key);
												} else {
													node53 = true;
												}
												if(node53) {
													break;
												}
												pilot_Differ.patchNode(node49,oldVChildren5[oldHead5++].node,oldVChildren5[oldHead5 - 1],newVChildren5[newHead5++],isSvg5);
											}
											while(newHead5 <= newTail5 && oldHead5 <= oldTail5) {
												var node54;
												var vnode56 = oldVChildren5[oldTail5];
												oldKey5 = vnode56 == null ? null : vnode56.key;
												if(oldKey5 != null) {
													var vnode57 = newVChildren5[newTail5];
													node54 = oldKey5 != (vnode57 == null ? null : vnode57.key);
												} else {
													node54 = true;
												}
												if(node54) {
													break;
												}
												pilot_Differ.patchNode(node49,oldVChildren5[oldTail5--].node,oldVChildren5[oldTail5 + 1],newVChildren5[newTail5--],isSvg5);
											}
											if(oldHead5 > oldTail5) {
												while(newHead5 <= newTail5) {
													var vnode58 = newVChildren5[newHead5++];
													var node55;
													var _g54 = vnode58.type;
													if(_g54 == null) {
														node55 = window.document.createElement(vnode58.name);
													} else {
														switch(_g54._hx_index) {
														case 0:
															node55 = isSvg5 || vnode58.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",vnode58.name) : window.document.createElement(vnode58.name);
															break;
														case 1:
															node55 = window.document.createTextNode(vnode58.name);
															break;
														case 3:
															node55 = window.document.createDocumentFragment();
															break;
														default:
															node55 = window.document.createElement(vnode58.name);
														}
													}
													var access40 = vnode58.props;
													var _g1_keys22 = Reflect.fields(access40);
													var _g1_index22 = 0;
													while(_g1_index22 < _g1_keys22.length) {
														var key127 = _g1_keys22[_g1_index22++];
														var _g265 = { value : access40[key127], key : key127};
														var key128 = _g265.key;
														var value31 = _g265.value;
														var key129 = key128;
														var oldValue43 = null;
														if(key128 != "key") {
															if(StringTools.startsWith(key128,"on")) {
																var event43 = HxOverrides.substr(key128,2,null).toLowerCase();
																if(oldValue43 != null) {
																	node55.removeEventListener(event43,oldValue43);
																}
																if(value31 != null) {
																	node55.addEventListener(event43,value31);
																}
															} else if(!isSvg5 && key128 != "list" && Reflect.getProperty(node55,key128) != null) {
																Reflect.setProperty(node55,key128,value31 == null ? "" : value31);
															} else if(value31 == null || value31 == false) {
																node55.removeAttribute(key128);
															} else {
																if(key128 == "className") {
																	key129 = "class";
																}
																if(key129 == "htmlFor") {
																	key129 = "for";
																}
																node55.setAttribute(key129,value31);
															}
														}
													}
													var _g159 = 0;
													var _g266 = vnode58.children;
													while(_g159 < _g266.length) {
														var child20 = _g266[_g159];
														++_g159;
														var node56;
														var _g55 = child20.type;
														if(_g55 == null) {
															node56 = window.document.createElement(child20.name);
														} else {
															switch(_g55._hx_index) {
															case 0:
																node56 = isSvg5 || child20.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child20.name) : window.document.createElement(child20.name);
																break;
															case 1:
																node56 = window.document.createTextNode(child20.name);
																break;
															case 3:
																node56 = window.document.createDocumentFragment();
																break;
															default:
																node56 = window.document.createElement(child20.name);
															}
														}
														var _g160 = new haxe_iterators_DynamicAccessKeyValueIterator(child20.props);
														while(_g160.index < _g160.keys.length) {
															var key130 = _g160.keys[_g160.index++];
															var _g267 = { value : _g160.access[key130], key : key130};
															var key131 = _g267.key;
															var value32 = _g267.value;
															var key132 = key131;
															var oldValue44 = null;
															if(key131 != "key") {
																if(StringTools.startsWith(key131,"on")) {
																	var event44 = HxOverrides.substr(key131,2,null).toLowerCase();
																	if(oldValue44 != null) {
																		node56.removeEventListener(event44,oldValue44);
																	}
																	if(value32 != null) {
																		node56.addEventListener(event44,value32);
																	}
																} else if(!isSvg5 && key131 != "list" && Reflect.getProperty(node56,key131) != null) {
																	Reflect.setProperty(node56,key131,value32 == null ? "" : value32);
																} else if(value32 == null || value32 == false) {
																	node56.removeAttribute(key131);
																} else {
																	if(key131 == "className") {
																		key132 = "class";
																	}
																	if(key132 == "htmlFor") {
																		key132 = "for";
																	}
																	node56.setAttribute(key132,value32);
																}
															}
														}
														var _g161 = 0;
														var _g268 = child20.children;
														while(_g161 < _g268.length) {
															var child21 = _g268[_g161];
															++_g161;
															var node57;
															var _g56 = child21.type;
															if(_g56 == null) {
																node57 = window.document.createElement(child21.name);
															} else {
																switch(_g56._hx_index) {
																case 0:
																	node57 = isSvg5 || child21.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child21.name) : window.document.createElement(child21.name);
																	break;
																case 1:
																	node57 = window.document.createTextNode(child21.name);
																	break;
																case 3:
																	node57 = window.document.createDocumentFragment();
																	break;
																default:
																	node57 = window.document.createElement(child21.name);
																}
															}
															var access41 = child21.props;
															var _g1_keys23 = Reflect.fields(access41);
															var _g1_index23 = 0;
															while(_g1_index23 < _g1_keys23.length) {
																var key133 = _g1_keys23[_g1_index23++];
																var _g269 = { value : access41[key133], key : key133};
																var key134 = _g269.key;
																var value33 = _g269.value;
																var key135 = key134;
																var oldValue45 = null;
																if(key134 != "key") {
																	if(StringTools.startsWith(key134,"on")) {
																		var event45 = HxOverrides.substr(key134,2,null).toLowerCase();
																		if(oldValue45 != null) {
																			node57.removeEventListener(event45,oldValue45);
																		}
																		if(value33 != null) {
																			node57.addEventListener(event45,value33);
																		}
																	} else if(!isSvg5 && key134 != "list" && Reflect.getProperty(node57,key134) != null) {
																		Reflect.setProperty(node57,key134,value33 == null ? "" : value33);
																	} else if(value33 == null || value33 == false) {
																		node57.removeAttribute(key134);
																	} else {
																		if(key134 == "className") {
																			key135 = "class";
																		}
																		if(key135 == "htmlFor") {
																			key135 = "for";
																		}
																		node57.setAttribute(key135,value33);
																	}
																}
															}
															var _g162 = 0;
															var _g270 = child21.children;
															while(_g162 < _g270.length) node57.appendChild(pilot_Differ.createNode(_g270[_g162++],isSvg5));
															child21.node = node57;
															if(child21.hooks.attach != null && child21.node != null) {
																child21.hooks.attach(child21);
															}
															node56.appendChild(node57);
														}
														child20.node = node56;
														if(child20.hooks.attach != null && child20.node != null) {
															child20.hooks.attach(child20);
														}
														node55.appendChild(node56);
													}
													vnode58.node = node55;
													if(vnode58.hooks.attach != null && vnode58.node != null) {
														vnode58.hooks.attach(vnode58);
													}
													oldVChild5 = oldVChildren5[oldHead5];
													node49.insertBefore(node55,oldVChild5 != null ? oldVChild5.node : null);
												}
											} else if(newHead5 > newTail5) {
												while(oldHead5 <= oldTail5) {
													var vnode59 = oldVChildren5[oldHead5++];
													if(vnode59.hooks.detach != null) {
														vnode59.hooks.detach();
													}
													node49.removeChild(vnode59.node);
												}
											} else {
												var keyed5 = { };
												var newKeyed5 = { };
												var i5 = oldHead5;
												while(i5 <= oldTail5) {
													oldKey5 = oldVChildren5[i5].key;
													if(oldKey5 != null) {
														keyed5[oldKey5] = oldVChildren5[i5];
													}
													++i5;
												}
												while(newHead5 <= newTail5) {
													oldVChild5 = oldVChildren5[oldHead5];
													var vnode60 = oldVChild5;
													oldKey5 = vnode60 == null ? null : vnode60.key;
													var vnode61 = newVChildren5[newHead5];
													newKey5 = vnode61 == null ? null : vnode61.key;
													var node58;
													if(newKeyed5[oldKey5] == null) {
														if(newKey5 != null) {
															var vnode62 = oldVChildren5[oldHead5 + 1];
															node58 = newKey5 == (vnode62 == null ? null : vnode62.key);
														} else {
															node58 = false;
														}
													} else {
														node58 = true;
													}
													if(node58) {
														if(oldKey5 == null) {
															if(oldVChild5.hooks.detach != null) {
																oldVChild5.hooks.detach();
															}
															node49.removeChild(oldVChild5.node);
														}
														++oldHead5;
														continue;
													}
													if(newKey5 == null || tmpVChild.type == pilot_VNodeType.VNodeRecycled) {
														if(oldKey5 == null) {
															pilot_Differ.patchNode(node49,oldVChild5 != null ? oldVChild5.node : null,oldVChild5,newVChildren5[newHead5],isSvg5);
															++newHead5;
														}
														++oldHead5;
													} else {
														if(oldKey5 == newKey5) {
															pilot_Differ.patchNode(node49,oldVChild5.node,oldVChild5,newVChildren5[newHead5],isSvg5);
															newKeyed5[newKey5] = true;
															++oldHead5;
														} else {
															tmpVChild5 = keyed5[newKey5];
															if(tmpVChild5 != null) {
																pilot_Differ.patchNode(node49,node49.insertBefore(tmpVChild5.node,oldVChild5 != null ? oldVChild5.node : null),tmpVChild5,newVChildren5[newHead5],isSvg5);
																newKeyed5[newKey5] = true;
															} else {
																pilot_Differ.patchNode(node49,oldVChild5 != null ? oldVChild5.node : null,null,newVChildren5[newHead5],isSvg5);
															}
														}
														++newHead5;
													}
												}
												while(oldHead5 <= oldTail5) {
													oldVChild5 = oldVChildren5[oldHead5++];
													var vnode63 = oldVChild5;
													if((vnode63 == null ? null : vnode63.key) == null) {
														if(oldVChild5.hooks.detach != null) {
															oldVChild5.hooks.detach();
														}
														node49.removeChild(oldVChild5.node);
													}
												}
												var _g_keys22 = Reflect.fields(keyed5);
												var _g_index22 = 0;
												while(_g_index22 < _g_keys22.length) {
													var key136 = _g_keys22[_g_index22++];
													var _g163 = { value : keyed5[key136], key : key136};
													var vnode64 = _g163.value;
													if(newKeyed5[_g163.key] == null) {
														if(vnode64.hooks.detach != null) {
															vnode64.hooks.detach();
														}
														node49.removeChild(vnode64.node);
													}
												}
											}
										}
									}
									newVNode4.node = node49;
									newKeyed2[newKey] = true;
								} else {
									var node59 = oldVChild != null ? oldVChild.node : null;
									var newVNode5 = newVChildren[newHead];
									var isSvg6 = isSvg;
									if(null != newVNode5) {
										var node60;
										var _g57 = newVNode5.type;
										if(_g57 == null) {
											node60 = window.document.createElement(newVNode5.name);
										} else {
											switch(_g57._hx_index) {
											case 0:
												node60 = isSvg6 || newVNode5.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",newVNode5.name) : window.document.createElement(newVNode5.name);
												break;
											case 1:
												node60 = window.document.createTextNode(newVNode5.name);
												break;
											case 3:
												node60 = window.document.createDocumentFragment();
												break;
											default:
												node60 = window.document.createElement(newVNode5.name);
											}
										}
										var access42 = newVNode5.props;
										var _g1_keys24 = Reflect.fields(access42);
										var _g1_index24 = 0;
										while(_g1_index24 < _g1_keys24.length) {
											var key137 = _g1_keys24[_g1_index24++];
											var _g271 = { value : access42[key137], key : key137};
											var key138 = _g271.key;
											var value34 = _g271.value;
											var key139 = key138;
											var oldValue46 = null;
											if(key138 != "key") {
												if(StringTools.startsWith(key138,"on")) {
													var event46 = HxOverrides.substr(key138,2,null).toLowerCase();
													if(oldValue46 != null) {
														node60.removeEventListener(event46,oldValue46);
													}
													if(value34 != null) {
														node60.addEventListener(event46,value34);
													}
												} else if(!isSvg6 && key138 != "list" && Reflect.getProperty(node60,key138) != null) {
													Reflect.setProperty(node60,key138,value34 == null ? "" : value34);
												} else if(value34 == null || value34 == false) {
													node60.removeAttribute(key138);
												} else {
													if(key138 == "className") {
														key139 = "class";
													}
													if(key139 == "htmlFor") {
														key139 = "for";
													}
													node60.setAttribute(key139,value34);
												}
											}
										}
										var _g164 = 0;
										var _g272 = newVNode5.children;
										while(_g164 < _g272.length) {
											var child22 = _g272[_g164];
											++_g164;
											var node61;
											var _g58 = child22.type;
											if(_g58 == null) {
												node61 = window.document.createElement(child22.name);
											} else {
												switch(_g58._hx_index) {
												case 0:
													node61 = isSvg6 || child22.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child22.name) : window.document.createElement(child22.name);
													break;
												case 1:
													node61 = window.document.createTextNode(child22.name);
													break;
												case 3:
													node61 = window.document.createDocumentFragment();
													break;
												default:
													node61 = window.document.createElement(child22.name);
												}
											}
											var _g165 = new haxe_iterators_DynamicAccessKeyValueIterator(child22.props);
											while(_g165.index < _g165.keys.length) {
												var key140 = _g165.keys[_g165.index++];
												var _g273 = { value : _g165.access[key140], key : key140};
												var key141 = _g273.key;
												var value35 = _g273.value;
												var key142 = key141;
												var oldValue47 = null;
												if(key141 != "key") {
													if(StringTools.startsWith(key141,"on")) {
														var event47 = HxOverrides.substr(key141,2,null).toLowerCase();
														if(oldValue47 != null) {
															node61.removeEventListener(event47,oldValue47);
														}
														if(value35 != null) {
															node61.addEventListener(event47,value35);
														}
													} else if(!isSvg6 && key141 != "list" && Reflect.getProperty(node61,key141) != null) {
														Reflect.setProperty(node61,key141,value35 == null ? "" : value35);
													} else if(value35 == null || value35 == false) {
														node61.removeAttribute(key141);
													} else {
														if(key141 == "className") {
															key142 = "class";
														}
														if(key142 == "htmlFor") {
															key142 = "for";
														}
														node61.setAttribute(key142,value35);
													}
												}
											}
											var _g166 = 0;
											var _g274 = child22.children;
											while(_g166 < _g274.length) {
												var child23 = _g274[_g166];
												++_g166;
												var node62;
												var _g59 = child23.type;
												if(_g59 == null) {
													node62 = window.document.createElement(child23.name);
												} else {
													switch(_g59._hx_index) {
													case 0:
														node62 = isSvg6 || child23.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child23.name) : window.document.createElement(child23.name);
														break;
													case 1:
														node62 = window.document.createTextNode(child23.name);
														break;
													case 3:
														node62 = window.document.createDocumentFragment();
														break;
													default:
														node62 = window.document.createElement(child23.name);
													}
												}
												var access43 = child23.props;
												var _g1_keys25 = Reflect.fields(access43);
												var _g1_index25 = 0;
												while(_g1_index25 < _g1_keys25.length) {
													var key143 = _g1_keys25[_g1_index25++];
													var _g275 = { value : access43[key143], key : key143};
													var key144 = _g275.key;
													var value36 = _g275.value;
													var key145 = key144;
													var oldValue48 = null;
													if(key144 != "key") {
														if(StringTools.startsWith(key144,"on")) {
															var event48 = HxOverrides.substr(key144,2,null).toLowerCase();
															if(oldValue48 != null) {
																node62.removeEventListener(event48,oldValue48);
															}
															if(value36 != null) {
																node62.addEventListener(event48,value36);
															}
														} else if(!isSvg6 && key144 != "list" && Reflect.getProperty(node62,key144) != null) {
															Reflect.setProperty(node62,key144,value36 == null ? "" : value36);
														} else if(value36 == null || value36 == false) {
															node62.removeAttribute(key144);
														} else {
															if(key144 == "className") {
																key145 = "class";
															}
															if(key145 == "htmlFor") {
																key145 = "for";
															}
															node62.setAttribute(key145,value36);
														}
													}
												}
												var _g167 = 0;
												var _g276 = child23.children;
												while(_g167 < _g276.length) node62.appendChild(pilot_Differ.createNode(_g276[_g167++],isSvg6));
												child23.node = node62;
												if(child23.hooks.attach != null && child23.node != null) {
													child23.hooks.attach(child23);
												}
												node61.appendChild(node62);
											}
											child22.node = node61;
											if(child22.hooks.attach != null && child22.node != null) {
												child22.hooks.attach(child22);
											}
											node60.appendChild(node61);
										}
										newVNode5.node = node60;
										if(newVNode5.hooks.attach != null && newVNode5.node != null) {
											newVNode5.hooks.attach(newVNode5);
										}
										node59 = node1.insertBefore(node60,node59);
									}
									newVNode5.node = node59;
								}
							}
							++newHead;
						}
					}
					while(oldHead <= oldTail) {
						oldVChild = oldVChildren[oldHead++];
						var vnode65 = oldVChild;
						if((vnode65 == null ? null : vnode65.key) == null) {
							if(oldVChild.hooks.detach != null) {
								oldVChild.hooks.detach();
							}
							node1.removeChild(oldVChild.node);
						}
					}
					var _g_keys23 = Reflect.fields(keyed2);
					var _g_index23 = 0;
					while(_g_index23 < _g_keys23.length) {
						var key146 = _g_keys23[_g_index23++];
						var _g168 = { value : keyed2[key146], key : key146};
						var vnode66 = _g168.value;
						if(newKeyed2[_g168.key] == null) {
							if(vnode66.hooks.detach != null) {
								vnode66.hooks.detach();
							}
							node1.removeChild(vnode66.node);
						}
					}
				}
			}
		}
		vnode.node = node1;
		node = node1;
		node["__vnode"] = vnode;
	}
	getTodos() {
		return this.todos;
	}
	addTodo(todo1) {
		this.todos.push(todo1);
		this.update();
	}
	removeTodo(todo1) {
		HxOverrides.remove(this.todos,todo1);
		this.update();
	}
	setFilter(filter) {
		this.filter = filter;
		this.update();
	}
	markAllComplete() {
		var _g = 0;
		var _g1;
		if(this._visibleTodos != null) {
			_g1 = this._visibleTodos;
		} else {
			var filtered = this.todos.slice();
			filtered.reverse();
			var _g11;
			switch(this.filter._hx_index) {
			case 0:
				_g11 = filtered;
				break;
			case 1:
				_g11 = filtered.filter(function(todo1) {
					return todo1.complete;
				});
				break;
			case 2:
				_g11 = filtered.filter(function(todo2) {
					return !todo2.complete;
				});
				break;
			}
			this._visibleTodos = _g11;
			_g1 = this._visibleTodos;
		}
		while(_g < _g1.length) _g1[_g++].complete = true;
		this.update();
	}
	markAllPending() {
		var _g = 0;
		var _g1;
		if(this._visibleTodos != null) {
			_g1 = this._visibleTodos;
		} else {
			var filtered = this.todos.slice();
			filtered.reverse();
			var _g11;
			switch(this.filter._hx_index) {
			case 0:
				_g11 = filtered;
				break;
			case 1:
				_g11 = filtered.filter(function(todo1) {
					return todo1.complete;
				});
				break;
			case 2:
				_g11 = filtered.filter(function(todo2) {
					return !todo2.complete;
				});
				break;
			}
			this._visibleTodos = _g11;
			_g1 = this._visibleTodos;
		}
		while(_g < _g1.length) _g1[_g++].complete = false;
		this.update();
	}
	markComplete(todo1) {
		if(todo1.complete) {
			return;
		}
		todo1.complete = true;
		this.update();
	}
	markPending(todo1) {
		if(!todo1.complete) {
			return;
		}
		todo1.complete = false;
		this.update();
	}
	clearCompleted() {
		var toRemove;
		if(this._visibleTodos != null) {
			toRemove = this._visibleTodos;
		} else {
			var filtered = this.todos.slice();
			filtered.reverse();
			var toRemove1;
			switch(this.filter._hx_index) {
			case 0:
				toRemove1 = filtered;
				break;
			case 1:
				toRemove1 = filtered.filter(function(todo1) {
					return todo1.complete;
				});
				break;
			case 2:
				toRemove1 = filtered.filter(function(todo2) {
					return !todo2.complete;
				});
				break;
			}
			this._visibleTodos = toRemove1;
			toRemove = this._visibleTodos;
		}
		var toRemove2 = toRemove.filter(function(t) {
			return t.complete;
		});
		if(toRemove2.length == 0) {
			return;
		}
		var _g = 0;
		while(_g < toRemove2.length) HxOverrides.remove(this.todos,toRemove2[_g++]);
		this.update();
	}
}
todo_data_Store.__name__ = true;
Object.assign(todo_data_Store.prototype, {
	__properties__: {get_allSelected: "get_allSelected"}
});
class todo_data_Todo {
	constructor(content) {
		this.complete = false;
		this.id = todo_data_Todo.ids++;
		this.content = content;
	}
}
todo_data_Todo.__name__ = true;
var todo_data_VisibleTodos = $hxEnums["todo.data.VisibleTodos"] = { __ename__ : true, __constructs__ : ["VisibleAll","VisibleCompleted","VisiblePending"]
	,VisibleAll: {_hx_index:0,__enum__:"todo.data.VisibleTodos",toString:$estr}
	,VisibleCompleted: {_hx_index:1,__enum__:"todo.data.VisibleTodos",toString:$estr}
	,VisiblePending: {_hx_index:2,__enum__:"todo.data.VisibleTodos",toString:$estr}
};
class todo_ui_SiteFooter extends pilot_StatelessWidget {
	constructor(props) {
		super();
		this._pilot_props = { };
		this._pilot_props.store = props.store;
	}
	build() {
		var _gthis = this;
		var children = [this.remaining()];
		var impl = { name : "span", props : { className : "_c_RUqYLLx4H3VcZSmIHqoe"}, children : children != null ? children : []};
		if(impl.type == null) {
			impl.type = pilot_VNodeType.VNodeElement;
		}
		if(impl.children == null) {
			impl.children = [];
		}
		if(Object.prototype.hasOwnProperty.call(impl.props,"key")) {
			impl.key = Reflect.field(impl.props,"key");
			Reflect.deleteField(impl.props,"key");
		}
		if(impl.hooks == null) {
			impl.hooks = { };
		}
		var props = { href : "#all", className : this._pilot_props.store.filter == todo_data_VisibleTodos.VisibleAll ? "filter selected" : "filter", onClick : function(e) {
			_gthis.setFilter(e,todo_data_VisibleTodos.VisibleAll);
			return;
		}};
		var impl1 = { name : "All", props : { }, type : pilot_VNodeType.VNodeText, node : null};
		if(impl1.type == null) {
			impl1.type = pilot_VNodeType.VNodeElement;
		}
		if(impl1.children == null) {
			impl1.children = [];
		}
		if(Object.prototype.hasOwnProperty.call(impl1.props,"key")) {
			impl1.key = Reflect.field(impl1.props,"key");
			Reflect.deleteField(impl1.props,"key");
		}
		if(impl1.hooks == null) {
			impl1.hooks = { };
		}
		var children1 = [impl1];
		var impl2 = { name : "a", props : props, children : children1 != null ? children1 : []};
		if(impl2.type == null) {
			impl2.type = pilot_VNodeType.VNodeElement;
		}
		if(impl2.children == null) {
			impl2.children = [];
		}
		if(Object.prototype.hasOwnProperty.call(impl2.props,"key")) {
			impl2.key = Reflect.field(impl2.props,"key");
			Reflect.deleteField(impl2.props,"key");
		}
		if(impl2.hooks == null) {
			impl2.hooks = { };
		}
		var children2 = [impl2];
		var impl3 = { name : "li", props : { }, children : children2 != null ? children2 : []};
		if(impl3.type == null) {
			impl3.type = pilot_VNodeType.VNodeElement;
		}
		if(impl3.children == null) {
			impl3.children = [];
		}
		if(Object.prototype.hasOwnProperty.call(impl3.props,"key")) {
			impl3.key = Reflect.field(impl3.props,"key");
			Reflect.deleteField(impl3.props,"key");
		}
		if(impl3.hooks == null) {
			impl3.hooks = { };
		}
		var props1 = { href : "#pending", className : this._pilot_props.store.filter == todo_data_VisibleTodos.VisiblePending ? "filter selected" : "filter", onClick : function(e1) {
			_gthis.setFilter(e1,todo_data_VisibleTodos.VisiblePending);
			return;
		}};
		var impl4 = { name : "Pending", props : { }, type : pilot_VNodeType.VNodeText, node : null};
		if(impl4.type == null) {
			impl4.type = pilot_VNodeType.VNodeElement;
		}
		if(impl4.children == null) {
			impl4.children = [];
		}
		if(Object.prototype.hasOwnProperty.call(impl4.props,"key")) {
			impl4.key = Reflect.field(impl4.props,"key");
			Reflect.deleteField(impl4.props,"key");
		}
		if(impl4.hooks == null) {
			impl4.hooks = { };
		}
		var children3 = [impl4];
		var impl5 = { name : "a", props : props1, children : children3 != null ? children3 : []};
		if(impl5.type == null) {
			impl5.type = pilot_VNodeType.VNodeElement;
		}
		if(impl5.children == null) {
			impl5.children = [];
		}
		if(Object.prototype.hasOwnProperty.call(impl5.props,"key")) {
			impl5.key = Reflect.field(impl5.props,"key");
			Reflect.deleteField(impl5.props,"key");
		}
		if(impl5.hooks == null) {
			impl5.hooks = { };
		}
		var children4 = [impl5];
		var impl6 = { name : "li", props : { }, children : children4 != null ? children4 : []};
		if(impl6.type == null) {
			impl6.type = pilot_VNodeType.VNodeElement;
		}
		if(impl6.children == null) {
			impl6.children = [];
		}
		if(Object.prototype.hasOwnProperty.call(impl6.props,"key")) {
			impl6.key = Reflect.field(impl6.props,"key");
			Reflect.deleteField(impl6.props,"key");
		}
		if(impl6.hooks == null) {
			impl6.hooks = { };
		}
		var props2 = { href : "#pending", className : this._pilot_props.store.filter == todo_data_VisibleTodos.VisibleCompleted ? "filter selected" : "filter", onClick : function(e2) {
			_gthis.setFilter(e2,todo_data_VisibleTodos.VisibleCompleted);
			return;
		}};
		var impl7 = { name : "Complete", props : { }, type : pilot_VNodeType.VNodeText, node : null};
		if(impl7.type == null) {
			impl7.type = pilot_VNodeType.VNodeElement;
		}
		if(impl7.children == null) {
			impl7.children = [];
		}
		if(Object.prototype.hasOwnProperty.call(impl7.props,"key")) {
			impl7.key = Reflect.field(impl7.props,"key");
			Reflect.deleteField(impl7.props,"key");
		}
		if(impl7.hooks == null) {
			impl7.hooks = { };
		}
		var children5 = [impl7];
		var impl8 = { name : "a", props : props2, children : children5 != null ? children5 : []};
		if(impl8.type == null) {
			impl8.type = pilot_VNodeType.VNodeElement;
		}
		if(impl8.children == null) {
			impl8.children = [];
		}
		if(Object.prototype.hasOwnProperty.call(impl8.props,"key")) {
			impl8.key = Reflect.field(impl8.props,"key");
			Reflect.deleteField(impl8.props,"key");
		}
		if(impl8.hooks == null) {
			impl8.hooks = { };
		}
		var children6 = [impl8];
		var impl9 = { name : "li", props : { }, children : children6 != null ? children6 : []};
		if(impl9.type == null) {
			impl9.type = pilot_VNodeType.VNodeElement;
		}
		if(impl9.children == null) {
			impl9.children = [];
		}
		if(Object.prototype.hasOwnProperty.call(impl9.props,"key")) {
			impl9.key = Reflect.field(impl9.props,"key");
			Reflect.deleteField(impl9.props,"key");
		}
		if(impl9.hooks == null) {
			impl9.hooks = { };
		}
		var children7 = [impl3,impl6,impl9];
		var impl10 = { name : "ul", props : { className : "_c_m4hcbm4Jm6AetGZlfFNF"}, children : children7 != null ? children7 : []};
		if(impl10.type == null) {
			impl10.type = pilot_VNodeType.VNodeElement;
		}
		if(impl10.children == null) {
			impl10.children = [];
		}
		if(Object.prototype.hasOwnProperty.call(impl10.props,"key")) {
			impl10.key = Reflect.field(impl10.props,"key");
			Reflect.deleteField(impl10.props,"key");
		}
		if(impl10.hooks == null) {
			impl10.hooks = { };
		}
		var props3 = { className : "_c_ohPHWS3N53oTGYVzyMH4", onClick : function(e3) {
			_gthis._pilot_props.store.clearCompleted();
			return;
		}};
		var impl11 = { name : "Clear completed", props : { }, type : pilot_VNodeType.VNodeText, node : null};
		if(impl11.type == null) {
			impl11.type = pilot_VNodeType.VNodeElement;
		}
		if(impl11.children == null) {
			impl11.children = [];
		}
		if(Object.prototype.hasOwnProperty.call(impl11.props,"key")) {
			impl11.key = Reflect.field(impl11.props,"key");
			Reflect.deleteField(impl11.props,"key");
		}
		if(impl11.hooks == null) {
			impl11.hooks = { };
		}
		var children8 = [impl11];
		var impl12 = { name : "button", props : props3, children : children8 != null ? children8 : []};
		if(impl12.type == null) {
			impl12.type = pilot_VNodeType.VNodeElement;
		}
		if(impl12.children == null) {
			impl12.children = [];
		}
		if(Object.prototype.hasOwnProperty.call(impl12.props,"key")) {
			impl12.key = Reflect.field(impl12.props,"key");
			Reflect.deleteField(impl12.props,"key");
		}
		if(impl12.hooks == null) {
			impl12.hooks = { };
		}
		var children9 = [impl,impl10,impl12];
		var impl13 = { name : "footer", props : { className : "_c_YJtgfVcsqH6P1B3sAVjP"}, children : children9 != null ? children9 : []};
		if(impl13.type == null) {
			impl13.type = pilot_VNodeType.VNodeElement;
		}
		if(impl13.children == null) {
			impl13.children = [];
		}
		if(Object.prototype.hasOwnProperty.call(impl13.props,"key")) {
			impl13.key = Reflect.field(impl13.props,"key");
			Reflect.deleteField(impl13.props,"key");
		}
		if(impl13.hooks == null) {
			impl13.hooks = { };
		}
		return impl13;
	}
	remaining() {
		var _g = this._pilot_props.store.todos.filter(function(todo1) {
			return !todo1.complete;
		}).length;
		switch(_g) {
		case 0:
			var impl = { name : "No items left", props : { }, type : pilot_VNodeType.VNodeText, node : null};
			if(impl.type == null) {
				impl.type = pilot_VNodeType.VNodeElement;
			}
			if(impl.children == null) {
				impl.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl.props,"key")) {
				impl.key = Reflect.field(impl.props,"key");
				Reflect.deleteField(impl.props,"key");
			}
			if(impl.hooks == null) {
				impl.hooks = { };
			}
			return impl;
		case 1:
			var impl1 = { name : "1 item left", props : { }, type : pilot_VNodeType.VNodeText, node : null};
			if(impl1.type == null) {
				impl1.type = pilot_VNodeType.VNodeElement;
			}
			if(impl1.children == null) {
				impl1.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl1.props,"key")) {
				impl1.key = Reflect.field(impl1.props,"key");
				Reflect.deleteField(impl1.props,"key");
			}
			if(impl1.hooks == null) {
				impl1.hooks = { };
			}
			return impl1;
		default:
			var impl2 = { name : "" + _g + " items left", props : { }, type : pilot_VNodeType.VNodeText, node : null};
			if(impl2.type == null) {
				impl2.type = pilot_VNodeType.VNodeElement;
			}
			if(impl2.children == null) {
				impl2.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl2.props,"key")) {
				impl2.key = Reflect.field(impl2.props,"key");
				Reflect.deleteField(impl2.props,"key");
			}
			if(impl2.hooks == null) {
				impl2.hooks = { };
			}
			return impl2;
		}
	}
	setFilter(e,filter) {
		e.preventDefault();
		this._pilot_props.store.setFilter(filter);
	}
}
todo_ui_SiteFooter.__name__ = true;
class todo_ui_TodoInput extends pilot_StatelessWidget {
	constructor(props) {
		super();
		this._pilot_props = { };
		this._pilot_props.inputClass = props.inputClass == null ? "edit" : props.inputClass;
		this._pilot_props.placeholder = props.placeholder == null ? "What needs doing?" : props.placeholder;
		this._pilot_props.value = props.value;
		this._pilot_props.save = props.save;
		this._pilot_props.onAttached = props.onAttached;
		this._pilot_props.onDetached = props.onDetached;
	}
	build() {
		var _gthis = this;
		var props_compose = ["_c_H0AH3sqdFuCNzM2Ls3tP"];
		var impl = { name : "input", props : { className : this._pilot_props.inputClass, value : this._pilot_props.value, placeholder : this._pilot_props.placeholder, onKeyDown : function(e) {
			var input = e.target;
			if(e.key == "Enter") {
				_gthis._pilot_props.save(input.value);
				input.value = "";
				input.blur();
			}
			return;
		}}, children : []};
		if(impl.type == null) {
			impl.type = pilot_VNodeType.VNodeElement;
		}
		if(impl.children == null) {
			impl.children = [];
		}
		if(Object.prototype.hasOwnProperty.call(impl.props,"key")) {
			impl.key = Reflect.field(impl.props,"key");
			Reflect.deleteField(impl.props,"key");
		}
		if(impl.hooks == null) {
			impl.hooks = { };
		}
		var children = [impl];
		var impl1 = { name : "div", props : { className : "todo-input"}, children : children != null ? children : []};
		if(impl1.type == null) {
			impl1.type = pilot_VNodeType.VNodeElement;
		}
		if(impl1.children == null) {
			impl1.children = [];
		}
		if(Object.prototype.hasOwnProperty.call(impl1.props,"key")) {
			impl1.key = Reflect.field(impl1.props,"key");
			Reflect.deleteField(impl1.props,"key");
		}
		if(impl1.hooks == null) {
			impl1.hooks = { };
		}
		var props_child = impl1;
		if(Object.prototype.hasOwnProperty.call(props_child.props,"className")) {
			props_compose.push(Reflect.field(props_child.props,"className"));
		}
		var o = props_child.props;
		var _g = [];
		var _g1 = 0;
		while(_g1 < props_compose.length) {
			var s = props_compose[_g1];
			++_g1;
			if(s != null) {
				_g.push(StringTools.trim(s));
			}
		}
		var _g2 = [];
		var _g3 = 0;
		while(_g3 < _g.length) {
			var s1 = _g[_g3];
			++_g3;
			if(s1 != null && s1 != "") {
				_g2.push(s1);
			}
		}
		var _g4 = _g2.join(" ");
		o["className"] = _g4 == "" ? null : _g4;
		return props_child;
	}
	attached(vnode) {
		if(vnode.node != null) {
			vnode.node.focus();
		}
		if(this._pilot_props.onAttached != null) {
			this._pilot_props.onAttached();
		}
	}
	detached() {
		if(this._pilot_props.onDetached != null) {
			this._pilot_props.onDetached();
		}
	}
}
todo_ui_TodoInput.__name__ = true;
class todo_ui_TodoItem extends pilot_StatefulWidget {
	constructor(props) {
		super();
		this._pilot_props = { };
		this._pilot_props.todo = props.todo;
		this._pilot_props.store = props.store;
		this._pilot_props.editing = props.editing == null ? false : props.editing;
	}
	build() {
		var _gthis = this;
		var props_child;
		var props_compose = ["_c_hqjrs1s8NRpmtVUMRSek",this._pilot_props.todo.complete ? "_c_jBwncJKsLmzgLqsLOIxo" : null];
		switch(this._pilot_props.editing) {
		case false:
			var props = { key : this._pilot_props.todo.id, id : "Todo-" + this._pilot_props.todo.id, className : "todo-item", onDblClick : function(e) {
				return _gthis.set_editing(true);
			}};
			var props1 = { type : "_c_QpREos50tCHYFAIWzqZv", checked : this._pilot_props.todo.complete, onClick : function(e1) {
				switch(_gthis._pilot_props.todo.complete) {
				case false:
					_gthis._pilot_props.store.markComplete(_gthis._pilot_props.todo);
					break;
				case true:
					_gthis._pilot_props.store.markPending(_gthis._pilot_props.todo);
					break;
				}
				return;
			}};
			var impl = { name : "input", props : { type : "checkbox", className : props1.type, checked : props1.checked, id : props1.id, onClick : props1.onClick}, children : []};
			if(impl.type == null) {
				impl.type = pilot_VNodeType.VNodeElement;
			}
			if(impl.children == null) {
				impl.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl.props,"key")) {
				impl.key = Reflect.field(impl.props,"key");
				Reflect.deleteField(impl.props,"key");
			}
			if(impl.hooks == null) {
				impl.hooks = { };
			}
			var impl1 = { name : this._pilot_props.todo.content, props : { }, type : pilot_VNodeType.VNodeText, node : null};
			if(impl1.type == null) {
				impl1.type = pilot_VNodeType.VNodeElement;
			}
			if(impl1.children == null) {
				impl1.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl1.props,"key")) {
				impl1.key = Reflect.field(impl1.props,"key");
				Reflect.deleteField(impl1.props,"key");
			}
			if(impl1.hooks == null) {
				impl1.hooks = { };
			}
			var children = [impl1];
			var impl2 = { name : "label", props : { }, children : children != null ? children : []};
			if(impl2.type == null) {
				impl2.type = pilot_VNodeType.VNodeElement;
			}
			if(impl2.children == null) {
				impl2.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl2.props,"key")) {
				impl2.key = Reflect.field(impl2.props,"key");
				Reflect.deleteField(impl2.props,"key");
			}
			if(impl2.hooks == null) {
				impl2.hooks = { };
			}
			var impl3 = { name : "button", props : { className : "destroy", onClick : function(e2) {
				_gthis._pilot_props.store.removeTodo(_gthis._pilot_props.todo);
				return;
			}}, children : []};
			if(impl3.type == null) {
				impl3.type = pilot_VNodeType.VNodeElement;
			}
			if(impl3.children == null) {
				impl3.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl3.props,"key")) {
				impl3.key = Reflect.field(impl3.props,"key");
				Reflect.deleteField(impl3.props,"key");
			}
			if(impl3.hooks == null) {
				impl3.hooks = { };
			}
			var children1 = [impl,impl2,impl3];
			var impl4 = { name : "li", props : props, children : children1 != null ? children1 : []};
			if(impl4.type == null) {
				impl4.type = pilot_VNodeType.VNodeElement;
			}
			if(impl4.children == null) {
				impl4.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl4.props,"key")) {
				impl4.key = Reflect.field(impl4.props,"key");
				Reflect.deleteField(impl4.props,"key");
			}
			if(impl4.hooks == null) {
				impl4.hooks = { };
			}
			props_child = impl4;
			break;
		case true:
			var props2 = { className : "todo-item editing", key : this._pilot_props.todo.id, id : "Todo-" + this._pilot_props.todo.id, onClick : function(e3) {
				return e3.stopPropagation();
			}};
			var children2 = [new todo_ui_TodoInput({ value : this._pilot_props.todo.content, onAttached : function() {
				var clickOffListener = null;
				clickOffListener = function(e4) {
					console.log("example/todo/ui/TodoItem.hx:109:","click");
					_gthis.set_editing(false);
					window.removeEventListener("click",clickOffListener);
				};
				window.addEventListener("click",clickOffListener);
				return;
			}, save : function(value) {
				_gthis._pilot_props.todo.content = value;
				return _gthis.set_editing(false);
			}}).render()];
			var impl5 = { name : "li", props : props2, children : children2 != null ? children2 : []};
			if(impl5.type == null) {
				impl5.type = pilot_VNodeType.VNodeElement;
			}
			if(impl5.children == null) {
				impl5.children = [];
			}
			if(Object.prototype.hasOwnProperty.call(impl5.props,"key")) {
				impl5.key = Reflect.field(impl5.props,"key");
				Reflect.deleteField(impl5.props,"key");
			}
			if(impl5.hooks == null) {
				impl5.hooks = { };
			}
			props_child = impl5;
			break;
		}
		var this1 = props_child;
		if(Object.prototype.hasOwnProperty.call(this1.props,"className")) {
			props_compose.push(Reflect.field(this1.props,"className"));
		}
		var o = this1.props;
		var _g = [];
		var _g1 = 0;
		while(_g1 < props_compose.length) {
			var s = props_compose[_g1];
			++_g1;
			if(s != null) {
				_g.push(StringTools.trim(s));
			}
		}
		var _g2 = [];
		var _g3 = 0;
		while(_g3 < _g.length) {
			var s1 = _g[_g3];
			++_g3;
			if(s1 != null && s1 != "") {
				_g2.push(s1);
			}
		}
		var _g4 = _g2.join(" ");
		o["className"] = _g4 == "" ? null : _g4;
		return this1;
	}
	set_editing(value) {
		this._pilot_props.editing = value;
		if(this._pilot_vnode != null) {
			if(this._pilot_vnode.node != null) {
				var node = this._pilot_vnode.node;
				this._pilot_vnode = this.build();
				this._pilot_vnode.hooks.attach = $bind(this,this.attached);
				this._pilot_vnode.hooks.detach = $bind(this,this._pilot_detached);
				var vnode = this._pilot_vnode;
				var node1 = node;
				var oldVNode;
				if(Reflect.field(node,"__vnode") != null) {
					oldVNode = Reflect.field(node,"__vnode");
				} else if(node.nodeType == 3) {
					var impl = { name : node.nodeValue, props : { }, type : pilot_VNodeType.VNodeText, node : node};
					if(impl.type == null) {
						impl.type = pilot_VNodeType.VNodeElement;
					}
					if(impl.children == null) {
						impl.children = [];
					}
					if(Object.prototype.hasOwnProperty.call(impl.props,"key")) {
						impl.key = Reflect.field(impl.props,"key");
						Reflect.deleteField(impl.props,"key");
					}
					if(impl.hooks == null) {
						impl.hooks = { };
					}
					oldVNode = impl;
				} else {
					var impl1 = node.nodeName.toLowerCase();
					var _g = [];
					var _g1 = 0;
					var _g2 = node.childNodes;
					while(_g1 < _g2.length) {
						var n = _g2[_g1];
						++_g1;
						var impl2;
						if(n.nodeType == 3) {
							var impl3 = { name : n.nodeValue, props : { }, type : pilot_VNodeType.VNodeText, node : n};
							if(impl3.type == null) {
								impl3.type = pilot_VNodeType.VNodeElement;
							}
							if(impl3.children == null) {
								impl3.children = [];
							}
							if(Object.prototype.hasOwnProperty.call(impl3.props,"key")) {
								impl3.key = Reflect.field(impl3.props,"key");
								Reflect.deleteField(impl3.props,"key");
							}
							if(impl3.hooks == null) {
								impl3.hooks = { };
							}
							impl2 = impl3;
						} else {
							var impl4 = n.nodeName.toLowerCase();
							var _g3 = [];
							var _g11 = 0;
							var _g21 = n.childNodes;
							while(_g11 < _g21.length) {
								var n1 = _g21[_g11];
								++_g11;
								var impl5;
								if(n1.nodeType == 3) {
									var impl6 = { name : n1.nodeValue, props : { }, type : pilot_VNodeType.VNodeText, node : n1};
									if(impl6.type == null) {
										impl6.type = pilot_VNodeType.VNodeElement;
									}
									if(impl6.children == null) {
										impl6.children = [];
									}
									if(Object.prototype.hasOwnProperty.call(impl6.props,"key")) {
										impl6.key = Reflect.field(impl6.props,"key");
										Reflect.deleteField(impl6.props,"key");
									}
									if(impl6.hooks == null) {
										impl6.hooks = { };
									}
									impl5 = impl6;
								} else {
									var impl7 = n1.nodeName.toLowerCase();
									var _g4 = [];
									var _g12 = 0;
									var _g22 = n1.childNodes;
									while(_g12 < _g22.length) _g4.push(pilot_Differ.recycleNode(_g22[_g12++]));
									var impl8 = { name : impl7, props : { }, children : _g4, node : n1, type : pilot_VNodeType.VNodeRecycled, key : null};
									if(impl8.type == null) {
										impl8.type = pilot_VNodeType.VNodeElement;
									}
									if(impl8.children == null) {
										impl8.children = [];
									}
									if(Object.prototype.hasOwnProperty.call(impl8.props,"key")) {
										impl8.key = Reflect.field(impl8.props,"key");
										Reflect.deleteField(impl8.props,"key");
									}
									if(impl8.hooks == null) {
										impl8.hooks = { };
									}
									impl5 = impl8;
								}
								_g3.push(impl5);
							}
							var impl9 = { name : impl4, props : { }, children : _g3, node : n, type : pilot_VNodeType.VNodeRecycled, key : null};
							if(impl9.type == null) {
								impl9.type = pilot_VNodeType.VNodeElement;
							}
							if(impl9.children == null) {
								impl9.children = [];
							}
							if(Object.prototype.hasOwnProperty.call(impl9.props,"key")) {
								impl9.key = Reflect.field(impl9.props,"key");
								Reflect.deleteField(impl9.props,"key");
							}
							if(impl9.hooks == null) {
								impl9.hooks = { };
							}
							impl2 = impl9;
						}
						_g.push(impl2);
					}
					var impl10 = { name : impl1, props : { }, children : _g, node : node, type : pilot_VNodeType.VNodeRecycled, key : null};
					if(impl10.type == null) {
						impl10.type = pilot_VNodeType.VNodeElement;
					}
					if(impl10.children == null) {
						impl10.children = [];
					}
					if(Object.prototype.hasOwnProperty.call(impl10.props,"key")) {
						impl10.key = Reflect.field(impl10.props,"key");
						Reflect.deleteField(impl10.props,"key");
					}
					if(impl10.hooks == null) {
						impl10.hooks = { };
					}
					oldVNode = impl10;
				}
				var isSvg = false;
				if(oldVNode != vnode) {
					if(oldVNode != null && oldVNode.type == pilot_VNodeType.VNodeText && vnode.type == pilot_VNodeType.VNodeText) {
						if(oldVNode.name != vnode.name) {
							node1.nodeValue = vnode.name;
						}
					} else if(oldVNode == null || oldVNode.name != vnode.name) {
						var node2;
						var _g5 = vnode.type;
						if(_g5 == null) {
							node2 = window.document.createElement(vnode.name);
						} else {
							switch(_g5._hx_index) {
							case 0:
								node2 = vnode.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",vnode.name) : window.document.createElement(vnode.name);
								break;
							case 1:
								node2 = window.document.createTextNode(vnode.name);
								break;
							case 3:
								node2 = window.document.createDocumentFragment();
								break;
							default:
								node2 = window.document.createElement(vnode.name);
							}
						}
						var access = vnode.props;
						var _g1_keys = Reflect.fields(access);
						var _g1_index = 0;
						while(_g1_index < _g1_keys.length) {
							var key = _g1_keys[_g1_index++];
							var _g23 = { value : access[key], key : key};
							var key1 = _g23.key;
							var value1 = _g23.value;
							var key2 = key1;
							var oldValue = null;
							if(key1 != "key") {
								if(StringTools.startsWith(key1,"on")) {
									var event = HxOverrides.substr(key1,2,null).toLowerCase();
									if(oldValue != null) {
										node2.removeEventListener(event,oldValue);
									}
									if(value1 != null) {
										node2.addEventListener(event,value1);
									}
								} else if(key1 != "list" && Reflect.getProperty(node2,key1) != null) {
									Reflect.setProperty(node2,key1,value1 == null ? "" : value1);
								} else if(value1 == null || value1 == false) {
									node2.removeAttribute(key1);
								} else {
									if(key1 == "className") {
										key2 = "class";
									}
									if(key2 == "htmlFor") {
										key2 = "for";
									}
									node2.setAttribute(key2,value1);
								}
							}
						}
						var _g13 = 0;
						var _g24 = vnode.children;
						while(_g13 < _g24.length) {
							var child = _g24[_g13];
							++_g13;
							var node3;
							var _g6 = child.type;
							if(_g6 == null) {
								node3 = window.document.createElement(child.name);
							} else {
								switch(_g6._hx_index) {
								case 0:
									node3 = child.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child.name) : window.document.createElement(child.name);
									break;
								case 1:
									node3 = window.document.createTextNode(child.name);
									break;
								case 3:
									node3 = window.document.createDocumentFragment();
									break;
								default:
									node3 = window.document.createElement(child.name);
								}
							}
							var access1 = child.props;
							var _g1_keys1 = Reflect.fields(access1);
							var _g1_index1 = 0;
							while(_g1_index1 < _g1_keys1.length) {
								var key3 = _g1_keys1[_g1_index1++];
								var _g25 = { value : access1[key3], key : key3};
								var key4 = _g25.key;
								var value2 = _g25.value;
								var key5 = key4;
								var oldValue1 = null;
								if(key4 != "key") {
									if(StringTools.startsWith(key4,"on")) {
										var event1 = HxOverrides.substr(key4,2,null).toLowerCase();
										if(oldValue1 != null) {
											node3.removeEventListener(event1,oldValue1);
										}
										if(value2 != null) {
											node3.addEventListener(event1,value2);
										}
									} else if(key4 != "list" && Reflect.getProperty(node3,key4) != null) {
										Reflect.setProperty(node3,key4,value2 == null ? "" : value2);
									} else if(value2 == null || value2 == false) {
										node3.removeAttribute(key4);
									} else {
										if(key4 == "className") {
											key5 = "class";
										}
										if(key5 == "htmlFor") {
											key5 = "for";
										}
										node3.setAttribute(key5,value2);
									}
								}
							}
							var _g14 = 0;
							var _g26 = child.children;
							while(_g14 < _g26.length) node3.appendChild(pilot_Differ.createNode(_g26[_g14++],false));
							child.node = node3;
							if(child.hooks.attach != null && child.node != null) {
								child.hooks.attach(child);
							}
							node2.appendChild(node3);
						}
						vnode.node = node2;
						if(vnode.hooks.attach != null && vnode.node != null) {
							vnode.hooks.attach(vnode);
						}
						node1 = node.insertBefore(node2,node1);
						if(oldVNode != null && oldVNode.node != null) {
							if(oldVNode.hooks.detach != null) {
								oldVNode.hooks.detach();
							}
							node.removeChild(oldVNode.node);
						}
					} else {
						var tmpVChild;
						var oldVChild;
						var oldKey;
						var newKey;
						var oldVProps = oldVNode.props;
						var newVProps = vnode.props;
						var oldVChildren = oldVNode.children;
						var newVChildren = vnode.children;
						var oldHead = 0;
						var newHead = 0;
						var oldTail = oldVChildren.length - 1;
						var newTail = newVChildren.length - 1;
						isSvg = vnode.name == "svg";
						var out = { };
						var access2 = oldVProps;
						var _g_keys = Reflect.fields(access2);
						var _g_index = 0;
						while(_g_index < _g_keys.length) {
							var key6 = _g_keys[_g_index++];
							var _g15 = { value : access2[key6], key : key6};
							out[_g15.key] = _g15.value;
						}
						var access3 = newVProps;
						var _g_keys1 = Reflect.fields(access3);
						var _g_index1 = 0;
						while(_g_index1 < _g_keys1.length) {
							var key7 = _g_keys1[_g_index1++];
							var _g16 = { value : access3[key7], key : key7};
							out[_g16.key] = _g16.value;
						}
						var access4 = out;
						var _g_keys2 = Reflect.fields(access4);
						var _g_index2 = 0;
						while(_g_index2 < _g_keys2.length) {
							var key8 = _g_keys2[_g_index2++];
							var k = ({ value : access4[key8], key : key8}).key;
							switch(k) {
							case "checked":case "selected":case "value":
								if(Reflect.field(node1,k) != Reflect.field(newVProps,k)) {
									var key9 = k;
									var oldValue2 = Reflect.field(oldVProps,k);
									var newValue = Reflect.field(newVProps,k);
									if(k != "key") {
										if(StringTools.startsWith(k,"on")) {
											var event2 = HxOverrides.substr(k,2,null).toLowerCase();
											if(oldValue2 != null) {
												node1.removeEventListener(event2,oldValue2);
											}
											if(newValue != null) {
												node1.addEventListener(event2,newValue);
											}
										} else if(!isSvg && k != "list" && Reflect.getProperty(node1,k) != null) {
											Reflect.setProperty(node1,k,newValue == null ? "" : newValue);
										} else if(newValue == null || newValue == false) {
											node1.removeAttribute(k);
										} else {
											if(k == "className") {
												key9 = "class";
											}
											if(key9 == "htmlFor") {
												key9 = "for";
											}
											node1.setAttribute(key9,newValue);
										}
									}
								}
								break;
							default:
								if(Reflect.field(oldVProps,k) != Reflect.field(newVProps,k)) {
									var key10 = k;
									var oldValue3 = Reflect.field(oldVProps,k);
									var newValue1 = Reflect.field(newVProps,k);
									if(k != "key") {
										if(StringTools.startsWith(k,"on")) {
											var event3 = HxOverrides.substr(k,2,null).toLowerCase();
											if(oldValue3 != null) {
												node1.removeEventListener(event3,oldValue3);
											}
											if(newValue1 != null) {
												node1.addEventListener(event3,newValue1);
											}
										} else if(!isSvg && k != "list" && Reflect.getProperty(node1,k) != null) {
											Reflect.setProperty(node1,k,newValue1 == null ? "" : newValue1);
										} else if(newValue1 == null || newValue1 == false) {
											node1.removeAttribute(k);
										} else {
											if(k == "className") {
												key10 = "class";
											}
											if(key10 == "htmlFor") {
												key10 = "for";
											}
											node1.setAttribute(key10,newValue1);
										}
									}
								}
							}
						}
						while(newHead <= newTail && oldHead <= oldTail) {
							var node4;
							var vnode1 = oldVChildren[oldHead];
							oldKey = vnode1 == null ? null : vnode1.key;
							if(oldKey != null) {
								var vnode2 = newVChildren[newHead];
								node4 = oldKey != (vnode2 == null ? null : vnode2.key);
							} else {
								node4 = true;
							}
							if(node4) {
								break;
							}
							var node5 = oldVChildren[oldHead].node;
							var oldVNode1 = oldVChildren[oldHead++];
							var newVNode = newVChildren[newHead++];
							var isSvg1 = isSvg;
							if(oldVNode1 != newVNode) {
								if(oldVNode1 != null && oldVNode1.type == pilot_VNodeType.VNodeText && newVNode.type == pilot_VNodeType.VNodeText) {
									if(oldVNode1.name != newVNode.name) {
										node5.nodeValue = newVNode.name;
									}
								} else if(oldVNode1 == null || oldVNode1.name != newVNode.name) {
									var node6;
									var _g7 = newVNode.type;
									if(_g7 == null) {
										node6 = window.document.createElement(newVNode.name);
									} else {
										switch(_g7._hx_index) {
										case 0:
											node6 = isSvg1 || newVNode.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",newVNode.name) : window.document.createElement(newVNode.name);
											break;
										case 1:
											node6 = window.document.createTextNode(newVNode.name);
											break;
										case 3:
											node6 = window.document.createDocumentFragment();
											break;
										default:
											node6 = window.document.createElement(newVNode.name);
										}
									}
									var access5 = newVNode.props;
									var _g1_keys2 = Reflect.fields(access5);
									var _g1_index2 = 0;
									while(_g1_index2 < _g1_keys2.length) {
										var key11 = _g1_keys2[_g1_index2++];
										var _g27 = { value : access5[key11], key : key11};
										var key12 = _g27.key;
										var value3 = _g27.value;
										var key13 = key12;
										var oldValue4 = null;
										if(key12 != "key") {
											if(StringTools.startsWith(key12,"on")) {
												var event4 = HxOverrides.substr(key12,2,null).toLowerCase();
												if(oldValue4 != null) {
													node6.removeEventListener(event4,oldValue4);
												}
												if(value3 != null) {
													node6.addEventListener(event4,value3);
												}
											} else if(!isSvg1 && key12 != "list" && Reflect.getProperty(node6,key12) != null) {
												Reflect.setProperty(node6,key12,value3 == null ? "" : value3);
											} else if(value3 == null || value3 == false) {
												node6.removeAttribute(key12);
											} else {
												if(key12 == "className") {
													key13 = "class";
												}
												if(key13 == "htmlFor") {
													key13 = "for";
												}
												node6.setAttribute(key13,value3);
											}
										}
									}
									var _g17 = 0;
									var _g28 = newVNode.children;
									while(_g17 < _g28.length) {
										var child1 = _g28[_g17];
										++_g17;
										var node7;
										var _g8 = child1.type;
										if(_g8 == null) {
											node7 = window.document.createElement(child1.name);
										} else {
											switch(_g8._hx_index) {
											case 0:
												node7 = isSvg1 || child1.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child1.name) : window.document.createElement(child1.name);
												break;
											case 1:
												node7 = window.document.createTextNode(child1.name);
												break;
											case 3:
												node7 = window.document.createDocumentFragment();
												break;
											default:
												node7 = window.document.createElement(child1.name);
											}
										}
										var _g18 = new haxe_iterators_DynamicAccessKeyValueIterator(child1.props);
										while(_g18.index < _g18.keys.length) {
											var key14 = _g18.keys[_g18.index++];
											var _g29 = { value : _g18.access[key14], key : key14};
											var key15 = _g29.key;
											var value4 = _g29.value;
											var key16 = key15;
											var oldValue5 = null;
											if(key15 != "key") {
												if(StringTools.startsWith(key15,"on")) {
													var event5 = HxOverrides.substr(key15,2,null).toLowerCase();
													if(oldValue5 != null) {
														node7.removeEventListener(event5,oldValue5);
													}
													if(value4 != null) {
														node7.addEventListener(event5,value4);
													}
												} else if(!isSvg1 && key15 != "list" && Reflect.getProperty(node7,key15) != null) {
													Reflect.setProperty(node7,key15,value4 == null ? "" : value4);
												} else if(value4 == null || value4 == false) {
													node7.removeAttribute(key15);
												} else {
													if(key15 == "className") {
														key16 = "class";
													}
													if(key16 == "htmlFor") {
														key16 = "for";
													}
													node7.setAttribute(key16,value4);
												}
											}
										}
										var _g19 = 0;
										var _g210 = child1.children;
										while(_g19 < _g210.length) {
											var child2 = _g210[_g19];
											++_g19;
											var node8;
											var _g9 = child2.type;
											if(_g9 == null) {
												node8 = window.document.createElement(child2.name);
											} else {
												switch(_g9._hx_index) {
												case 0:
													node8 = isSvg1 || child2.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child2.name) : window.document.createElement(child2.name);
													break;
												case 1:
													node8 = window.document.createTextNode(child2.name);
													break;
												case 3:
													node8 = window.document.createDocumentFragment();
													break;
												default:
													node8 = window.document.createElement(child2.name);
												}
											}
											var access6 = child2.props;
											var _g1_keys3 = Reflect.fields(access6);
											var _g1_index3 = 0;
											while(_g1_index3 < _g1_keys3.length) {
												var key17 = _g1_keys3[_g1_index3++];
												var _g211 = { value : access6[key17], key : key17};
												var key18 = _g211.key;
												var value5 = _g211.value;
												var key19 = key18;
												var oldValue6 = null;
												if(key18 != "key") {
													if(StringTools.startsWith(key18,"on")) {
														var event6 = HxOverrides.substr(key18,2,null).toLowerCase();
														if(oldValue6 != null) {
															node8.removeEventListener(event6,oldValue6);
														}
														if(value5 != null) {
															node8.addEventListener(event6,value5);
														}
													} else if(!isSvg1 && key18 != "list" && Reflect.getProperty(node8,key18) != null) {
														Reflect.setProperty(node8,key18,value5 == null ? "" : value5);
													} else if(value5 == null || value5 == false) {
														node8.removeAttribute(key18);
													} else {
														if(key18 == "className") {
															key19 = "class";
														}
														if(key19 == "htmlFor") {
															key19 = "for";
														}
														node8.setAttribute(key19,value5);
													}
												}
											}
											var _g110 = 0;
											var _g212 = child2.children;
											while(_g110 < _g212.length) node8.appendChild(pilot_Differ.createNode(_g212[_g110++],isSvg1));
											child2.node = node8;
											if(child2.hooks.attach != null && child2.node != null) {
												child2.hooks.attach(child2);
											}
											node7.appendChild(node8);
										}
										child1.node = node7;
										if(child1.hooks.attach != null && child1.node != null) {
											child1.hooks.attach(child1);
										}
										node6.appendChild(node7);
									}
									newVNode.node = node6;
									if(newVNode.hooks.attach != null && newVNode.node != null) {
										newVNode.hooks.attach(newVNode);
									}
									node5 = node1.insertBefore(node6,node5);
									if(oldVNode1 != null && oldVNode1.node != null) {
										if(oldVNode1.hooks.detach != null) {
											oldVNode1.hooks.detach();
										}
										node1.removeChild(oldVNode1.node);
									}
								} else {
									var tmpVChild1;
									var oldVChild1;
									var oldKey1;
									var newKey1;
									var oldVProps1 = oldVNode1.props;
									var newVProps1 = newVNode.props;
									var oldVChildren1 = oldVNode1.children;
									var newVChildren1 = newVNode.children;
									var oldHead1 = 0;
									var newHead1 = 0;
									var oldTail1 = oldVChildren1.length - 1;
									var newTail1 = newVChildren1.length - 1;
									isSvg1 = isSvg1 || newVNode.name == "svg";
									var out1 = { };
									var access7 = oldVProps1;
									var _g_keys3 = Reflect.fields(access7);
									var _g_index3 = 0;
									while(_g_index3 < _g_keys3.length) {
										var key20 = _g_keys3[_g_index3++];
										var _g111 = { value : access7[key20], key : key20};
										out1[_g111.key] = _g111.value;
									}
									var access8 = newVProps1;
									var _g_keys4 = Reflect.fields(access8);
									var _g_index4 = 0;
									while(_g_index4 < _g_keys4.length) {
										var key21 = _g_keys4[_g_index4++];
										var _g112 = { value : access8[key21], key : key21};
										out1[_g112.key] = _g112.value;
									}
									var access9 = out1;
									var _g_keys5 = Reflect.fields(access9);
									var _g_index5 = 0;
									while(_g_index5 < _g_keys5.length) {
										var key22 = _g_keys5[_g_index5++];
										var k1 = ({ value : access9[key22], key : key22}).key;
										switch(k1) {
										case "checked":case "selected":case "value":
											if(Reflect.field(node5,k1) != Reflect.field(newVProps1,k1)) {
												var key23 = k1;
												var oldValue7 = Reflect.field(oldVProps1,k1);
												var newValue2 = Reflect.field(newVProps1,k1);
												if(k1 != "key") {
													if(StringTools.startsWith(k1,"on")) {
														var event7 = HxOverrides.substr(k1,2,null).toLowerCase();
														if(oldValue7 != null) {
															node5.removeEventListener(event7,oldValue7);
														}
														if(newValue2 != null) {
															node5.addEventListener(event7,newValue2);
														}
													} else if(!isSvg1 && k1 != "list" && Reflect.getProperty(node5,k1) != null) {
														Reflect.setProperty(node5,k1,newValue2 == null ? "" : newValue2);
													} else if(newValue2 == null || newValue2 == false) {
														node5.removeAttribute(k1);
													} else {
														if(k1 == "className") {
															key23 = "class";
														}
														if(key23 == "htmlFor") {
															key23 = "for";
														}
														node5.setAttribute(key23,newValue2);
													}
												}
											}
											break;
										default:
											if(Reflect.field(oldVProps1,k1) != Reflect.field(newVProps1,k1)) {
												var key24 = k1;
												var oldValue8 = Reflect.field(oldVProps1,k1);
												var newValue3 = Reflect.field(newVProps1,k1);
												if(k1 != "key") {
													if(StringTools.startsWith(k1,"on")) {
														var event8 = HxOverrides.substr(k1,2,null).toLowerCase();
														if(oldValue8 != null) {
															node5.removeEventListener(event8,oldValue8);
														}
														if(newValue3 != null) {
															node5.addEventListener(event8,newValue3);
														}
													} else if(!isSvg1 && k1 != "list" && Reflect.getProperty(node5,k1) != null) {
														Reflect.setProperty(node5,k1,newValue3 == null ? "" : newValue3);
													} else if(newValue3 == null || newValue3 == false) {
														node5.removeAttribute(k1);
													} else {
														if(k1 == "className") {
															key24 = "class";
														}
														if(key24 == "htmlFor") {
															key24 = "for";
														}
														node5.setAttribute(key24,newValue3);
													}
												}
											}
										}
									}
									while(newHead1 <= newTail1 && oldHead1 <= oldTail1) {
										var node9;
										var vnode3 = oldVChildren1[oldHead1];
										oldKey1 = vnode3 == null ? null : vnode3.key;
										if(oldKey1 != null) {
											var vnode4 = newVChildren1[newHead1];
											node9 = oldKey1 != (vnode4 == null ? null : vnode4.key);
										} else {
											node9 = true;
										}
										if(node9) {
											break;
										}
										pilot_Differ.patchNode(node5,oldVChildren1[oldHead1++].node,oldVChildren1[oldHead1 - 1],newVChildren1[newHead1++],isSvg1);
									}
									while(newHead1 <= newTail1 && oldHead1 <= oldTail1) {
										var node10;
										var vnode5 = oldVChildren1[oldTail1];
										oldKey1 = vnode5 == null ? null : vnode5.key;
										if(oldKey1 != null) {
											var vnode6 = newVChildren1[newTail1];
											node10 = oldKey1 != (vnode6 == null ? null : vnode6.key);
										} else {
											node10 = true;
										}
										if(node10) {
											break;
										}
										pilot_Differ.patchNode(node5,oldVChildren1[oldTail1--].node,oldVChildren1[oldTail1 + 1],newVChildren1[newTail1--],isSvg1);
									}
									if(oldHead1 > oldTail1) {
										while(newHead1 <= newTail1) {
											var vnode7 = newVChildren1[newHead1++];
											var node11;
											var _g10 = vnode7.type;
											if(_g10 == null) {
												node11 = window.document.createElement(vnode7.name);
											} else {
												switch(_g10._hx_index) {
												case 0:
													node11 = isSvg1 || vnode7.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",vnode7.name) : window.document.createElement(vnode7.name);
													break;
												case 1:
													node11 = window.document.createTextNode(vnode7.name);
													break;
												case 3:
													node11 = window.document.createDocumentFragment();
													break;
												default:
													node11 = window.document.createElement(vnode7.name);
												}
											}
											var access10 = vnode7.props;
											var _g1_keys4 = Reflect.fields(access10);
											var _g1_index4 = 0;
											while(_g1_index4 < _g1_keys4.length) {
												var key25 = _g1_keys4[_g1_index4++];
												var _g213 = { value : access10[key25], key : key25};
												var key26 = _g213.key;
												var value6 = _g213.value;
												var key27 = key26;
												var oldValue9 = null;
												if(key26 != "key") {
													if(StringTools.startsWith(key26,"on")) {
														var event9 = HxOverrides.substr(key26,2,null).toLowerCase();
														if(oldValue9 != null) {
															node11.removeEventListener(event9,oldValue9);
														}
														if(value6 != null) {
															node11.addEventListener(event9,value6);
														}
													} else if(!isSvg1 && key26 != "list" && Reflect.getProperty(node11,key26) != null) {
														Reflect.setProperty(node11,key26,value6 == null ? "" : value6);
													} else if(value6 == null || value6 == false) {
														node11.removeAttribute(key26);
													} else {
														if(key26 == "className") {
															key27 = "class";
														}
														if(key27 == "htmlFor") {
															key27 = "for";
														}
														node11.setAttribute(key27,value6);
													}
												}
											}
											var _g113 = 0;
											var _g214 = vnode7.children;
											while(_g113 < _g214.length) {
												var child3 = _g214[_g113];
												++_g113;
												var node12;
												var _g20 = child3.type;
												if(_g20 == null) {
													node12 = window.document.createElement(child3.name);
												} else {
													switch(_g20._hx_index) {
													case 0:
														node12 = isSvg1 || child3.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child3.name) : window.document.createElement(child3.name);
														break;
													case 1:
														node12 = window.document.createTextNode(child3.name);
														break;
													case 3:
														node12 = window.document.createDocumentFragment();
														break;
													default:
														node12 = window.document.createElement(child3.name);
													}
												}
												var _g114 = new haxe_iterators_DynamicAccessKeyValueIterator(child3.props);
												while(_g114.index < _g114.keys.length) {
													var key28 = _g114.keys[_g114.index++];
													var _g215 = { value : _g114.access[key28], key : key28};
													var key29 = _g215.key;
													var value7 = _g215.value;
													var key30 = key29;
													var oldValue10 = null;
													if(key29 != "key") {
														if(StringTools.startsWith(key29,"on")) {
															var event10 = HxOverrides.substr(key29,2,null).toLowerCase();
															if(oldValue10 != null) {
																node12.removeEventListener(event10,oldValue10);
															}
															if(value7 != null) {
																node12.addEventListener(event10,value7);
															}
														} else if(!isSvg1 && key29 != "list" && Reflect.getProperty(node12,key29) != null) {
															Reflect.setProperty(node12,key29,value7 == null ? "" : value7);
														} else if(value7 == null || value7 == false) {
															node12.removeAttribute(key29);
														} else {
															if(key29 == "className") {
																key30 = "class";
															}
															if(key30 == "htmlFor") {
																key30 = "for";
															}
															node12.setAttribute(key30,value7);
														}
													}
												}
												var _g115 = 0;
												var _g216 = child3.children;
												while(_g115 < _g216.length) {
													var child4 = _g216[_g115];
													++_g115;
													var node13;
													var _g30 = child4.type;
													if(_g30 == null) {
														node13 = window.document.createElement(child4.name);
													} else {
														switch(_g30._hx_index) {
														case 0:
															node13 = isSvg1 || child4.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child4.name) : window.document.createElement(child4.name);
															break;
														case 1:
															node13 = window.document.createTextNode(child4.name);
															break;
														case 3:
															node13 = window.document.createDocumentFragment();
															break;
														default:
															node13 = window.document.createElement(child4.name);
														}
													}
													var access11 = child4.props;
													var _g1_keys5 = Reflect.fields(access11);
													var _g1_index5 = 0;
													while(_g1_index5 < _g1_keys5.length) {
														var key31 = _g1_keys5[_g1_index5++];
														var _g217 = { value : access11[key31], key : key31};
														var key32 = _g217.key;
														var value8 = _g217.value;
														var key33 = key32;
														var oldValue11 = null;
														if(key32 != "key") {
															if(StringTools.startsWith(key32,"on")) {
																var event11 = HxOverrides.substr(key32,2,null).toLowerCase();
																if(oldValue11 != null) {
																	node13.removeEventListener(event11,oldValue11);
																}
																if(value8 != null) {
																	node13.addEventListener(event11,value8);
																}
															} else if(!isSvg1 && key32 != "list" && Reflect.getProperty(node13,key32) != null) {
																Reflect.setProperty(node13,key32,value8 == null ? "" : value8);
															} else if(value8 == null || value8 == false) {
																node13.removeAttribute(key32);
															} else {
																if(key32 == "className") {
																	key33 = "class";
																}
																if(key33 == "htmlFor") {
																	key33 = "for";
																}
																node13.setAttribute(key33,value8);
															}
														}
													}
													var _g116 = 0;
													var _g218 = child4.children;
													while(_g116 < _g218.length) node13.appendChild(pilot_Differ.createNode(_g218[_g116++],isSvg1));
													child4.node = node13;
													if(child4.hooks.attach != null && child4.node != null) {
														child4.hooks.attach(child4);
													}
													node12.appendChild(node13);
												}
												child3.node = node12;
												if(child3.hooks.attach != null && child3.node != null) {
													child3.hooks.attach(child3);
												}
												node11.appendChild(node12);
											}
											vnode7.node = node11;
											if(vnode7.hooks.attach != null && vnode7.node != null) {
												vnode7.hooks.attach(vnode7);
											}
											oldVChild1 = oldVChildren1[oldHead1];
											node5.insertBefore(node11,oldVChild1 != null ? oldVChild1.node : null);
										}
									} else if(newHead1 > newTail1) {
										while(oldHead1 <= oldTail1) {
											var vnode8 = oldVChildren1[oldHead1++];
											if(vnode8.hooks.detach != null) {
												vnode8.hooks.detach();
											}
											node5.removeChild(vnode8.node);
										}
									} else {
										var keyed = { };
										var newKeyed = { };
										var i = oldHead1;
										while(i <= oldTail1) {
											oldKey1 = oldVChildren1[i].key;
											if(oldKey1 != null) {
												keyed[oldKey1] = oldVChildren1[i];
											}
											++i;
										}
										while(newHead1 <= newTail1) {
											oldVChild1 = oldVChildren1[oldHead1];
											var vnode9 = oldVChild1;
											oldKey1 = vnode9 == null ? null : vnode9.key;
											var vnode10 = newVChildren1[newHead1];
											newKey1 = vnode10 == null ? null : vnode10.key;
											var node14;
											if(newKeyed[oldKey1] == null) {
												if(newKey1 != null) {
													var vnode11 = oldVChildren1[oldHead1 + 1];
													node14 = newKey1 == (vnode11 == null ? null : vnode11.key);
												} else {
													node14 = false;
												}
											} else {
												node14 = true;
											}
											if(node14) {
												if(oldKey1 == null) {
													if(oldVChild1.hooks.detach != null) {
														oldVChild1.hooks.detach();
													}
													node5.removeChild(oldVChild1.node);
												}
												++oldHead1;
												continue;
											}
											if(newKey1 == null || oldVNode1.type == pilot_VNodeType.VNodeRecycled) {
												if(oldKey1 == null) {
													pilot_Differ.patchNode(node5,oldVChild1 != null ? oldVChild1.node : null,oldVChild1,newVChildren1[newHead1],isSvg1);
													++newHead1;
												}
												++oldHead1;
											} else {
												if(oldKey1 == newKey1) {
													pilot_Differ.patchNode(node5,oldVChild1.node,oldVChild1,newVChildren1[newHead1],isSvg1);
													newKeyed[newKey1] = true;
													++oldHead1;
												} else {
													tmpVChild1 = keyed[newKey1];
													if(tmpVChild1 != null) {
														pilot_Differ.patchNode(node5,node5.insertBefore(tmpVChild1.node,oldVChild1 != null ? oldVChild1.node : null),tmpVChild1,newVChildren1[newHead1],isSvg1);
														newKeyed[newKey1] = true;
													} else {
														pilot_Differ.patchNode(node5,oldVChild1 != null ? oldVChild1.node : null,null,newVChildren1[newHead1],isSvg1);
													}
												}
												++newHead1;
											}
										}
										while(oldHead1 <= oldTail1) {
											oldVChild1 = oldVChildren1[oldHead1++];
											var vnode12 = oldVChild1;
											if((vnode12 == null ? null : vnode12.key) == null) {
												if(oldVChild1.hooks.detach != null) {
													oldVChild1.hooks.detach();
												}
												node5.removeChild(oldVChild1.node);
											}
										}
										var _g_keys6 = Reflect.fields(keyed);
										var _g_index6 = 0;
										while(_g_index6 < _g_keys6.length) {
											var key34 = _g_keys6[_g_index6++];
											var _g117 = { value : keyed[key34], key : key34};
											var vnode13 = _g117.value;
											if(newKeyed[_g117.key] == null) {
												if(vnode13.hooks.detach != null) {
													vnode13.hooks.detach();
												}
												node5.removeChild(vnode13.node);
											}
										}
									}
								}
							}
							newVNode.node = node5;
						}
						while(newHead <= newTail && oldHead <= oldTail) {
							var node15;
							var vnode14 = oldVChildren[oldTail];
							oldKey = vnode14 == null ? null : vnode14.key;
							if(oldKey != null) {
								var vnode15 = newVChildren[newTail];
								node15 = oldKey != (vnode15 == null ? null : vnode15.key);
							} else {
								node15 = true;
							}
							if(node15) {
								break;
							}
							var node16 = oldVChildren[oldTail].node;
							var oldVNode2 = oldVChildren[oldTail--];
							var newVNode1 = newVChildren[newTail--];
							var isSvg2 = isSvg;
							if(oldVNode2 != newVNode1) {
								if(oldVNode2 != null && oldVNode2.type == pilot_VNodeType.VNodeText && newVNode1.type == pilot_VNodeType.VNodeText) {
									if(oldVNode2.name != newVNode1.name) {
										node16.nodeValue = newVNode1.name;
									}
								} else if(oldVNode2 == null || oldVNode2.name != newVNode1.name) {
									var node17;
									var _g31 = newVNode1.type;
									if(_g31 == null) {
										node17 = window.document.createElement(newVNode1.name);
									} else {
										switch(_g31._hx_index) {
										case 0:
											node17 = isSvg2 || newVNode1.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",newVNode1.name) : window.document.createElement(newVNode1.name);
											break;
										case 1:
											node17 = window.document.createTextNode(newVNode1.name);
											break;
										case 3:
											node17 = window.document.createDocumentFragment();
											break;
										default:
											node17 = window.document.createElement(newVNode1.name);
										}
									}
									var access12 = newVNode1.props;
									var _g1_keys6 = Reflect.fields(access12);
									var _g1_index6 = 0;
									while(_g1_index6 < _g1_keys6.length) {
										var key35 = _g1_keys6[_g1_index6++];
										var _g219 = { value : access12[key35], key : key35};
										var key36 = _g219.key;
										var value9 = _g219.value;
										var key37 = key36;
										var oldValue12 = null;
										if(key36 != "key") {
											if(StringTools.startsWith(key36,"on")) {
												var event12 = HxOverrides.substr(key36,2,null).toLowerCase();
												if(oldValue12 != null) {
													node17.removeEventListener(event12,oldValue12);
												}
												if(value9 != null) {
													node17.addEventListener(event12,value9);
												}
											} else if(!isSvg2 && key36 != "list" && Reflect.getProperty(node17,key36) != null) {
												Reflect.setProperty(node17,key36,value9 == null ? "" : value9);
											} else if(value9 == null || value9 == false) {
												node17.removeAttribute(key36);
											} else {
												if(key36 == "className") {
													key37 = "class";
												}
												if(key37 == "htmlFor") {
													key37 = "for";
												}
												node17.setAttribute(key37,value9);
											}
										}
									}
									var _g118 = 0;
									var _g220 = newVNode1.children;
									while(_g118 < _g220.length) {
										var child5 = _g220[_g118];
										++_g118;
										var node18;
										var _g32 = child5.type;
										if(_g32 == null) {
											node18 = window.document.createElement(child5.name);
										} else {
											switch(_g32._hx_index) {
											case 0:
												node18 = isSvg2 || child5.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child5.name) : window.document.createElement(child5.name);
												break;
											case 1:
												node18 = window.document.createTextNode(child5.name);
												break;
											case 3:
												node18 = window.document.createDocumentFragment();
												break;
											default:
												node18 = window.document.createElement(child5.name);
											}
										}
										var _g119 = new haxe_iterators_DynamicAccessKeyValueIterator(child5.props);
										while(_g119.index < _g119.keys.length) {
											var key38 = _g119.keys[_g119.index++];
											var _g221 = { value : _g119.access[key38], key : key38};
											var key39 = _g221.key;
											var value10 = _g221.value;
											var key40 = key39;
											var oldValue13 = null;
											if(key39 != "key") {
												if(StringTools.startsWith(key39,"on")) {
													var event13 = HxOverrides.substr(key39,2,null).toLowerCase();
													if(oldValue13 != null) {
														node18.removeEventListener(event13,oldValue13);
													}
													if(value10 != null) {
														node18.addEventListener(event13,value10);
													}
												} else if(!isSvg2 && key39 != "list" && Reflect.getProperty(node18,key39) != null) {
													Reflect.setProperty(node18,key39,value10 == null ? "" : value10);
												} else if(value10 == null || value10 == false) {
													node18.removeAttribute(key39);
												} else {
													if(key39 == "className") {
														key40 = "class";
													}
													if(key40 == "htmlFor") {
														key40 = "for";
													}
													node18.setAttribute(key40,value10);
												}
											}
										}
										var _g120 = 0;
										var _g222 = child5.children;
										while(_g120 < _g222.length) {
											var child6 = _g222[_g120];
											++_g120;
											var node19;
											var _g33 = child6.type;
											if(_g33 == null) {
												node19 = window.document.createElement(child6.name);
											} else {
												switch(_g33._hx_index) {
												case 0:
													node19 = isSvg2 || child6.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child6.name) : window.document.createElement(child6.name);
													break;
												case 1:
													node19 = window.document.createTextNode(child6.name);
													break;
												case 3:
													node19 = window.document.createDocumentFragment();
													break;
												default:
													node19 = window.document.createElement(child6.name);
												}
											}
											var access13 = child6.props;
											var _g1_keys7 = Reflect.fields(access13);
											var _g1_index7 = 0;
											while(_g1_index7 < _g1_keys7.length) {
												var key41 = _g1_keys7[_g1_index7++];
												var _g223 = { value : access13[key41], key : key41};
												var key42 = _g223.key;
												var value11 = _g223.value;
												var key43 = key42;
												var oldValue14 = null;
												if(key42 != "key") {
													if(StringTools.startsWith(key42,"on")) {
														var event14 = HxOverrides.substr(key42,2,null).toLowerCase();
														if(oldValue14 != null) {
															node19.removeEventListener(event14,oldValue14);
														}
														if(value11 != null) {
															node19.addEventListener(event14,value11);
														}
													} else if(!isSvg2 && key42 != "list" && Reflect.getProperty(node19,key42) != null) {
														Reflect.setProperty(node19,key42,value11 == null ? "" : value11);
													} else if(value11 == null || value11 == false) {
														node19.removeAttribute(key42);
													} else {
														if(key42 == "className") {
															key43 = "class";
														}
														if(key43 == "htmlFor") {
															key43 = "for";
														}
														node19.setAttribute(key43,value11);
													}
												}
											}
											var _g121 = 0;
											var _g224 = child6.children;
											while(_g121 < _g224.length) node19.appendChild(pilot_Differ.createNode(_g224[_g121++],isSvg2));
											child6.node = node19;
											if(child6.hooks.attach != null && child6.node != null) {
												child6.hooks.attach(child6);
											}
											node18.appendChild(node19);
										}
										child5.node = node18;
										if(child5.hooks.attach != null && child5.node != null) {
											child5.hooks.attach(child5);
										}
										node17.appendChild(node18);
									}
									newVNode1.node = node17;
									if(newVNode1.hooks.attach != null && newVNode1.node != null) {
										newVNode1.hooks.attach(newVNode1);
									}
									node16 = node1.insertBefore(node17,node16);
									if(oldVNode2 != null && oldVNode2.node != null) {
										if(oldVNode2.hooks.detach != null) {
											oldVNode2.hooks.detach();
										}
										node1.removeChild(oldVNode2.node);
									}
								} else {
									var tmpVChild2;
									var oldVChild2;
									var oldKey2;
									var newKey2;
									var oldVProps2 = oldVNode2.props;
									var newVProps2 = newVNode1.props;
									var oldVChildren2 = oldVNode2.children;
									var newVChildren2 = newVNode1.children;
									var oldHead2 = 0;
									var newHead2 = 0;
									var oldTail2 = oldVChildren2.length - 1;
									var newTail2 = newVChildren2.length - 1;
									isSvg2 = isSvg2 || newVNode1.name == "svg";
									var out2 = { };
									var access14 = oldVProps2;
									var _g_keys7 = Reflect.fields(access14);
									var _g_index7 = 0;
									while(_g_index7 < _g_keys7.length) {
										var key44 = _g_keys7[_g_index7++];
										var _g122 = { value : access14[key44], key : key44};
										out2[_g122.key] = _g122.value;
									}
									var access15 = newVProps2;
									var _g_keys8 = Reflect.fields(access15);
									var _g_index8 = 0;
									while(_g_index8 < _g_keys8.length) {
										var key45 = _g_keys8[_g_index8++];
										var _g123 = { value : access15[key45], key : key45};
										out2[_g123.key] = _g123.value;
									}
									var access16 = out2;
									var _g_keys9 = Reflect.fields(access16);
									var _g_index9 = 0;
									while(_g_index9 < _g_keys9.length) {
										var key46 = _g_keys9[_g_index9++];
										var k2 = ({ value : access16[key46], key : key46}).key;
										switch(k2) {
										case "checked":case "selected":case "value":
											if(Reflect.field(node16,k2) != Reflect.field(newVProps2,k2)) {
												var key47 = k2;
												var oldValue15 = Reflect.field(oldVProps2,k2);
												var newValue4 = Reflect.field(newVProps2,k2);
												if(k2 != "key") {
													if(StringTools.startsWith(k2,"on")) {
														var event15 = HxOverrides.substr(k2,2,null).toLowerCase();
														if(oldValue15 != null) {
															node16.removeEventListener(event15,oldValue15);
														}
														if(newValue4 != null) {
															node16.addEventListener(event15,newValue4);
														}
													} else if(!isSvg2 && k2 != "list" && Reflect.getProperty(node16,k2) != null) {
														Reflect.setProperty(node16,k2,newValue4 == null ? "" : newValue4);
													} else if(newValue4 == null || newValue4 == false) {
														node16.removeAttribute(k2);
													} else {
														if(k2 == "className") {
															key47 = "class";
														}
														if(key47 == "htmlFor") {
															key47 = "for";
														}
														node16.setAttribute(key47,newValue4);
													}
												}
											}
											break;
										default:
											if(Reflect.field(oldVProps2,k2) != Reflect.field(newVProps2,k2)) {
												var key48 = k2;
												var oldValue16 = Reflect.field(oldVProps2,k2);
												var newValue5 = Reflect.field(newVProps2,k2);
												if(k2 != "key") {
													if(StringTools.startsWith(k2,"on")) {
														var event16 = HxOverrides.substr(k2,2,null).toLowerCase();
														if(oldValue16 != null) {
															node16.removeEventListener(event16,oldValue16);
														}
														if(newValue5 != null) {
															node16.addEventListener(event16,newValue5);
														}
													} else if(!isSvg2 && k2 != "list" && Reflect.getProperty(node16,k2) != null) {
														Reflect.setProperty(node16,k2,newValue5 == null ? "" : newValue5);
													} else if(newValue5 == null || newValue5 == false) {
														node16.removeAttribute(k2);
													} else {
														if(k2 == "className") {
															key48 = "class";
														}
														if(key48 == "htmlFor") {
															key48 = "for";
														}
														node16.setAttribute(key48,newValue5);
													}
												}
											}
										}
									}
									while(newHead2 <= newTail2 && oldHead2 <= oldTail2) {
										var node20;
										var vnode16 = oldVChildren2[oldHead2];
										oldKey2 = vnode16 == null ? null : vnode16.key;
										if(oldKey2 != null) {
											var vnode17 = newVChildren2[newHead2];
											node20 = oldKey2 != (vnode17 == null ? null : vnode17.key);
										} else {
											node20 = true;
										}
										if(node20) {
											break;
										}
										pilot_Differ.patchNode(node16,oldVChildren2[oldHead2++].node,oldVChildren2[oldHead2 - 1],newVChildren2[newHead2++],isSvg2);
									}
									while(newHead2 <= newTail2 && oldHead2 <= oldTail2) {
										var node21;
										var vnode18 = oldVChildren2[oldTail2];
										oldKey2 = vnode18 == null ? null : vnode18.key;
										if(oldKey2 != null) {
											var vnode19 = newVChildren2[newTail2];
											node21 = oldKey2 != (vnode19 == null ? null : vnode19.key);
										} else {
											node21 = true;
										}
										if(node21) {
											break;
										}
										pilot_Differ.patchNode(node16,oldVChildren2[oldTail2--].node,oldVChildren2[oldTail2 + 1],newVChildren2[newTail2--],isSvg2);
									}
									if(oldHead2 > oldTail2) {
										while(newHead2 <= newTail2) {
											var vnode20 = newVChildren2[newHead2++];
											var node22;
											var _g34 = vnode20.type;
											if(_g34 == null) {
												node22 = window.document.createElement(vnode20.name);
											} else {
												switch(_g34._hx_index) {
												case 0:
													node22 = isSvg2 || vnode20.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",vnode20.name) : window.document.createElement(vnode20.name);
													break;
												case 1:
													node22 = window.document.createTextNode(vnode20.name);
													break;
												case 3:
													node22 = window.document.createDocumentFragment();
													break;
												default:
													node22 = window.document.createElement(vnode20.name);
												}
											}
											var access17 = vnode20.props;
											var _g1_keys8 = Reflect.fields(access17);
											var _g1_index8 = 0;
											while(_g1_index8 < _g1_keys8.length) {
												var key49 = _g1_keys8[_g1_index8++];
												var _g225 = { value : access17[key49], key : key49};
												var key50 = _g225.key;
												var value12 = _g225.value;
												var key51 = key50;
												var oldValue17 = null;
												if(key50 != "key") {
													if(StringTools.startsWith(key50,"on")) {
														var event17 = HxOverrides.substr(key50,2,null).toLowerCase();
														if(oldValue17 != null) {
															node22.removeEventListener(event17,oldValue17);
														}
														if(value12 != null) {
															node22.addEventListener(event17,value12);
														}
													} else if(!isSvg2 && key50 != "list" && Reflect.getProperty(node22,key50) != null) {
														Reflect.setProperty(node22,key50,value12 == null ? "" : value12);
													} else if(value12 == null || value12 == false) {
														node22.removeAttribute(key50);
													} else {
														if(key50 == "className") {
															key51 = "class";
														}
														if(key51 == "htmlFor") {
															key51 = "for";
														}
														node22.setAttribute(key51,value12);
													}
												}
											}
											var _g124 = 0;
											var _g226 = vnode20.children;
											while(_g124 < _g226.length) {
												var child7 = _g226[_g124];
												++_g124;
												var node23;
												var _g35 = child7.type;
												if(_g35 == null) {
													node23 = window.document.createElement(child7.name);
												} else {
													switch(_g35._hx_index) {
													case 0:
														node23 = isSvg2 || child7.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child7.name) : window.document.createElement(child7.name);
														break;
													case 1:
														node23 = window.document.createTextNode(child7.name);
														break;
													case 3:
														node23 = window.document.createDocumentFragment();
														break;
													default:
														node23 = window.document.createElement(child7.name);
													}
												}
												var _g125 = new haxe_iterators_DynamicAccessKeyValueIterator(child7.props);
												while(_g125.index < _g125.keys.length) {
													var key52 = _g125.keys[_g125.index++];
													var _g227 = { value : _g125.access[key52], key : key52};
													var key53 = _g227.key;
													var value13 = _g227.value;
													var key54 = key53;
													var oldValue18 = null;
													if(key53 != "key") {
														if(StringTools.startsWith(key53,"on")) {
															var event18 = HxOverrides.substr(key53,2,null).toLowerCase();
															if(oldValue18 != null) {
																node23.removeEventListener(event18,oldValue18);
															}
															if(value13 != null) {
																node23.addEventListener(event18,value13);
															}
														} else if(!isSvg2 && key53 != "list" && Reflect.getProperty(node23,key53) != null) {
															Reflect.setProperty(node23,key53,value13 == null ? "" : value13);
														} else if(value13 == null || value13 == false) {
															node23.removeAttribute(key53);
														} else {
															if(key53 == "className") {
																key54 = "class";
															}
															if(key54 == "htmlFor") {
																key54 = "for";
															}
															node23.setAttribute(key54,value13);
														}
													}
												}
												var _g126 = 0;
												var _g228 = child7.children;
												while(_g126 < _g228.length) {
													var child8 = _g228[_g126];
													++_g126;
													var node24;
													var _g36 = child8.type;
													if(_g36 == null) {
														node24 = window.document.createElement(child8.name);
													} else {
														switch(_g36._hx_index) {
														case 0:
															node24 = isSvg2 || child8.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child8.name) : window.document.createElement(child8.name);
															break;
														case 1:
															node24 = window.document.createTextNode(child8.name);
															break;
														case 3:
															node24 = window.document.createDocumentFragment();
															break;
														default:
															node24 = window.document.createElement(child8.name);
														}
													}
													var access18 = child8.props;
													var _g1_keys9 = Reflect.fields(access18);
													var _g1_index9 = 0;
													while(_g1_index9 < _g1_keys9.length) {
														var key55 = _g1_keys9[_g1_index9++];
														var _g229 = { value : access18[key55], key : key55};
														var key56 = _g229.key;
														var value14 = _g229.value;
														var key57 = key56;
														var oldValue19 = null;
														if(key56 != "key") {
															if(StringTools.startsWith(key56,"on")) {
																var event19 = HxOverrides.substr(key56,2,null).toLowerCase();
																if(oldValue19 != null) {
																	node24.removeEventListener(event19,oldValue19);
																}
																if(value14 != null) {
																	node24.addEventListener(event19,value14);
																}
															} else if(!isSvg2 && key56 != "list" && Reflect.getProperty(node24,key56) != null) {
																Reflect.setProperty(node24,key56,value14 == null ? "" : value14);
															} else if(value14 == null || value14 == false) {
																node24.removeAttribute(key56);
															} else {
																if(key56 == "className") {
																	key57 = "class";
																}
																if(key57 == "htmlFor") {
																	key57 = "for";
																}
																node24.setAttribute(key57,value14);
															}
														}
													}
													var _g127 = 0;
													var _g230 = child8.children;
													while(_g127 < _g230.length) node24.appendChild(pilot_Differ.createNode(_g230[_g127++],isSvg2));
													child8.node = node24;
													if(child8.hooks.attach != null && child8.node != null) {
														child8.hooks.attach(child8);
													}
													node23.appendChild(node24);
												}
												child7.node = node23;
												if(child7.hooks.attach != null && child7.node != null) {
													child7.hooks.attach(child7);
												}
												node22.appendChild(node23);
											}
											vnode20.node = node22;
											if(vnode20.hooks.attach != null && vnode20.node != null) {
												vnode20.hooks.attach(vnode20);
											}
											oldVChild2 = oldVChildren2[oldHead2];
											node16.insertBefore(node22,oldVChild2 != null ? oldVChild2.node : null);
										}
									} else if(newHead2 > newTail2) {
										while(oldHead2 <= oldTail2) {
											var vnode21 = oldVChildren2[oldHead2++];
											if(vnode21.hooks.detach != null) {
												vnode21.hooks.detach();
											}
											node16.removeChild(vnode21.node);
										}
									} else {
										var keyed1 = { };
										var newKeyed1 = { };
										var i1 = oldHead2;
										while(i1 <= oldTail2) {
											oldKey2 = oldVChildren2[i1].key;
											if(oldKey2 != null) {
												keyed1[oldKey2] = oldVChildren2[i1];
											}
											++i1;
										}
										while(newHead2 <= newTail2) {
											oldVChild2 = oldVChildren2[oldHead2];
											var vnode22 = oldVChild2;
											oldKey2 = vnode22 == null ? null : vnode22.key;
											var vnode23 = newVChildren2[newHead2];
											newKey2 = vnode23 == null ? null : vnode23.key;
											var node25;
											if(newKeyed1[oldKey2] == null) {
												if(newKey2 != null) {
													var vnode24 = oldVChildren2[oldHead2 + 1];
													node25 = newKey2 == (vnode24 == null ? null : vnode24.key);
												} else {
													node25 = false;
												}
											} else {
												node25 = true;
											}
											if(node25) {
												if(oldKey2 == null) {
													if(oldVChild2.hooks.detach != null) {
														oldVChild2.hooks.detach();
													}
													node16.removeChild(oldVChild2.node);
												}
												++oldHead2;
												continue;
											}
											if(newKey2 == null || oldVNode2.type == pilot_VNodeType.VNodeRecycled) {
												if(oldKey2 == null) {
													pilot_Differ.patchNode(node16,oldVChild2 != null ? oldVChild2.node : null,oldVChild2,newVChildren2[newHead2],isSvg2);
													++newHead2;
												}
												++oldHead2;
											} else {
												if(oldKey2 == newKey2) {
													pilot_Differ.patchNode(node16,oldVChild2.node,oldVChild2,newVChildren2[newHead2],isSvg2);
													newKeyed1[newKey2] = true;
													++oldHead2;
												} else {
													tmpVChild2 = keyed1[newKey2];
													if(tmpVChild2 != null) {
														pilot_Differ.patchNode(node16,node16.insertBefore(tmpVChild2.node,oldVChild2 != null ? oldVChild2.node : null),tmpVChild2,newVChildren2[newHead2],isSvg2);
														newKeyed1[newKey2] = true;
													} else {
														pilot_Differ.patchNode(node16,oldVChild2 != null ? oldVChild2.node : null,null,newVChildren2[newHead2],isSvg2);
													}
												}
												++newHead2;
											}
										}
										while(oldHead2 <= oldTail2) {
											oldVChild2 = oldVChildren2[oldHead2++];
											var vnode25 = oldVChild2;
											if((vnode25 == null ? null : vnode25.key) == null) {
												if(oldVChild2.hooks.detach != null) {
													oldVChild2.hooks.detach();
												}
												node16.removeChild(oldVChild2.node);
											}
										}
										var _g_keys10 = Reflect.fields(keyed1);
										var _g_index10 = 0;
										while(_g_index10 < _g_keys10.length) {
											var key58 = _g_keys10[_g_index10++];
											var _g128 = { value : keyed1[key58], key : key58};
											var vnode26 = _g128.value;
											if(newKeyed1[_g128.key] == null) {
												if(vnode26.hooks.detach != null) {
													vnode26.hooks.detach();
												}
												node16.removeChild(vnode26.node);
											}
										}
									}
								}
							}
							newVNode1.node = node16;
						}
						if(oldHead > oldTail) {
							while(newHead <= newTail) {
								var vnode27 = newVChildren[newHead++];
								var node26;
								var _g37 = vnode27.type;
								if(_g37 == null) {
									node26 = window.document.createElement(vnode27.name);
								} else {
									switch(_g37._hx_index) {
									case 0:
										node26 = isSvg || vnode27.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",vnode27.name) : window.document.createElement(vnode27.name);
										break;
									case 1:
										node26 = window.document.createTextNode(vnode27.name);
										break;
									case 3:
										node26 = window.document.createDocumentFragment();
										break;
									default:
										node26 = window.document.createElement(vnode27.name);
									}
								}
								var access19 = vnode27.props;
								var _g1_keys10 = Reflect.fields(access19);
								var _g1_index10 = 0;
								while(_g1_index10 < _g1_keys10.length) {
									var key59 = _g1_keys10[_g1_index10++];
									var _g231 = { value : access19[key59], key : key59};
									var key60 = _g231.key;
									var value15 = _g231.value;
									var key61 = key60;
									var oldValue20 = null;
									if(key60 != "key") {
										if(StringTools.startsWith(key60,"on")) {
											var event20 = HxOverrides.substr(key60,2,null).toLowerCase();
											if(oldValue20 != null) {
												node26.removeEventListener(event20,oldValue20);
											}
											if(value15 != null) {
												node26.addEventListener(event20,value15);
											}
										} else if(!isSvg && key60 != "list" && Reflect.getProperty(node26,key60) != null) {
											Reflect.setProperty(node26,key60,value15 == null ? "" : value15);
										} else if(value15 == null || value15 == false) {
											node26.removeAttribute(key60);
										} else {
											if(key60 == "className") {
												key61 = "class";
											}
											if(key61 == "htmlFor") {
												key61 = "for";
											}
											node26.setAttribute(key61,value15);
										}
									}
								}
								var _g129 = 0;
								var _g232 = vnode27.children;
								while(_g129 < _g232.length) {
									var child9 = _g232[_g129];
									++_g129;
									var node27;
									var _g38 = child9.type;
									if(_g38 == null) {
										node27 = window.document.createElement(child9.name);
									} else {
										switch(_g38._hx_index) {
										case 0:
											node27 = isSvg || child9.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child9.name) : window.document.createElement(child9.name);
											break;
										case 1:
											node27 = window.document.createTextNode(child9.name);
											break;
										case 3:
											node27 = window.document.createDocumentFragment();
											break;
										default:
											node27 = window.document.createElement(child9.name);
										}
									}
									var access20 = child9.props;
									var _g1_keys11 = Reflect.fields(access20);
									var _g1_index11 = 0;
									while(_g1_index11 < _g1_keys11.length) {
										var key62 = _g1_keys11[_g1_index11++];
										var _g233 = { value : access20[key62], key : key62};
										var key63 = _g233.key;
										var value16 = _g233.value;
										var key64 = key63;
										var oldValue21 = null;
										if(key63 != "key") {
											if(StringTools.startsWith(key63,"on")) {
												var event21 = HxOverrides.substr(key63,2,null).toLowerCase();
												if(oldValue21 != null) {
													node27.removeEventListener(event21,oldValue21);
												}
												if(value16 != null) {
													node27.addEventListener(event21,value16);
												}
											} else if(!isSvg && key63 != "list" && Reflect.getProperty(node27,key63) != null) {
												Reflect.setProperty(node27,key63,value16 == null ? "" : value16);
											} else if(value16 == null || value16 == false) {
												node27.removeAttribute(key63);
											} else {
												if(key63 == "className") {
													key64 = "class";
												}
												if(key64 == "htmlFor") {
													key64 = "for";
												}
												node27.setAttribute(key64,value16);
											}
										}
									}
									var _g130 = 0;
									var _g234 = child9.children;
									while(_g130 < _g234.length) node27.appendChild(pilot_Differ.createNode(_g234[_g130++],isSvg));
									child9.node = node27;
									if(child9.hooks.attach != null && child9.node != null) {
										child9.hooks.attach(child9);
									}
									node26.appendChild(node27);
								}
								vnode27.node = node26;
								if(vnode27.hooks.attach != null && vnode27.node != null) {
									vnode27.hooks.attach(vnode27);
								}
								oldVChild = oldVChildren[oldHead];
								node1.insertBefore(node26,oldVChild != null ? oldVChild.node : null);
							}
						} else if(newHead > newTail) {
							while(oldHead <= oldTail) {
								var vnode28 = oldVChildren[oldHead++];
								if(vnode28.hooks.detach != null) {
									vnode28.hooks.detach();
								}
								node1.removeChild(vnode28.node);
							}
						} else {
							var keyed2 = { };
							var newKeyed2 = { };
							var i2 = oldHead;
							while(i2 <= oldTail) {
								oldKey = oldVChildren[i2].key;
								if(oldKey != null) {
									keyed2[oldKey] = oldVChildren[i2];
								}
								++i2;
							}
							while(newHead <= newTail) {
								oldVChild = oldVChildren[oldHead];
								var vnode29 = oldVChild;
								oldKey = vnode29 == null ? null : vnode29.key;
								var vnode30 = newVChildren[newHead];
								newKey = vnode30 == null ? null : vnode30.key;
								var node28;
								if(newKeyed2[oldKey] == null) {
									if(newKey != null) {
										var vnode31 = oldVChildren[oldHead + 1];
										node28 = newKey == (vnode31 == null ? null : vnode31.key);
									} else {
										node28 = false;
									}
								} else {
									node28 = true;
								}
								if(node28) {
									if(oldKey == null) {
										if(oldVChild.hooks.detach != null) {
											oldVChild.hooks.detach();
										}
										node1.removeChild(oldVChild.node);
									}
									++oldHead;
									continue;
								}
								if(newKey == null || oldVNode.type == pilot_VNodeType.VNodeRecycled) {
									if(oldKey == null) {
										var node29 = oldVChild != null ? oldVChild.node : null;
										var newVNode2 = newVChildren[newHead];
										var isSvg3 = isSvg;
										if(oldVChild != newVNode2) {
											if(oldVChild != null && oldVChild.type == pilot_VNodeType.VNodeText && newVNode2.type == pilot_VNodeType.VNodeText) {
												if(oldVChild.name != newVNode2.name) {
													node29.nodeValue = newVNode2.name;
												}
											} else if(oldVChild == null || oldVChild.name != newVNode2.name) {
												var node30;
												var _g39 = newVNode2.type;
												if(_g39 == null) {
													node30 = window.document.createElement(newVNode2.name);
												} else {
													switch(_g39._hx_index) {
													case 0:
														node30 = isSvg3 || newVNode2.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",newVNode2.name) : window.document.createElement(newVNode2.name);
														break;
													case 1:
														node30 = window.document.createTextNode(newVNode2.name);
														break;
													case 3:
														node30 = window.document.createDocumentFragment();
														break;
													default:
														node30 = window.document.createElement(newVNode2.name);
													}
												}
												var access21 = newVNode2.props;
												var _g1_keys12 = Reflect.fields(access21);
												var _g1_index12 = 0;
												while(_g1_index12 < _g1_keys12.length) {
													var key65 = _g1_keys12[_g1_index12++];
													var _g235 = { value : access21[key65], key : key65};
													var key66 = _g235.key;
													var value17 = _g235.value;
													var key67 = key66;
													var oldValue22 = null;
													if(key66 != "key") {
														if(StringTools.startsWith(key66,"on")) {
															var event22 = HxOverrides.substr(key66,2,null).toLowerCase();
															if(oldValue22 != null) {
																node30.removeEventListener(event22,oldValue22);
															}
															if(value17 != null) {
																node30.addEventListener(event22,value17);
															}
														} else if(!isSvg3 && key66 != "list" && Reflect.getProperty(node30,key66) != null) {
															Reflect.setProperty(node30,key66,value17 == null ? "" : value17);
														} else if(value17 == null || value17 == false) {
															node30.removeAttribute(key66);
														} else {
															if(key66 == "className") {
																key67 = "class";
															}
															if(key67 == "htmlFor") {
																key67 = "for";
															}
															node30.setAttribute(key67,value17);
														}
													}
												}
												var _g131 = 0;
												var _g236 = newVNode2.children;
												while(_g131 < _g236.length) {
													var child10 = _g236[_g131];
													++_g131;
													var node31;
													var _g40 = child10.type;
													if(_g40 == null) {
														node31 = window.document.createElement(child10.name);
													} else {
														switch(_g40._hx_index) {
														case 0:
															node31 = isSvg3 || child10.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child10.name) : window.document.createElement(child10.name);
															break;
														case 1:
															node31 = window.document.createTextNode(child10.name);
															break;
														case 3:
															node31 = window.document.createDocumentFragment();
															break;
														default:
															node31 = window.document.createElement(child10.name);
														}
													}
													var _g132 = new haxe_iterators_DynamicAccessKeyValueIterator(child10.props);
													while(_g132.index < _g132.keys.length) {
														var key68 = _g132.keys[_g132.index++];
														var _g237 = { value : _g132.access[key68], key : key68};
														var key69 = _g237.key;
														var value18 = _g237.value;
														var key70 = key69;
														var oldValue23 = null;
														if(key69 != "key") {
															if(StringTools.startsWith(key69,"on")) {
																var event23 = HxOverrides.substr(key69,2,null).toLowerCase();
																if(oldValue23 != null) {
																	node31.removeEventListener(event23,oldValue23);
																}
																if(value18 != null) {
																	node31.addEventListener(event23,value18);
																}
															} else if(!isSvg3 && key69 != "list" && Reflect.getProperty(node31,key69) != null) {
																Reflect.setProperty(node31,key69,value18 == null ? "" : value18);
															} else if(value18 == null || value18 == false) {
																node31.removeAttribute(key69);
															} else {
																if(key69 == "className") {
																	key70 = "class";
																}
																if(key70 == "htmlFor") {
																	key70 = "for";
																}
																node31.setAttribute(key70,value18);
															}
														}
													}
													var _g133 = 0;
													var _g238 = child10.children;
													while(_g133 < _g238.length) {
														var child11 = _g238[_g133];
														++_g133;
														var node32;
														var _g41 = child11.type;
														if(_g41 == null) {
															node32 = window.document.createElement(child11.name);
														} else {
															switch(_g41._hx_index) {
															case 0:
																node32 = isSvg3 || child11.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child11.name) : window.document.createElement(child11.name);
																break;
															case 1:
																node32 = window.document.createTextNode(child11.name);
																break;
															case 3:
																node32 = window.document.createDocumentFragment();
																break;
															default:
																node32 = window.document.createElement(child11.name);
															}
														}
														var access22 = child11.props;
														var _g1_keys13 = Reflect.fields(access22);
														var _g1_index13 = 0;
														while(_g1_index13 < _g1_keys13.length) {
															var key71 = _g1_keys13[_g1_index13++];
															var _g239 = { value : access22[key71], key : key71};
															var key72 = _g239.key;
															var value19 = _g239.value;
															var key73 = key72;
															var oldValue24 = null;
															if(key72 != "key") {
																if(StringTools.startsWith(key72,"on")) {
																	var event24 = HxOverrides.substr(key72,2,null).toLowerCase();
																	if(oldValue24 != null) {
																		node32.removeEventListener(event24,oldValue24);
																	}
																	if(value19 != null) {
																		node32.addEventListener(event24,value19);
																	}
																} else if(!isSvg3 && key72 != "list" && Reflect.getProperty(node32,key72) != null) {
																	Reflect.setProperty(node32,key72,value19 == null ? "" : value19);
																} else if(value19 == null || value19 == false) {
																	node32.removeAttribute(key72);
																} else {
																	if(key72 == "className") {
																		key73 = "class";
																	}
																	if(key73 == "htmlFor") {
																		key73 = "for";
																	}
																	node32.setAttribute(key73,value19);
																}
															}
														}
														var _g134 = 0;
														var _g240 = child11.children;
														while(_g134 < _g240.length) node32.appendChild(pilot_Differ.createNode(_g240[_g134++],isSvg3));
														child11.node = node32;
														if(child11.hooks.attach != null && child11.node != null) {
															child11.hooks.attach(child11);
														}
														node31.appendChild(node32);
													}
													child10.node = node31;
													if(child10.hooks.attach != null && child10.node != null) {
														child10.hooks.attach(child10);
													}
													node30.appendChild(node31);
												}
												newVNode2.node = node30;
												if(newVNode2.hooks.attach != null && newVNode2.node != null) {
													newVNode2.hooks.attach(newVNode2);
												}
												node29 = node1.insertBefore(node30,node29);
												if(oldVChild != null && oldVChild.node != null) {
													if(oldVChild.hooks.detach != null) {
														oldVChild.hooks.detach();
													}
													node1.removeChild(oldVChild.node);
												}
											} else {
												var tmpVChild3;
												var oldVChild3;
												var oldKey3;
												var newKey3;
												var oldVProps3 = oldVChild.props;
												var newVProps3 = newVNode2.props;
												var oldVChildren3 = oldVChild.children;
												var newVChildren3 = newVNode2.children;
												var oldHead3 = 0;
												var newHead3 = 0;
												var oldTail3 = oldVChildren3.length - 1;
												var newTail3 = newVChildren3.length - 1;
												isSvg3 = isSvg3 || newVNode2.name == "svg";
												var out3 = { };
												var access23 = oldVProps3;
												var _g_keys11 = Reflect.fields(access23);
												var _g_index11 = 0;
												while(_g_index11 < _g_keys11.length) {
													var key74 = _g_keys11[_g_index11++];
													var _g135 = { value : access23[key74], key : key74};
													out3[_g135.key] = _g135.value;
												}
												var access24 = newVProps3;
												var _g_keys12 = Reflect.fields(access24);
												var _g_index12 = 0;
												while(_g_index12 < _g_keys12.length) {
													var key75 = _g_keys12[_g_index12++];
													var _g136 = { value : access24[key75], key : key75};
													out3[_g136.key] = _g136.value;
												}
												var access25 = out3;
												var _g_keys13 = Reflect.fields(access25);
												var _g_index13 = 0;
												while(_g_index13 < _g_keys13.length) {
													var key76 = _g_keys13[_g_index13++];
													var k3 = ({ value : access25[key76], key : key76}).key;
													switch(k3) {
													case "checked":case "selected":case "value":
														if(Reflect.field(node29,k3) != Reflect.field(newVProps3,k3)) {
															var key77 = k3;
															var oldValue25 = Reflect.field(oldVProps3,k3);
															var newValue6 = Reflect.field(newVProps3,k3);
															if(k3 != "key") {
																if(StringTools.startsWith(k3,"on")) {
																	var event25 = HxOverrides.substr(k3,2,null).toLowerCase();
																	if(oldValue25 != null) {
																		node29.removeEventListener(event25,oldValue25);
																	}
																	if(newValue6 != null) {
																		node29.addEventListener(event25,newValue6);
																	}
																} else if(!isSvg3 && k3 != "list" && Reflect.getProperty(node29,k3) != null) {
																	Reflect.setProperty(node29,k3,newValue6 == null ? "" : newValue6);
																} else if(newValue6 == null || newValue6 == false) {
																	node29.removeAttribute(k3);
																} else {
																	if(k3 == "className") {
																		key77 = "class";
																	}
																	if(key77 == "htmlFor") {
																		key77 = "for";
																	}
																	node29.setAttribute(key77,newValue6);
																}
															}
														}
														break;
													default:
														if(Reflect.field(oldVProps3,k3) != Reflect.field(newVProps3,k3)) {
															var key78 = k3;
															var oldValue26 = Reflect.field(oldVProps3,k3);
															var newValue7 = Reflect.field(newVProps3,k3);
															if(k3 != "key") {
																if(StringTools.startsWith(k3,"on")) {
																	var event26 = HxOverrides.substr(k3,2,null).toLowerCase();
																	if(oldValue26 != null) {
																		node29.removeEventListener(event26,oldValue26);
																	}
																	if(newValue7 != null) {
																		node29.addEventListener(event26,newValue7);
																	}
																} else if(!isSvg3 && k3 != "list" && Reflect.getProperty(node29,k3) != null) {
																	Reflect.setProperty(node29,k3,newValue7 == null ? "" : newValue7);
																} else if(newValue7 == null || newValue7 == false) {
																	node29.removeAttribute(k3);
																} else {
																	if(k3 == "className") {
																		key78 = "class";
																	}
																	if(key78 == "htmlFor") {
																		key78 = "for";
																	}
																	node29.setAttribute(key78,newValue7);
																}
															}
														}
													}
												}
												while(newHead3 <= newTail3 && oldHead3 <= oldTail3) {
													var node33;
													var vnode32 = oldVChildren3[oldHead3];
													oldKey3 = vnode32 == null ? null : vnode32.key;
													if(oldKey3 != null) {
														var vnode33 = newVChildren3[newHead3];
														node33 = oldKey3 != (vnode33 == null ? null : vnode33.key);
													} else {
														node33 = true;
													}
													if(node33) {
														break;
													}
													pilot_Differ.patchNode(node29,oldVChildren3[oldHead3++].node,oldVChildren3[oldHead3 - 1],newVChildren3[newHead3++],isSvg3);
												}
												while(newHead3 <= newTail3 && oldHead3 <= oldTail3) {
													var node34;
													var vnode34 = oldVChildren3[oldTail3];
													oldKey3 = vnode34 == null ? null : vnode34.key;
													if(oldKey3 != null) {
														var vnode35 = newVChildren3[newTail3];
														node34 = oldKey3 != (vnode35 == null ? null : vnode35.key);
													} else {
														node34 = true;
													}
													if(node34) {
														break;
													}
													pilot_Differ.patchNode(node29,oldVChildren3[oldTail3--].node,oldVChildren3[oldTail3 + 1],newVChildren3[newTail3--],isSvg3);
												}
												if(oldHead3 > oldTail3) {
													while(newHead3 <= newTail3) {
														var vnode36 = newVChildren3[newHead3++];
														var node35;
														var _g42 = vnode36.type;
														if(_g42 == null) {
															node35 = window.document.createElement(vnode36.name);
														} else {
															switch(_g42._hx_index) {
															case 0:
																node35 = isSvg3 || vnode36.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",vnode36.name) : window.document.createElement(vnode36.name);
																break;
															case 1:
																node35 = window.document.createTextNode(vnode36.name);
																break;
															case 3:
																node35 = window.document.createDocumentFragment();
																break;
															default:
																node35 = window.document.createElement(vnode36.name);
															}
														}
														var access26 = vnode36.props;
														var _g1_keys14 = Reflect.fields(access26);
														var _g1_index14 = 0;
														while(_g1_index14 < _g1_keys14.length) {
															var key79 = _g1_keys14[_g1_index14++];
															var _g241 = { value : access26[key79], key : key79};
															var key80 = _g241.key;
															var value20 = _g241.value;
															var key81 = key80;
															var oldValue27 = null;
															if(key80 != "key") {
																if(StringTools.startsWith(key80,"on")) {
																	var event27 = HxOverrides.substr(key80,2,null).toLowerCase();
																	if(oldValue27 != null) {
																		node35.removeEventListener(event27,oldValue27);
																	}
																	if(value20 != null) {
																		node35.addEventListener(event27,value20);
																	}
																} else if(!isSvg3 && key80 != "list" && Reflect.getProperty(node35,key80) != null) {
																	Reflect.setProperty(node35,key80,value20 == null ? "" : value20);
																} else if(value20 == null || value20 == false) {
																	node35.removeAttribute(key80);
																} else {
																	if(key80 == "className") {
																		key81 = "class";
																	}
																	if(key81 == "htmlFor") {
																		key81 = "for";
																	}
																	node35.setAttribute(key81,value20);
																}
															}
														}
														var _g137 = 0;
														var _g242 = vnode36.children;
														while(_g137 < _g242.length) {
															var child12 = _g242[_g137];
															++_g137;
															var node36;
															var _g43 = child12.type;
															if(_g43 == null) {
																node36 = window.document.createElement(child12.name);
															} else {
																switch(_g43._hx_index) {
																case 0:
																	node36 = isSvg3 || child12.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child12.name) : window.document.createElement(child12.name);
																	break;
																case 1:
																	node36 = window.document.createTextNode(child12.name);
																	break;
																case 3:
																	node36 = window.document.createDocumentFragment();
																	break;
																default:
																	node36 = window.document.createElement(child12.name);
																}
															}
															var _g138 = new haxe_iterators_DynamicAccessKeyValueIterator(child12.props);
															while(_g138.index < _g138.keys.length) {
																var key82 = _g138.keys[_g138.index++];
																var _g243 = { value : _g138.access[key82], key : key82};
																var key83 = _g243.key;
																var value21 = _g243.value;
																var key84 = key83;
																var oldValue28 = null;
																if(key83 != "key") {
																	if(StringTools.startsWith(key83,"on")) {
																		var event28 = HxOverrides.substr(key83,2,null).toLowerCase();
																		if(oldValue28 != null) {
																			node36.removeEventListener(event28,oldValue28);
																		}
																		if(value21 != null) {
																			node36.addEventListener(event28,value21);
																		}
																	} else if(!isSvg3 && key83 != "list" && Reflect.getProperty(node36,key83) != null) {
																		Reflect.setProperty(node36,key83,value21 == null ? "" : value21);
																	} else if(value21 == null || value21 == false) {
																		node36.removeAttribute(key83);
																	} else {
																		if(key83 == "className") {
																			key84 = "class";
																		}
																		if(key84 == "htmlFor") {
																			key84 = "for";
																		}
																		node36.setAttribute(key84,value21);
																	}
																}
															}
															var _g139 = 0;
															var _g244 = child12.children;
															while(_g139 < _g244.length) {
																var child13 = _g244[_g139];
																++_g139;
																var node37;
																var _g44 = child13.type;
																if(_g44 == null) {
																	node37 = window.document.createElement(child13.name);
																} else {
																	switch(_g44._hx_index) {
																	case 0:
																		node37 = isSvg3 || child13.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child13.name) : window.document.createElement(child13.name);
																		break;
																	case 1:
																		node37 = window.document.createTextNode(child13.name);
																		break;
																	case 3:
																		node37 = window.document.createDocumentFragment();
																		break;
																	default:
																		node37 = window.document.createElement(child13.name);
																	}
																}
																var access27 = child13.props;
																var _g1_keys15 = Reflect.fields(access27);
																var _g1_index15 = 0;
																while(_g1_index15 < _g1_keys15.length) {
																	var key85 = _g1_keys15[_g1_index15++];
																	var _g245 = { value : access27[key85], key : key85};
																	var key86 = _g245.key;
																	var value22 = _g245.value;
																	var key87 = key86;
																	var oldValue29 = null;
																	if(key86 != "key") {
																		if(StringTools.startsWith(key86,"on")) {
																			var event29 = HxOverrides.substr(key86,2,null).toLowerCase();
																			if(oldValue29 != null) {
																				node37.removeEventListener(event29,oldValue29);
																			}
																			if(value22 != null) {
																				node37.addEventListener(event29,value22);
																			}
																		} else if(!isSvg3 && key86 != "list" && Reflect.getProperty(node37,key86) != null) {
																			Reflect.setProperty(node37,key86,value22 == null ? "" : value22);
																		} else if(value22 == null || value22 == false) {
																			node37.removeAttribute(key86);
																		} else {
																			if(key86 == "className") {
																				key87 = "class";
																			}
																			if(key87 == "htmlFor") {
																				key87 = "for";
																			}
																			node37.setAttribute(key87,value22);
																		}
																	}
																}
																var _g140 = 0;
																var _g246 = child13.children;
																while(_g140 < _g246.length) node37.appendChild(pilot_Differ.createNode(_g246[_g140++],isSvg3));
																child13.node = node37;
																if(child13.hooks.attach != null && child13.node != null) {
																	child13.hooks.attach(child13);
																}
																node36.appendChild(node37);
															}
															child12.node = node36;
															if(child12.hooks.attach != null && child12.node != null) {
																child12.hooks.attach(child12);
															}
															node35.appendChild(node36);
														}
														vnode36.node = node35;
														if(vnode36.hooks.attach != null && vnode36.node != null) {
															vnode36.hooks.attach(vnode36);
														}
														oldVChild3 = oldVChildren3[oldHead3];
														node29.insertBefore(node35,oldVChild3 != null ? oldVChild3.node : null);
													}
												} else if(newHead3 > newTail3) {
													while(oldHead3 <= oldTail3) {
														var vnode37 = oldVChildren3[oldHead3++];
														if(vnode37.hooks.detach != null) {
															vnode37.hooks.detach();
														}
														node29.removeChild(vnode37.node);
													}
												} else {
													var keyed3 = { };
													var newKeyed3 = { };
													var i3 = oldHead3;
													while(i3 <= oldTail3) {
														oldKey3 = oldVChildren3[i3].key;
														if(oldKey3 != null) {
															keyed3[oldKey3] = oldVChildren3[i3];
														}
														++i3;
													}
													while(newHead3 <= newTail3) {
														oldVChild3 = oldVChildren3[oldHead3];
														var vnode38 = oldVChild3;
														oldKey3 = vnode38 == null ? null : vnode38.key;
														var vnode39 = newVChildren3[newHead3];
														newKey3 = vnode39 == null ? null : vnode39.key;
														var node38;
														if(newKeyed3[oldKey3] == null) {
															if(newKey3 != null) {
																var vnode40 = oldVChildren3[oldHead3 + 1];
																node38 = newKey3 == (vnode40 == null ? null : vnode40.key);
															} else {
																node38 = false;
															}
														} else {
															node38 = true;
														}
														if(node38) {
															if(oldKey3 == null) {
																if(oldVChild3.hooks.detach != null) {
																	oldVChild3.hooks.detach();
																}
																node29.removeChild(oldVChild3.node);
															}
															++oldHead3;
															continue;
														}
														if(newKey3 == null || oldVChild.type == pilot_VNodeType.VNodeRecycled) {
															if(oldKey3 == null) {
																pilot_Differ.patchNode(node29,oldVChild3 != null ? oldVChild3.node : null,oldVChild3,newVChildren3[newHead3],isSvg3);
																++newHead3;
															}
															++oldHead3;
														} else {
															if(oldKey3 == newKey3) {
																pilot_Differ.patchNode(node29,oldVChild3.node,oldVChild3,newVChildren3[newHead3],isSvg3);
																newKeyed3[newKey3] = true;
																++oldHead3;
															} else {
																tmpVChild3 = keyed3[newKey3];
																if(tmpVChild3 != null) {
																	pilot_Differ.patchNode(node29,node29.insertBefore(tmpVChild3.node,oldVChild3 != null ? oldVChild3.node : null),tmpVChild3,newVChildren3[newHead3],isSvg3);
																	newKeyed3[newKey3] = true;
																} else {
																	pilot_Differ.patchNode(node29,oldVChild3 != null ? oldVChild3.node : null,null,newVChildren3[newHead3],isSvg3);
																}
															}
															++newHead3;
														}
													}
													while(oldHead3 <= oldTail3) {
														oldVChild3 = oldVChildren3[oldHead3++];
														var vnode41 = oldVChild3;
														if((vnode41 == null ? null : vnode41.key) == null) {
															if(oldVChild3.hooks.detach != null) {
																oldVChild3.hooks.detach();
															}
															node29.removeChild(oldVChild3.node);
														}
													}
													var _g_keys14 = Reflect.fields(keyed3);
													var _g_index14 = 0;
													while(_g_index14 < _g_keys14.length) {
														var key88 = _g_keys14[_g_index14++];
														var _g141 = { value : keyed3[key88], key : key88};
														var vnode42 = _g141.value;
														if(newKeyed3[_g141.key] == null) {
															if(vnode42.hooks.detach != null) {
																vnode42.hooks.detach();
															}
															node29.removeChild(vnode42.node);
														}
													}
												}
											}
										}
										newVNode2.node = node29;
										++newHead;
									}
									++oldHead;
								} else {
									if(oldKey == newKey) {
										var node39 = oldVChild.node;
										var newVNode3 = newVChildren[newHead];
										var isSvg4 = isSvg;
										if(oldVChild != newVNode3) {
											if(oldVChild != null && oldVChild.type == pilot_VNodeType.VNodeText && newVNode3.type == pilot_VNodeType.VNodeText) {
												if(oldVChild.name != newVNode3.name) {
													node39.nodeValue = newVNode3.name;
												}
											} else if(oldVChild == null || oldVChild.name != newVNode3.name) {
												var node40;
												var _g45 = newVNode3.type;
												if(_g45 == null) {
													node40 = window.document.createElement(newVNode3.name);
												} else {
													switch(_g45._hx_index) {
													case 0:
														node40 = isSvg4 || newVNode3.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",newVNode3.name) : window.document.createElement(newVNode3.name);
														break;
													case 1:
														node40 = window.document.createTextNode(newVNode3.name);
														break;
													case 3:
														node40 = window.document.createDocumentFragment();
														break;
													default:
														node40 = window.document.createElement(newVNode3.name);
													}
												}
												var access28 = newVNode3.props;
												var _g1_keys16 = Reflect.fields(access28);
												var _g1_index16 = 0;
												while(_g1_index16 < _g1_keys16.length) {
													var key89 = _g1_keys16[_g1_index16++];
													var _g247 = { value : access28[key89], key : key89};
													var key90 = _g247.key;
													var value23 = _g247.value;
													var key91 = key90;
													var oldValue30 = null;
													if(key90 != "key") {
														if(StringTools.startsWith(key90,"on")) {
															var event30 = HxOverrides.substr(key90,2,null).toLowerCase();
															if(oldValue30 != null) {
																node40.removeEventListener(event30,oldValue30);
															}
															if(value23 != null) {
																node40.addEventListener(event30,value23);
															}
														} else if(!isSvg4 && key90 != "list" && Reflect.getProperty(node40,key90) != null) {
															Reflect.setProperty(node40,key90,value23 == null ? "" : value23);
														} else if(value23 == null || value23 == false) {
															node40.removeAttribute(key90);
														} else {
															if(key90 == "className") {
																key91 = "class";
															}
															if(key91 == "htmlFor") {
																key91 = "for";
															}
															node40.setAttribute(key91,value23);
														}
													}
												}
												var _g142 = 0;
												var _g248 = newVNode3.children;
												while(_g142 < _g248.length) {
													var child14 = _g248[_g142];
													++_g142;
													var node41;
													var _g46 = child14.type;
													if(_g46 == null) {
														node41 = window.document.createElement(child14.name);
													} else {
														switch(_g46._hx_index) {
														case 0:
															node41 = isSvg4 || child14.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child14.name) : window.document.createElement(child14.name);
															break;
														case 1:
															node41 = window.document.createTextNode(child14.name);
															break;
														case 3:
															node41 = window.document.createDocumentFragment();
															break;
														default:
															node41 = window.document.createElement(child14.name);
														}
													}
													var _g143 = new haxe_iterators_DynamicAccessKeyValueIterator(child14.props);
													while(_g143.index < _g143.keys.length) {
														var key92 = _g143.keys[_g143.index++];
														var _g249 = { value : _g143.access[key92], key : key92};
														var key93 = _g249.key;
														var value24 = _g249.value;
														var key94 = key93;
														var oldValue31 = null;
														if(key93 != "key") {
															if(StringTools.startsWith(key93,"on")) {
																var event31 = HxOverrides.substr(key93,2,null).toLowerCase();
																if(oldValue31 != null) {
																	node41.removeEventListener(event31,oldValue31);
																}
																if(value24 != null) {
																	node41.addEventListener(event31,value24);
																}
															} else if(!isSvg4 && key93 != "list" && Reflect.getProperty(node41,key93) != null) {
																Reflect.setProperty(node41,key93,value24 == null ? "" : value24);
															} else if(value24 == null || value24 == false) {
																node41.removeAttribute(key93);
															} else {
																if(key93 == "className") {
																	key94 = "class";
																}
																if(key94 == "htmlFor") {
																	key94 = "for";
																}
																node41.setAttribute(key94,value24);
															}
														}
													}
													var _g144 = 0;
													var _g250 = child14.children;
													while(_g144 < _g250.length) {
														var child15 = _g250[_g144];
														++_g144;
														var node42;
														var _g47 = child15.type;
														if(_g47 == null) {
															node42 = window.document.createElement(child15.name);
														} else {
															switch(_g47._hx_index) {
															case 0:
																node42 = isSvg4 || child15.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child15.name) : window.document.createElement(child15.name);
																break;
															case 1:
																node42 = window.document.createTextNode(child15.name);
																break;
															case 3:
																node42 = window.document.createDocumentFragment();
																break;
															default:
																node42 = window.document.createElement(child15.name);
															}
														}
														var access29 = child15.props;
														var _g1_keys17 = Reflect.fields(access29);
														var _g1_index17 = 0;
														while(_g1_index17 < _g1_keys17.length) {
															var key95 = _g1_keys17[_g1_index17++];
															var _g251 = { value : access29[key95], key : key95};
															var key96 = _g251.key;
															var value25 = _g251.value;
															var key97 = key96;
															var oldValue32 = null;
															if(key96 != "key") {
																if(StringTools.startsWith(key96,"on")) {
																	var event32 = HxOverrides.substr(key96,2,null).toLowerCase();
																	if(oldValue32 != null) {
																		node42.removeEventListener(event32,oldValue32);
																	}
																	if(value25 != null) {
																		node42.addEventListener(event32,value25);
																	}
																} else if(!isSvg4 && key96 != "list" && Reflect.getProperty(node42,key96) != null) {
																	Reflect.setProperty(node42,key96,value25 == null ? "" : value25);
																} else if(value25 == null || value25 == false) {
																	node42.removeAttribute(key96);
																} else {
																	if(key96 == "className") {
																		key97 = "class";
																	}
																	if(key97 == "htmlFor") {
																		key97 = "for";
																	}
																	node42.setAttribute(key97,value25);
																}
															}
														}
														var _g145 = 0;
														var _g252 = child15.children;
														while(_g145 < _g252.length) node42.appendChild(pilot_Differ.createNode(_g252[_g145++],isSvg4));
														child15.node = node42;
														if(child15.hooks.attach != null && child15.node != null) {
															child15.hooks.attach(child15);
														}
														node41.appendChild(node42);
													}
													child14.node = node41;
													if(child14.hooks.attach != null && child14.node != null) {
														child14.hooks.attach(child14);
													}
													node40.appendChild(node41);
												}
												newVNode3.node = node40;
												if(newVNode3.hooks.attach != null && newVNode3.node != null) {
													newVNode3.hooks.attach(newVNode3);
												}
												node39 = node1.insertBefore(node40,node39);
												if(oldVChild != null && oldVChild.node != null) {
													if(oldVChild.hooks.detach != null) {
														oldVChild.hooks.detach();
													}
													node1.removeChild(oldVChild.node);
												}
											} else {
												var tmpVChild4;
												var oldVChild4;
												var oldKey4;
												var newKey4;
												var oldVProps4 = oldVChild.props;
												var newVProps4 = newVNode3.props;
												var oldVChildren4 = oldVChild.children;
												var newVChildren4 = newVNode3.children;
												var oldHead4 = 0;
												var newHead4 = 0;
												var oldTail4 = oldVChildren4.length - 1;
												var newTail4 = newVChildren4.length - 1;
												isSvg4 = isSvg4 || newVNode3.name == "svg";
												var out4 = { };
												var access30 = oldVProps4;
												var _g_keys15 = Reflect.fields(access30);
												var _g_index15 = 0;
												while(_g_index15 < _g_keys15.length) {
													var key98 = _g_keys15[_g_index15++];
													var _g146 = { value : access30[key98], key : key98};
													out4[_g146.key] = _g146.value;
												}
												var access31 = newVProps4;
												var _g_keys16 = Reflect.fields(access31);
												var _g_index16 = 0;
												while(_g_index16 < _g_keys16.length) {
													var key99 = _g_keys16[_g_index16++];
													var _g147 = { value : access31[key99], key : key99};
													out4[_g147.key] = _g147.value;
												}
												var access32 = out4;
												var _g_keys17 = Reflect.fields(access32);
												var _g_index17 = 0;
												while(_g_index17 < _g_keys17.length) {
													var key100 = _g_keys17[_g_index17++];
													var k4 = ({ value : access32[key100], key : key100}).key;
													switch(k4) {
													case "checked":case "selected":case "value":
														if(Reflect.field(node39,k4) != Reflect.field(newVProps4,k4)) {
															var key101 = k4;
															var oldValue33 = Reflect.field(oldVProps4,k4);
															var newValue8 = Reflect.field(newVProps4,k4);
															if(k4 != "key") {
																if(StringTools.startsWith(k4,"on")) {
																	var event33 = HxOverrides.substr(k4,2,null).toLowerCase();
																	if(oldValue33 != null) {
																		node39.removeEventListener(event33,oldValue33);
																	}
																	if(newValue8 != null) {
																		node39.addEventListener(event33,newValue8);
																	}
																} else if(!isSvg4 && k4 != "list" && Reflect.getProperty(node39,k4) != null) {
																	Reflect.setProperty(node39,k4,newValue8 == null ? "" : newValue8);
																} else if(newValue8 == null || newValue8 == false) {
																	node39.removeAttribute(k4);
																} else {
																	if(k4 == "className") {
																		key101 = "class";
																	}
																	if(key101 == "htmlFor") {
																		key101 = "for";
																	}
																	node39.setAttribute(key101,newValue8);
																}
															}
														}
														break;
													default:
														if(Reflect.field(oldVProps4,k4) != Reflect.field(newVProps4,k4)) {
															var key102 = k4;
															var oldValue34 = Reflect.field(oldVProps4,k4);
															var newValue9 = Reflect.field(newVProps4,k4);
															if(k4 != "key") {
																if(StringTools.startsWith(k4,"on")) {
																	var event34 = HxOverrides.substr(k4,2,null).toLowerCase();
																	if(oldValue34 != null) {
																		node39.removeEventListener(event34,oldValue34);
																	}
																	if(newValue9 != null) {
																		node39.addEventListener(event34,newValue9);
																	}
																} else if(!isSvg4 && k4 != "list" && Reflect.getProperty(node39,k4) != null) {
																	Reflect.setProperty(node39,k4,newValue9 == null ? "" : newValue9);
																} else if(newValue9 == null || newValue9 == false) {
																	node39.removeAttribute(k4);
																} else {
																	if(k4 == "className") {
																		key102 = "class";
																	}
																	if(key102 == "htmlFor") {
																		key102 = "for";
																	}
																	node39.setAttribute(key102,newValue9);
																}
															}
														}
													}
												}
												while(newHead4 <= newTail4 && oldHead4 <= oldTail4) {
													var node43;
													var vnode43 = oldVChildren4[oldHead4];
													oldKey4 = vnode43 == null ? null : vnode43.key;
													if(oldKey4 != null) {
														var vnode44 = newVChildren4[newHead4];
														node43 = oldKey4 != (vnode44 == null ? null : vnode44.key);
													} else {
														node43 = true;
													}
													if(node43) {
														break;
													}
													pilot_Differ.patchNode(node39,oldVChildren4[oldHead4++].node,oldVChildren4[oldHead4 - 1],newVChildren4[newHead4++],isSvg4);
												}
												while(newHead4 <= newTail4 && oldHead4 <= oldTail4) {
													var node44;
													var vnode45 = oldVChildren4[oldTail4];
													oldKey4 = vnode45 == null ? null : vnode45.key;
													if(oldKey4 != null) {
														var vnode46 = newVChildren4[newTail4];
														node44 = oldKey4 != (vnode46 == null ? null : vnode46.key);
													} else {
														node44 = true;
													}
													if(node44) {
														break;
													}
													pilot_Differ.patchNode(node39,oldVChildren4[oldTail4--].node,oldVChildren4[oldTail4 + 1],newVChildren4[newTail4--],isSvg4);
												}
												if(oldHead4 > oldTail4) {
													while(newHead4 <= newTail4) {
														var vnode47 = newVChildren4[newHead4++];
														var node45;
														var _g48 = vnode47.type;
														if(_g48 == null) {
															node45 = window.document.createElement(vnode47.name);
														} else {
															switch(_g48._hx_index) {
															case 0:
																node45 = isSvg4 || vnode47.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",vnode47.name) : window.document.createElement(vnode47.name);
																break;
															case 1:
																node45 = window.document.createTextNode(vnode47.name);
																break;
															case 3:
																node45 = window.document.createDocumentFragment();
																break;
															default:
																node45 = window.document.createElement(vnode47.name);
															}
														}
														var access33 = vnode47.props;
														var _g1_keys18 = Reflect.fields(access33);
														var _g1_index18 = 0;
														while(_g1_index18 < _g1_keys18.length) {
															var key103 = _g1_keys18[_g1_index18++];
															var _g253 = { value : access33[key103], key : key103};
															var key104 = _g253.key;
															var value26 = _g253.value;
															var key105 = key104;
															var oldValue35 = null;
															if(key104 != "key") {
																if(StringTools.startsWith(key104,"on")) {
																	var event35 = HxOverrides.substr(key104,2,null).toLowerCase();
																	if(oldValue35 != null) {
																		node45.removeEventListener(event35,oldValue35);
																	}
																	if(value26 != null) {
																		node45.addEventListener(event35,value26);
																	}
																} else if(!isSvg4 && key104 != "list" && Reflect.getProperty(node45,key104) != null) {
																	Reflect.setProperty(node45,key104,value26 == null ? "" : value26);
																} else if(value26 == null || value26 == false) {
																	node45.removeAttribute(key104);
																} else {
																	if(key104 == "className") {
																		key105 = "class";
																	}
																	if(key105 == "htmlFor") {
																		key105 = "for";
																	}
																	node45.setAttribute(key105,value26);
																}
															}
														}
														var _g148 = 0;
														var _g254 = vnode47.children;
														while(_g148 < _g254.length) {
															var child16 = _g254[_g148];
															++_g148;
															var node46;
															var _g49 = child16.type;
															if(_g49 == null) {
																node46 = window.document.createElement(child16.name);
															} else {
																switch(_g49._hx_index) {
																case 0:
																	node46 = isSvg4 || child16.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child16.name) : window.document.createElement(child16.name);
																	break;
																case 1:
																	node46 = window.document.createTextNode(child16.name);
																	break;
																case 3:
																	node46 = window.document.createDocumentFragment();
																	break;
																default:
																	node46 = window.document.createElement(child16.name);
																}
															}
															var _g149 = new haxe_iterators_DynamicAccessKeyValueIterator(child16.props);
															while(_g149.index < _g149.keys.length) {
																var key106 = _g149.keys[_g149.index++];
																var _g255 = { value : _g149.access[key106], key : key106};
																var key107 = _g255.key;
																var value27 = _g255.value;
																var key108 = key107;
																var oldValue36 = null;
																if(key107 != "key") {
																	if(StringTools.startsWith(key107,"on")) {
																		var event36 = HxOverrides.substr(key107,2,null).toLowerCase();
																		if(oldValue36 != null) {
																			node46.removeEventListener(event36,oldValue36);
																		}
																		if(value27 != null) {
																			node46.addEventListener(event36,value27);
																		}
																	} else if(!isSvg4 && key107 != "list" && Reflect.getProperty(node46,key107) != null) {
																		Reflect.setProperty(node46,key107,value27 == null ? "" : value27);
																	} else if(value27 == null || value27 == false) {
																		node46.removeAttribute(key107);
																	} else {
																		if(key107 == "className") {
																			key108 = "class";
																		}
																		if(key108 == "htmlFor") {
																			key108 = "for";
																		}
																		node46.setAttribute(key108,value27);
																	}
																}
															}
															var _g150 = 0;
															var _g256 = child16.children;
															while(_g150 < _g256.length) {
																var child17 = _g256[_g150];
																++_g150;
																var node47;
																var _g50 = child17.type;
																if(_g50 == null) {
																	node47 = window.document.createElement(child17.name);
																} else {
																	switch(_g50._hx_index) {
																	case 0:
																		node47 = isSvg4 || child17.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child17.name) : window.document.createElement(child17.name);
																		break;
																	case 1:
																		node47 = window.document.createTextNode(child17.name);
																		break;
																	case 3:
																		node47 = window.document.createDocumentFragment();
																		break;
																	default:
																		node47 = window.document.createElement(child17.name);
																	}
																}
																var access34 = child17.props;
																var _g1_keys19 = Reflect.fields(access34);
																var _g1_index19 = 0;
																while(_g1_index19 < _g1_keys19.length) {
																	var key109 = _g1_keys19[_g1_index19++];
																	var _g257 = { value : access34[key109], key : key109};
																	var key110 = _g257.key;
																	var value28 = _g257.value;
																	var key111 = key110;
																	var oldValue37 = null;
																	if(key110 != "key") {
																		if(StringTools.startsWith(key110,"on")) {
																			var event37 = HxOverrides.substr(key110,2,null).toLowerCase();
																			if(oldValue37 != null) {
																				node47.removeEventListener(event37,oldValue37);
																			}
																			if(value28 != null) {
																				node47.addEventListener(event37,value28);
																			}
																		} else if(!isSvg4 && key110 != "list" && Reflect.getProperty(node47,key110) != null) {
																			Reflect.setProperty(node47,key110,value28 == null ? "" : value28);
																		} else if(value28 == null || value28 == false) {
																			node47.removeAttribute(key110);
																		} else {
																			if(key110 == "className") {
																				key111 = "class";
																			}
																			if(key111 == "htmlFor") {
																				key111 = "for";
																			}
																			node47.setAttribute(key111,value28);
																		}
																	}
																}
																var _g151 = 0;
																var _g258 = child17.children;
																while(_g151 < _g258.length) node47.appendChild(pilot_Differ.createNode(_g258[_g151++],isSvg4));
																child17.node = node47;
																if(child17.hooks.attach != null && child17.node != null) {
																	child17.hooks.attach(child17);
																}
																node46.appendChild(node47);
															}
															child16.node = node46;
															if(child16.hooks.attach != null && child16.node != null) {
																child16.hooks.attach(child16);
															}
															node45.appendChild(node46);
														}
														vnode47.node = node45;
														if(vnode47.hooks.attach != null && vnode47.node != null) {
															vnode47.hooks.attach(vnode47);
														}
														oldVChild4 = oldVChildren4[oldHead4];
														node39.insertBefore(node45,oldVChild4 != null ? oldVChild4.node : null);
													}
												} else if(newHead4 > newTail4) {
													while(oldHead4 <= oldTail4) {
														var vnode48 = oldVChildren4[oldHead4++];
														if(vnode48.hooks.detach != null) {
															vnode48.hooks.detach();
														}
														node39.removeChild(vnode48.node);
													}
												} else {
													var keyed4 = { };
													var newKeyed4 = { };
													var i4 = oldHead4;
													while(i4 <= oldTail4) {
														oldKey4 = oldVChildren4[i4].key;
														if(oldKey4 != null) {
															keyed4[oldKey4] = oldVChildren4[i4];
														}
														++i4;
													}
													while(newHead4 <= newTail4) {
														oldVChild4 = oldVChildren4[oldHead4];
														var vnode49 = oldVChild4;
														oldKey4 = vnode49 == null ? null : vnode49.key;
														var vnode50 = newVChildren4[newHead4];
														newKey4 = vnode50 == null ? null : vnode50.key;
														var node48;
														if(newKeyed4[oldKey4] == null) {
															if(newKey4 != null) {
																var vnode51 = oldVChildren4[oldHead4 + 1];
																node48 = newKey4 == (vnode51 == null ? null : vnode51.key);
															} else {
																node48 = false;
															}
														} else {
															node48 = true;
														}
														if(node48) {
															if(oldKey4 == null) {
																if(oldVChild4.hooks.detach != null) {
																	oldVChild4.hooks.detach();
																}
																node39.removeChild(oldVChild4.node);
															}
															++oldHead4;
															continue;
														}
														if(newKey4 == null || oldVChild.type == pilot_VNodeType.VNodeRecycled) {
															if(oldKey4 == null) {
																pilot_Differ.patchNode(node39,oldVChild4 != null ? oldVChild4.node : null,oldVChild4,newVChildren4[newHead4],isSvg4);
																++newHead4;
															}
															++oldHead4;
														} else {
															if(oldKey4 == newKey4) {
																pilot_Differ.patchNode(node39,oldVChild4.node,oldVChild4,newVChildren4[newHead4],isSvg4);
																newKeyed4[newKey4] = true;
																++oldHead4;
															} else {
																tmpVChild4 = keyed4[newKey4];
																if(tmpVChild4 != null) {
																	pilot_Differ.patchNode(node39,node39.insertBefore(tmpVChild4.node,oldVChild4 != null ? oldVChild4.node : null),tmpVChild4,newVChildren4[newHead4],isSvg4);
																	newKeyed4[newKey4] = true;
																} else {
																	pilot_Differ.patchNode(node39,oldVChild4 != null ? oldVChild4.node : null,null,newVChildren4[newHead4],isSvg4);
																}
															}
															++newHead4;
														}
													}
													while(oldHead4 <= oldTail4) {
														oldVChild4 = oldVChildren4[oldHead4++];
														var vnode52 = oldVChild4;
														if((vnode52 == null ? null : vnode52.key) == null) {
															if(oldVChild4.hooks.detach != null) {
																oldVChild4.hooks.detach();
															}
															node39.removeChild(oldVChild4.node);
														}
													}
													var _g_keys18 = Reflect.fields(keyed4);
													var _g_index18 = 0;
													while(_g_index18 < _g_keys18.length) {
														var key112 = _g_keys18[_g_index18++];
														var _g152 = { value : keyed4[key112], key : key112};
														var vnode53 = _g152.value;
														if(newKeyed4[_g152.key] == null) {
															if(vnode53.hooks.detach != null) {
																vnode53.hooks.detach();
															}
															node39.removeChild(vnode53.node);
														}
													}
												}
											}
										}
										newVNode3.node = node39;
										newKeyed2[newKey] = true;
										++oldHead;
									} else {
										tmpVChild = keyed2[newKey];
										if(tmpVChild != null) {
											var node49 = node1.insertBefore(tmpVChild.node,oldVChild != null ? oldVChild.node : null);
											var newVNode4 = newVChildren[newHead];
											var isSvg5 = isSvg;
											if(tmpVChild != newVNode4) {
												if(tmpVChild != null && tmpVChild.type == pilot_VNodeType.VNodeText && newVNode4.type == pilot_VNodeType.VNodeText) {
													if(tmpVChild.name != newVNode4.name) {
														node49.nodeValue = newVNode4.name;
													}
												} else if(tmpVChild == null || tmpVChild.name != newVNode4.name) {
													var node50;
													var _g51 = newVNode4.type;
													if(_g51 == null) {
														node50 = window.document.createElement(newVNode4.name);
													} else {
														switch(_g51._hx_index) {
														case 0:
															node50 = isSvg5 || newVNode4.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",newVNode4.name) : window.document.createElement(newVNode4.name);
															break;
														case 1:
															node50 = window.document.createTextNode(newVNode4.name);
															break;
														case 3:
															node50 = window.document.createDocumentFragment();
															break;
														default:
															node50 = window.document.createElement(newVNode4.name);
														}
													}
													var access35 = newVNode4.props;
													var _g1_keys20 = Reflect.fields(access35);
													var _g1_index20 = 0;
													while(_g1_index20 < _g1_keys20.length) {
														var key113 = _g1_keys20[_g1_index20++];
														var _g259 = { value : access35[key113], key : key113};
														var key114 = _g259.key;
														var value29 = _g259.value;
														var key115 = key114;
														var oldValue38 = null;
														if(key114 != "key") {
															if(StringTools.startsWith(key114,"on")) {
																var event38 = HxOverrides.substr(key114,2,null).toLowerCase();
																if(oldValue38 != null) {
																	node50.removeEventListener(event38,oldValue38);
																}
																if(value29 != null) {
																	node50.addEventListener(event38,value29);
																}
															} else if(!isSvg5 && key114 != "list" && Reflect.getProperty(node50,key114) != null) {
																Reflect.setProperty(node50,key114,value29 == null ? "" : value29);
															} else if(value29 == null || value29 == false) {
																node50.removeAttribute(key114);
															} else {
																if(key114 == "className") {
																	key115 = "class";
																}
																if(key115 == "htmlFor") {
																	key115 = "for";
																}
																node50.setAttribute(key115,value29);
															}
														}
													}
													var _g153 = 0;
													var _g260 = newVNode4.children;
													while(_g153 < _g260.length) {
														var child18 = _g260[_g153];
														++_g153;
														var node51;
														var _g52 = child18.type;
														if(_g52 == null) {
															node51 = window.document.createElement(child18.name);
														} else {
															switch(_g52._hx_index) {
															case 0:
																node51 = isSvg5 || child18.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child18.name) : window.document.createElement(child18.name);
																break;
															case 1:
																node51 = window.document.createTextNode(child18.name);
																break;
															case 3:
																node51 = window.document.createDocumentFragment();
																break;
															default:
																node51 = window.document.createElement(child18.name);
															}
														}
														var _g154 = new haxe_iterators_DynamicAccessKeyValueIterator(child18.props);
														while(_g154.index < _g154.keys.length) {
															var key116 = _g154.keys[_g154.index++];
															var _g261 = { value : _g154.access[key116], key : key116};
															var key117 = _g261.key;
															var value30 = _g261.value;
															var key118 = key117;
															var oldValue39 = null;
															if(key117 != "key") {
																if(StringTools.startsWith(key117,"on")) {
																	var event39 = HxOverrides.substr(key117,2,null).toLowerCase();
																	if(oldValue39 != null) {
																		node51.removeEventListener(event39,oldValue39);
																	}
																	if(value30 != null) {
																		node51.addEventListener(event39,value30);
																	}
																} else if(!isSvg5 && key117 != "list" && Reflect.getProperty(node51,key117) != null) {
																	Reflect.setProperty(node51,key117,value30 == null ? "" : value30);
																} else if(value30 == null || value30 == false) {
																	node51.removeAttribute(key117);
																} else {
																	if(key117 == "className") {
																		key118 = "class";
																	}
																	if(key118 == "htmlFor") {
																		key118 = "for";
																	}
																	node51.setAttribute(key118,value30);
																}
															}
														}
														var _g155 = 0;
														var _g262 = child18.children;
														while(_g155 < _g262.length) {
															var child19 = _g262[_g155];
															++_g155;
															var node52;
															var _g53 = child19.type;
															if(_g53 == null) {
																node52 = window.document.createElement(child19.name);
															} else {
																switch(_g53._hx_index) {
																case 0:
																	node52 = isSvg5 || child19.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child19.name) : window.document.createElement(child19.name);
																	break;
																case 1:
																	node52 = window.document.createTextNode(child19.name);
																	break;
																case 3:
																	node52 = window.document.createDocumentFragment();
																	break;
																default:
																	node52 = window.document.createElement(child19.name);
																}
															}
															var access36 = child19.props;
															var _g1_keys21 = Reflect.fields(access36);
															var _g1_index21 = 0;
															while(_g1_index21 < _g1_keys21.length) {
																var key119 = _g1_keys21[_g1_index21++];
																var _g263 = { value : access36[key119], key : key119};
																var key120 = _g263.key;
																var value31 = _g263.value;
																var key121 = key120;
																var oldValue40 = null;
																if(key120 != "key") {
																	if(StringTools.startsWith(key120,"on")) {
																		var event40 = HxOverrides.substr(key120,2,null).toLowerCase();
																		if(oldValue40 != null) {
																			node52.removeEventListener(event40,oldValue40);
																		}
																		if(value31 != null) {
																			node52.addEventListener(event40,value31);
																		}
																	} else if(!isSvg5 && key120 != "list" && Reflect.getProperty(node52,key120) != null) {
																		Reflect.setProperty(node52,key120,value31 == null ? "" : value31);
																	} else if(value31 == null || value31 == false) {
																		node52.removeAttribute(key120);
																	} else {
																		if(key120 == "className") {
																			key121 = "class";
																		}
																		if(key121 == "htmlFor") {
																			key121 = "for";
																		}
																		node52.setAttribute(key121,value31);
																	}
																}
															}
															var _g156 = 0;
															var _g264 = child19.children;
															while(_g156 < _g264.length) node52.appendChild(pilot_Differ.createNode(_g264[_g156++],isSvg5));
															child19.node = node52;
															if(child19.hooks.attach != null && child19.node != null) {
																child19.hooks.attach(child19);
															}
															node51.appendChild(node52);
														}
														child18.node = node51;
														if(child18.hooks.attach != null && child18.node != null) {
															child18.hooks.attach(child18);
														}
														node50.appendChild(node51);
													}
													newVNode4.node = node50;
													if(newVNode4.hooks.attach != null && newVNode4.node != null) {
														newVNode4.hooks.attach(newVNode4);
													}
													node49 = node1.insertBefore(node50,node49);
													if(tmpVChild != null && tmpVChild.node != null) {
														if(tmpVChild.hooks.detach != null) {
															tmpVChild.hooks.detach();
														}
														node1.removeChild(tmpVChild.node);
													}
												} else {
													var tmpVChild5;
													var oldVChild5;
													var oldKey5;
													var newKey5;
													var oldVProps5 = tmpVChild.props;
													var newVProps5 = newVNode4.props;
													var oldVChildren5 = tmpVChild.children;
													var newVChildren5 = newVNode4.children;
													var oldHead5 = 0;
													var newHead5 = 0;
													var oldTail5 = oldVChildren5.length - 1;
													var newTail5 = newVChildren5.length - 1;
													isSvg5 = isSvg5 || newVNode4.name == "svg";
													var out5 = { };
													var access37 = oldVProps5;
													var _g_keys19 = Reflect.fields(access37);
													var _g_index19 = 0;
													while(_g_index19 < _g_keys19.length) {
														var key122 = _g_keys19[_g_index19++];
														var _g157 = { value : access37[key122], key : key122};
														out5[_g157.key] = _g157.value;
													}
													var access38 = newVProps5;
													var _g_keys20 = Reflect.fields(access38);
													var _g_index20 = 0;
													while(_g_index20 < _g_keys20.length) {
														var key123 = _g_keys20[_g_index20++];
														var _g158 = { value : access38[key123], key : key123};
														out5[_g158.key] = _g158.value;
													}
													var access39 = out5;
													var _g_keys21 = Reflect.fields(access39);
													var _g_index21 = 0;
													while(_g_index21 < _g_keys21.length) {
														var key124 = _g_keys21[_g_index21++];
														var k5 = ({ value : access39[key124], key : key124}).key;
														switch(k5) {
														case "checked":case "selected":case "value":
															if(Reflect.field(node49,k5) != Reflect.field(newVProps5,k5)) {
																var key125 = k5;
																var oldValue41 = Reflect.field(oldVProps5,k5);
																var newValue10 = Reflect.field(newVProps5,k5);
																if(k5 != "key") {
																	if(StringTools.startsWith(k5,"on")) {
																		var event41 = HxOverrides.substr(k5,2,null).toLowerCase();
																		if(oldValue41 != null) {
																			node49.removeEventListener(event41,oldValue41);
																		}
																		if(newValue10 != null) {
																			node49.addEventListener(event41,newValue10);
																		}
																	} else if(!isSvg5 && k5 != "list" && Reflect.getProperty(node49,k5) != null) {
																		Reflect.setProperty(node49,k5,newValue10 == null ? "" : newValue10);
																	} else if(newValue10 == null || newValue10 == false) {
																		node49.removeAttribute(k5);
																	} else {
																		if(k5 == "className") {
																			key125 = "class";
																		}
																		if(key125 == "htmlFor") {
																			key125 = "for";
																		}
																		node49.setAttribute(key125,newValue10);
																	}
																}
															}
															break;
														default:
															if(Reflect.field(oldVProps5,k5) != Reflect.field(newVProps5,k5)) {
																var key126 = k5;
																var oldValue42 = Reflect.field(oldVProps5,k5);
																var newValue11 = Reflect.field(newVProps5,k5);
																if(k5 != "key") {
																	if(StringTools.startsWith(k5,"on")) {
																		var event42 = HxOverrides.substr(k5,2,null).toLowerCase();
																		if(oldValue42 != null) {
																			node49.removeEventListener(event42,oldValue42);
																		}
																		if(newValue11 != null) {
																			node49.addEventListener(event42,newValue11);
																		}
																	} else if(!isSvg5 && k5 != "list" && Reflect.getProperty(node49,k5) != null) {
																		Reflect.setProperty(node49,k5,newValue11 == null ? "" : newValue11);
																	} else if(newValue11 == null || newValue11 == false) {
																		node49.removeAttribute(k5);
																	} else {
																		if(k5 == "className") {
																			key126 = "class";
																		}
																		if(key126 == "htmlFor") {
																			key126 = "for";
																		}
																		node49.setAttribute(key126,newValue11);
																	}
																}
															}
														}
													}
													while(newHead5 <= newTail5 && oldHead5 <= oldTail5) {
														var node53;
														var vnode54 = oldVChildren5[oldHead5];
														oldKey5 = vnode54 == null ? null : vnode54.key;
														if(oldKey5 != null) {
															var vnode55 = newVChildren5[newHead5];
															node53 = oldKey5 != (vnode55 == null ? null : vnode55.key);
														} else {
															node53 = true;
														}
														if(node53) {
															break;
														}
														pilot_Differ.patchNode(node49,oldVChildren5[oldHead5++].node,oldVChildren5[oldHead5 - 1],newVChildren5[newHead5++],isSvg5);
													}
													while(newHead5 <= newTail5 && oldHead5 <= oldTail5) {
														var node54;
														var vnode56 = oldVChildren5[oldTail5];
														oldKey5 = vnode56 == null ? null : vnode56.key;
														if(oldKey5 != null) {
															var vnode57 = newVChildren5[newTail5];
															node54 = oldKey5 != (vnode57 == null ? null : vnode57.key);
														} else {
															node54 = true;
														}
														if(node54) {
															break;
														}
														pilot_Differ.patchNode(node49,oldVChildren5[oldTail5--].node,oldVChildren5[oldTail5 + 1],newVChildren5[newTail5--],isSvg5);
													}
													if(oldHead5 > oldTail5) {
														while(newHead5 <= newTail5) {
															var vnode58 = newVChildren5[newHead5++];
															var node55;
															var _g54 = vnode58.type;
															if(_g54 == null) {
																node55 = window.document.createElement(vnode58.name);
															} else {
																switch(_g54._hx_index) {
																case 0:
																	node55 = isSvg5 || vnode58.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",vnode58.name) : window.document.createElement(vnode58.name);
																	break;
																case 1:
																	node55 = window.document.createTextNode(vnode58.name);
																	break;
																case 3:
																	node55 = window.document.createDocumentFragment();
																	break;
																default:
																	node55 = window.document.createElement(vnode58.name);
																}
															}
															var access40 = vnode58.props;
															var _g1_keys22 = Reflect.fields(access40);
															var _g1_index22 = 0;
															while(_g1_index22 < _g1_keys22.length) {
																var key127 = _g1_keys22[_g1_index22++];
																var _g265 = { value : access40[key127], key : key127};
																var key128 = _g265.key;
																var value32 = _g265.value;
																var key129 = key128;
																var oldValue43 = null;
																if(key128 != "key") {
																	if(StringTools.startsWith(key128,"on")) {
																		var event43 = HxOverrides.substr(key128,2,null).toLowerCase();
																		if(oldValue43 != null) {
																			node55.removeEventListener(event43,oldValue43);
																		}
																		if(value32 != null) {
																			node55.addEventListener(event43,value32);
																		}
																	} else if(!isSvg5 && key128 != "list" && Reflect.getProperty(node55,key128) != null) {
																		Reflect.setProperty(node55,key128,value32 == null ? "" : value32);
																	} else if(value32 == null || value32 == false) {
																		node55.removeAttribute(key128);
																	} else {
																		if(key128 == "className") {
																			key129 = "class";
																		}
																		if(key129 == "htmlFor") {
																			key129 = "for";
																		}
																		node55.setAttribute(key129,value32);
																	}
																}
															}
															var _g159 = 0;
															var _g266 = vnode58.children;
															while(_g159 < _g266.length) {
																var child20 = _g266[_g159];
																++_g159;
																var node56;
																var _g55 = child20.type;
																if(_g55 == null) {
																	node56 = window.document.createElement(child20.name);
																} else {
																	switch(_g55._hx_index) {
																	case 0:
																		node56 = isSvg5 || child20.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child20.name) : window.document.createElement(child20.name);
																		break;
																	case 1:
																		node56 = window.document.createTextNode(child20.name);
																		break;
																	case 3:
																		node56 = window.document.createDocumentFragment();
																		break;
																	default:
																		node56 = window.document.createElement(child20.name);
																	}
																}
																var _g160 = new haxe_iterators_DynamicAccessKeyValueIterator(child20.props);
																while(_g160.index < _g160.keys.length) {
																	var key130 = _g160.keys[_g160.index++];
																	var _g267 = { value : _g160.access[key130], key : key130};
																	var key131 = _g267.key;
																	var value33 = _g267.value;
																	var key132 = key131;
																	var oldValue44 = null;
																	if(key131 != "key") {
																		if(StringTools.startsWith(key131,"on")) {
																			var event44 = HxOverrides.substr(key131,2,null).toLowerCase();
																			if(oldValue44 != null) {
																				node56.removeEventListener(event44,oldValue44);
																			}
																			if(value33 != null) {
																				node56.addEventListener(event44,value33);
																			}
																		} else if(!isSvg5 && key131 != "list" && Reflect.getProperty(node56,key131) != null) {
																			Reflect.setProperty(node56,key131,value33 == null ? "" : value33);
																		} else if(value33 == null || value33 == false) {
																			node56.removeAttribute(key131);
																		} else {
																			if(key131 == "className") {
																				key132 = "class";
																			}
																			if(key132 == "htmlFor") {
																				key132 = "for";
																			}
																			node56.setAttribute(key132,value33);
																		}
																	}
																}
																var _g161 = 0;
																var _g268 = child20.children;
																while(_g161 < _g268.length) {
																	var child21 = _g268[_g161];
																	++_g161;
																	var node57;
																	var _g56 = child21.type;
																	if(_g56 == null) {
																		node57 = window.document.createElement(child21.name);
																	} else {
																		switch(_g56._hx_index) {
																		case 0:
																			node57 = isSvg5 || child21.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child21.name) : window.document.createElement(child21.name);
																			break;
																		case 1:
																			node57 = window.document.createTextNode(child21.name);
																			break;
																		case 3:
																			node57 = window.document.createDocumentFragment();
																			break;
																		default:
																			node57 = window.document.createElement(child21.name);
																		}
																	}
																	var access41 = child21.props;
																	var _g1_keys23 = Reflect.fields(access41);
																	var _g1_index23 = 0;
																	while(_g1_index23 < _g1_keys23.length) {
																		var key133 = _g1_keys23[_g1_index23++];
																		var _g269 = { value : access41[key133], key : key133};
																		var key134 = _g269.key;
																		var value34 = _g269.value;
																		var key135 = key134;
																		var oldValue45 = null;
																		if(key134 != "key") {
																			if(StringTools.startsWith(key134,"on")) {
																				var event45 = HxOverrides.substr(key134,2,null).toLowerCase();
																				if(oldValue45 != null) {
																					node57.removeEventListener(event45,oldValue45);
																				}
																				if(value34 != null) {
																					node57.addEventListener(event45,value34);
																				}
																			} else if(!isSvg5 && key134 != "list" && Reflect.getProperty(node57,key134) != null) {
																				Reflect.setProperty(node57,key134,value34 == null ? "" : value34);
																			} else if(value34 == null || value34 == false) {
																				node57.removeAttribute(key134);
																			} else {
																				if(key134 == "className") {
																					key135 = "class";
																				}
																				if(key135 == "htmlFor") {
																					key135 = "for";
																				}
																				node57.setAttribute(key135,value34);
																			}
																		}
																	}
																	var _g162 = 0;
																	var _g270 = child21.children;
																	while(_g162 < _g270.length) node57.appendChild(pilot_Differ.createNode(_g270[_g162++],isSvg5));
																	child21.node = node57;
																	if(child21.hooks.attach != null && child21.node != null) {
																		child21.hooks.attach(child21);
																	}
																	node56.appendChild(node57);
																}
																child20.node = node56;
																if(child20.hooks.attach != null && child20.node != null) {
																	child20.hooks.attach(child20);
																}
																node55.appendChild(node56);
															}
															vnode58.node = node55;
															if(vnode58.hooks.attach != null && vnode58.node != null) {
																vnode58.hooks.attach(vnode58);
															}
															oldVChild5 = oldVChildren5[oldHead5];
															node49.insertBefore(node55,oldVChild5 != null ? oldVChild5.node : null);
														}
													} else if(newHead5 > newTail5) {
														while(oldHead5 <= oldTail5) {
															var vnode59 = oldVChildren5[oldHead5++];
															if(vnode59.hooks.detach != null) {
																vnode59.hooks.detach();
															}
															node49.removeChild(vnode59.node);
														}
													} else {
														var keyed5 = { };
														var newKeyed5 = { };
														var i5 = oldHead5;
														while(i5 <= oldTail5) {
															oldKey5 = oldVChildren5[i5].key;
															if(oldKey5 != null) {
																keyed5[oldKey5] = oldVChildren5[i5];
															}
															++i5;
														}
														while(newHead5 <= newTail5) {
															oldVChild5 = oldVChildren5[oldHead5];
															var vnode60 = oldVChild5;
															oldKey5 = vnode60 == null ? null : vnode60.key;
															var vnode61 = newVChildren5[newHead5];
															newKey5 = vnode61 == null ? null : vnode61.key;
															var node58;
															if(newKeyed5[oldKey5] == null) {
																if(newKey5 != null) {
																	var vnode62 = oldVChildren5[oldHead5 + 1];
																	node58 = newKey5 == (vnode62 == null ? null : vnode62.key);
																} else {
																	node58 = false;
																}
															} else {
																node58 = true;
															}
															if(node58) {
																if(oldKey5 == null) {
																	if(oldVChild5.hooks.detach != null) {
																		oldVChild5.hooks.detach();
																	}
																	node49.removeChild(oldVChild5.node);
																}
																++oldHead5;
																continue;
															}
															if(newKey5 == null || tmpVChild.type == pilot_VNodeType.VNodeRecycled) {
																if(oldKey5 == null) {
																	pilot_Differ.patchNode(node49,oldVChild5 != null ? oldVChild5.node : null,oldVChild5,newVChildren5[newHead5],isSvg5);
																	++newHead5;
																}
																++oldHead5;
															} else {
																if(oldKey5 == newKey5) {
																	pilot_Differ.patchNode(node49,oldVChild5.node,oldVChild5,newVChildren5[newHead5],isSvg5);
																	newKeyed5[newKey5] = true;
																	++oldHead5;
																} else {
																	tmpVChild5 = keyed5[newKey5];
																	if(tmpVChild5 != null) {
																		pilot_Differ.patchNode(node49,node49.insertBefore(tmpVChild5.node,oldVChild5 != null ? oldVChild5.node : null),tmpVChild5,newVChildren5[newHead5],isSvg5);
																		newKeyed5[newKey5] = true;
																	} else {
																		pilot_Differ.patchNode(node49,oldVChild5 != null ? oldVChild5.node : null,null,newVChildren5[newHead5],isSvg5);
																	}
																}
																++newHead5;
															}
														}
														while(oldHead5 <= oldTail5) {
															oldVChild5 = oldVChildren5[oldHead5++];
															var vnode63 = oldVChild5;
															if((vnode63 == null ? null : vnode63.key) == null) {
																if(oldVChild5.hooks.detach != null) {
																	oldVChild5.hooks.detach();
																}
																node49.removeChild(oldVChild5.node);
															}
														}
														var _g_keys22 = Reflect.fields(keyed5);
														var _g_index22 = 0;
														while(_g_index22 < _g_keys22.length) {
															var key136 = _g_keys22[_g_index22++];
															var _g163 = { value : keyed5[key136], key : key136};
															var vnode64 = _g163.value;
															if(newKeyed5[_g163.key] == null) {
																if(vnode64.hooks.detach != null) {
																	vnode64.hooks.detach();
																}
																node49.removeChild(vnode64.node);
															}
														}
													}
												}
											}
											newVNode4.node = node49;
											newKeyed2[newKey] = true;
										} else {
											var node59 = oldVChild != null ? oldVChild.node : null;
											var newVNode5 = newVChildren[newHead];
											var isSvg6 = isSvg;
											if(null != newVNode5) {
												var node60;
												var _g57 = newVNode5.type;
												if(_g57 == null) {
													node60 = window.document.createElement(newVNode5.name);
												} else {
													switch(_g57._hx_index) {
													case 0:
														node60 = isSvg6 || newVNode5.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",newVNode5.name) : window.document.createElement(newVNode5.name);
														break;
													case 1:
														node60 = window.document.createTextNode(newVNode5.name);
														break;
													case 3:
														node60 = window.document.createDocumentFragment();
														break;
													default:
														node60 = window.document.createElement(newVNode5.name);
													}
												}
												var access42 = newVNode5.props;
												var _g1_keys24 = Reflect.fields(access42);
												var _g1_index24 = 0;
												while(_g1_index24 < _g1_keys24.length) {
													var key137 = _g1_keys24[_g1_index24++];
													var _g271 = { value : access42[key137], key : key137};
													var key138 = _g271.key;
													var value35 = _g271.value;
													var key139 = key138;
													var oldValue46 = null;
													if(key138 != "key") {
														if(StringTools.startsWith(key138,"on")) {
															var event46 = HxOverrides.substr(key138,2,null).toLowerCase();
															if(oldValue46 != null) {
																node60.removeEventListener(event46,oldValue46);
															}
															if(value35 != null) {
																node60.addEventListener(event46,value35);
															}
														} else if(!isSvg6 && key138 != "list" && Reflect.getProperty(node60,key138) != null) {
															Reflect.setProperty(node60,key138,value35 == null ? "" : value35);
														} else if(value35 == null || value35 == false) {
															node60.removeAttribute(key138);
														} else {
															if(key138 == "className") {
																key139 = "class";
															}
															if(key139 == "htmlFor") {
																key139 = "for";
															}
															node60.setAttribute(key139,value35);
														}
													}
												}
												var _g164 = 0;
												var _g272 = newVNode5.children;
												while(_g164 < _g272.length) {
													var child22 = _g272[_g164];
													++_g164;
													var node61;
													var _g58 = child22.type;
													if(_g58 == null) {
														node61 = window.document.createElement(child22.name);
													} else {
														switch(_g58._hx_index) {
														case 0:
															node61 = isSvg6 || child22.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child22.name) : window.document.createElement(child22.name);
															break;
														case 1:
															node61 = window.document.createTextNode(child22.name);
															break;
														case 3:
															node61 = window.document.createDocumentFragment();
															break;
														default:
															node61 = window.document.createElement(child22.name);
														}
													}
													var _g165 = new haxe_iterators_DynamicAccessKeyValueIterator(child22.props);
													while(_g165.index < _g165.keys.length) {
														var key140 = _g165.keys[_g165.index++];
														var _g273 = { value : _g165.access[key140], key : key140};
														var key141 = _g273.key;
														var value36 = _g273.value;
														var key142 = key141;
														var oldValue47 = null;
														if(key141 != "key") {
															if(StringTools.startsWith(key141,"on")) {
																var event47 = HxOverrides.substr(key141,2,null).toLowerCase();
																if(oldValue47 != null) {
																	node61.removeEventListener(event47,oldValue47);
																}
																if(value36 != null) {
																	node61.addEventListener(event47,value36);
																}
															} else if(!isSvg6 && key141 != "list" && Reflect.getProperty(node61,key141) != null) {
																Reflect.setProperty(node61,key141,value36 == null ? "" : value36);
															} else if(value36 == null || value36 == false) {
																node61.removeAttribute(key141);
															} else {
																if(key141 == "className") {
																	key142 = "class";
																}
																if(key142 == "htmlFor") {
																	key142 = "for";
																}
																node61.setAttribute(key142,value36);
															}
														}
													}
													var _g166 = 0;
													var _g274 = child22.children;
													while(_g166 < _g274.length) {
														var child23 = _g274[_g166];
														++_g166;
														var node62;
														var _g59 = child23.type;
														if(_g59 == null) {
															node62 = window.document.createElement(child23.name);
														} else {
															switch(_g59._hx_index) {
															case 0:
																node62 = isSvg6 || child23.name == "svg" ? window.document.createElementNS("\"http://www.w3.org/2000/svg",child23.name) : window.document.createElement(child23.name);
																break;
															case 1:
																node62 = window.document.createTextNode(child23.name);
																break;
															case 3:
																node62 = window.document.createDocumentFragment();
																break;
															default:
																node62 = window.document.createElement(child23.name);
															}
														}
														var access43 = child23.props;
														var _g1_keys25 = Reflect.fields(access43);
														var _g1_index25 = 0;
														while(_g1_index25 < _g1_keys25.length) {
															var key143 = _g1_keys25[_g1_index25++];
															var _g275 = { value : access43[key143], key : key143};
															var key144 = _g275.key;
															var value37 = _g275.value;
															var key145 = key144;
															var oldValue48 = null;
															if(key144 != "key") {
																if(StringTools.startsWith(key144,"on")) {
																	var event48 = HxOverrides.substr(key144,2,null).toLowerCase();
																	if(oldValue48 != null) {
																		node62.removeEventListener(event48,oldValue48);
																	}
																	if(value37 != null) {
																		node62.addEventListener(event48,value37);
																	}
																} else if(!isSvg6 && key144 != "list" && Reflect.getProperty(node62,key144) != null) {
																	Reflect.setProperty(node62,key144,value37 == null ? "" : value37);
																} else if(value37 == null || value37 == false) {
																	node62.removeAttribute(key144);
																} else {
																	if(key144 == "className") {
																		key145 = "class";
																	}
																	if(key145 == "htmlFor") {
																		key145 = "for";
																	}
																	node62.setAttribute(key145,value37);
																}
															}
														}
														var _g167 = 0;
														var _g276 = child23.children;
														while(_g167 < _g276.length) node62.appendChild(pilot_Differ.createNode(_g276[_g167++],isSvg6));
														child23.node = node62;
														if(child23.hooks.attach != null && child23.node != null) {
															child23.hooks.attach(child23);
														}
														node61.appendChild(node62);
													}
													child22.node = node61;
													if(child22.hooks.attach != null && child22.node != null) {
														child22.hooks.attach(child22);
													}
													node60.appendChild(node61);
												}
												newVNode5.node = node60;
												if(newVNode5.hooks.attach != null && newVNode5.node != null) {
													newVNode5.hooks.attach(newVNode5);
												}
												node59 = node1.insertBefore(node60,node59);
											}
											newVNode5.node = node59;
										}
									}
									++newHead;
								}
							}
							while(oldHead <= oldTail) {
								oldVChild = oldVChildren[oldHead++];
								var vnode65 = oldVChild;
								if((vnode65 == null ? null : vnode65.key) == null) {
									if(oldVChild.hooks.detach != null) {
										oldVChild.hooks.detach();
									}
									node1.removeChild(oldVChild.node);
								}
							}
							var _g_keys23 = Reflect.fields(keyed2);
							var _g_index23 = 0;
							while(_g_index23 < _g_keys23.length) {
								var key146 = _g_keys23[_g_index23++];
								var _g168 = { value : keyed2[key146], key : key146};
								var vnode66 = _g168.value;
								if(newKeyed2[_g168.key] == null) {
									if(vnode66.hooks.detach != null) {
										vnode66.hooks.detach();
									}
									node1.removeChild(vnode66.node);
								}
							}
						}
					}
				}
				vnode.node = node1;
				node = node1;
				node["__vnode"] = vnode;
			}
		}
		return value;
	}
}
todo_ui_TodoItem.__name__ = true;
Object.assign(todo_ui_TodoItem.prototype, {
	__properties__: {set_editing: "set_editing"}
});
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $global.$haxeUID++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = m.bind(o); o.hx__closures__[m.__id__] = f; } return f; }
if(typeof $global.$haxeUID == "undefined") $global.$haxeUID = 0;
String.__name__ = true;
Array.__name__ = true;
Object.defineProperty(js__$Boot_HaxeError.prototype,"message",{ get : function() {
	return String(this.val);
}});
js_Boot.__toStr = ({ }).toString;
todo_data_Todo.ids = 0;
TodoApp.main();
})(typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
